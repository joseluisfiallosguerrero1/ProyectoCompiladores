/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyectocompi;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

/**
 *
 * @author Usuario
 */
public class Tree extends javax.swing.JFrame {

    /**
     * Creates new form Tree
     */
    public Tree() {
        initComponents();
        this.jTree1.setModel(new DefaultTreeModel(new DefaultMutableTreeNode("PROGRAM")));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        ShowTables = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setViewportView(jTree1);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        jButton1.setText("Compilar");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        jButton2.setText("Generar Lexer y Parser");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });

        ShowTables.setText("Mostrar Tablas de Simbolos");
        ShowTables.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ShowTablesMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ShowTables))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 523, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 638, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButton2)
                            .addComponent(ShowTables))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 636, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
        this.jTextArea1.setText("");
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new File("C:/Users/Usuario/Documents/Periodo I 2018/Compiladores I/ProyectoCompiladores"));
        int value = chooser.showOpenDialog(jTree1);

        if (value == JFileChooser.APPROVE_OPTION) {
            try {
                File file = chooser.getSelectedFile();
                FileReader fr = new FileReader(file);
                BufferedReader br = new BufferedReader(fr);
                String line = "";
                while (line != null) {
                    line = br.readLine();
                    this.jTextArea1.append(line);
                    this.jTextArea1.append("\n");
                }
                this.runParser(file.getName());
                JOptionPane.showMessageDialog(this, "Parseado por completo");
            } catch (FileNotFoundException ex) {
                JOptionPane.showMessageDialog(this, "ERROR");
            } catch (IOException ex) {
                Logger.getLogger(Tree.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton1MouseClicked

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        // TODO add your handling code here:
        generateLexer();
        generateParser();
        moveFile("AnalizadorSintactico.java");
        moveFile("sym.java");
        JOptionPane.showMessageDialog(this, "Se genero correctamente");
    }//GEN-LAST:event_jButton2MouseClicked

    private void ShowTablesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ShowTablesMouseClicked
        // TODO add your handling code here:
        DefaultTreeModel model = new DefaultTreeModel(new DefaultMutableTreeNode());
        this.showTree(null, this.symbolTables.root, model, (DefaultMutableTreeNode) model.getRoot());
    }//GEN-LAST:event_ShowTablesMouseClicked

    public void generateLexer() {
        String[] params = new String[3];
        params[0] = "-d";
        params[1] = "src/proyectocompi";
        params[2] = "src/proyectocompi/lexer.flex";

        try {
            jflex.Main.generate(params);
            System.out.println("Se genero lexer");
        } catch (Exception e) {
        }
    }

    public void generateParser() {
        String[] params2 = new String[3];
        params2[0] = "-parser";
        params2[1] = "AnalizadorSintactico";
        params2[2] = "src/proyectocompi/Asintactico.cup";

        try {
            java_cup.Main.main(params2);
            System.out.println("Se genero el Parser");
        } catch (Exception e) {
        }
    }

    public boolean moveFile(String archNombre) {
        boolean efectuado = false;
        File arch = new File(archNombre);
        if (arch.exists()) {
            System.out.println("\n*** Moviendo " + arch + " \n***");
            Path currentRelativePath = Paths.get("");
            String nuevoDir = currentRelativePath.toAbsolutePath().toString()
                    + File.separator + "src" + File.separator
                    + "proyectocompi" + File.separator + arch.getName();
            File archViejo = new File(nuevoDir);
            archViejo.delete();
            if (arch.renameTo(new File(nuevoDir))) {
                System.out.println("\n*** Generado " + archNombre + "***\n");
                efectuado = true;
            } else {
                System.out.println("\n*** No movido " + archNombre + " ***\n");
            }
        } else {
            System.out.println("\n*** Codigo no existente ***\n");
        }
        return efectuado;
    }

    public void runParser(String file) throws FileNotFoundException {
        DefaultTreeModel model = new DefaultTreeModel(new DefaultMutableTreeNode());
        Lexer lexer = new Lexer(new FileReader(file));
        AnalizadorSintactico parser = new AnalizadorSintactico(lexer);
        ArrayList arr = new ArrayList();
        result = new MyTree();
        list = new ArrayList();

        try {
            arr = (ArrayList) parser.parse().value;
            result = (MyTree) arr.get(0);
            list = (ArrayList<Row>) arr.get(1);
            this.showTree(null, result.root, model, (DefaultMutableTreeNode) model.getRoot());
            System.out.println("Parseado correctamente");
        } catch (Exception e) {
            e.printStackTrace();
        }

        this.addFunctionsToSymbolTable();
        System.out.println("");
        System.out.println("***************ANALISIS SEMANTICO*********************");
        TreeNode node = this.getLeftestSon(result.root);
        this.evaluateTree(node.getParent(), node);
    }

    public void addFunctionsToSymbolTable() {
        if (list.size() > 0) {
            TreeNode node = new TreeNode("Functions", this.symbolTables.root);
            this.symbolTables.root.hijos.add(node);
            TreeNode node2 = new TreeNode(this.list, node);
            node.hijos.add(node2);

        }
    }

    public void evaluateTree(TreeNode parent, TreeNode node) {
        if (parent == null) {
            System.out.println("Recorrido terminado");
        } else {
            evaluateNode(node);
            if (node.hasRightBrother()) {
                node = getLeftestSon(node.getRightBrother());
                evaluateTree(node.getParent(), node);
            } else {
                evaluateTree(parent.getParent(), parent);
            }
        }
    }

    public void evaluateNode(TreeNode node) {
        if (node.value.toString().equals("Type")) {
            this.type = node.getLefterSon().value.toString();
        } else if (node.value.toString().equals("Declaration")) {
            evaluateDeclaration(node);
        } else if (node.value.toString().equals("Assignment")) {
            evaluateAssignment(node, false);
        } else if (node.value.toString().equals("Main")) {
            TreeNode ambit = new TreeNode("Main", this.symbolTables.root);
            this.symbolTables.root.hijos.add(ambit);
            TreeNode table = new TreeNode(this.list, ambit);
            ambit.hijos.add(table);
            this.list = new ArrayList();
        } else if (node.value.toString().equals("function")) {
            TreeNode ambit = new TreeNode(node.getLefterSon().value.toString(), this.symbolTables.root);
            this.symbolTables.root.hijos.add(ambit);
            TreeNode table = new TreeNode(this.list, ambit);
            ambit.hijos.add(table);
            this.list = new ArrayList();
        }
    }

    public void evaluateDeclaration(TreeNode node) {
        for (int i = 1; i < node.hijos.size(); i++) {
            if (!node.hijos.get(i).value.toString().equals("Assignment")) {
                if (!this.existInSymbolTable(node.hijos.get(i).value.toString())) {
                    this.list.add(new Row(node.hijos.get(i).value.toString(), this.type));
                } else {
                    System.out.println("Variable " + node.hijos.get(i).value.toString()
                            + " ya ha sido declarada");
                }
            } else {
                evaluateAssignment(node.hijos.get(i), true);
            }
        }
    }

    public void evaluateAssignment(TreeNode node, boolean isDeclaration) {
        String id = node.getLefterSon().value.toString();
        String type = "";

        if (node.getParent().value.toString().equals("Declaration")) {
            if (isDeclaration) {
                if (this.type.equals(node.getHijos().get(1).value.toString())) {
                    this.list.add(new Row(id, this.type));
                } else {
                    System.out.println("Variable: " + id + " es de tipo " + this.type);
                }
            }
        } else {
            if (this.existInSymbolTable(id)) {
                type = this.getTypeById(node.getLefterSon().value.toString());
                if (node.hijos.get(1).value.toString().equals(type)) {
                    //En caso de modificar valor
                } else {
                    System.out.println("Variable " + id + " es de tipo " + type);
                }
            } else {
                System.out.println("Variable " + id + " no ha sido declarada");
            }
        }
    }

    public boolean existInSymbolTable(String value) {
        for (int i = 0; i < this.list.size(); i++) {
            if (this.list.get(i).getId().equals(value)) {
                return true;
            }
        }
        return false;
    }

    public String getTypeById(String id) {
        for (int i = 0; i < list.size(); i++) {
            if (list.get(i).getId().equals(id)) {
                return list.get(i).getType();
            }
        }
        return "null";
    }

    public TreeNode getLeftestSon(TreeNode node) {
        while (node.isParent()) {
            node = node.getLefterSon();
        }
        return node;
    }

    public void showTree(TreeNode parent, TreeNode node, DefaultTreeModel model, DefaultMutableTreeNode treeNode) {
        if (parent == null) {
            model = new DefaultTreeModel(new DefaultMutableTreeNode(node.getValue()));
            if (node.hijos.size() > 0) {
                showTree(node, node.getLefterSon(), model, (DefaultMutableTreeNode) model.getRoot());
            }
        } else {
            DefaultMutableTreeNode hijo = new DefaultMutableTreeNode(node.getValue());
            treeNode.add(hijo);
            if (node.hasRightBrother()) {
                showTree(parent, node.getRightBrother(), model, treeNode);
            }

            if (node.hijos.size() > 0) {
                showTree(node, node.getLefterSon(), model, hijo);
            }
        }
        this.jTree1.setModel(model);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Tree.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Tree.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Tree.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Tree.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Tree().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ShowTables;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    public javax.swing.JTree jTree1;
    // End of variables declaration//GEN-END:variables
    MyTree result = new MyTree();
    MyTree symbolTables = new MyTree(new TreeNode("Symbol Tables", null));
    String type = "";
    ArrayList<Row> list = new ArrayList();
}
