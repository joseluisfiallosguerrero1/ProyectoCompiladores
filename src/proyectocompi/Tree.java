/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyectocompi;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

/**
 *
 * @author Usuario
 */
public class Tree extends javax.swing.JFrame {

    /**
     * Creates new form Tree
     */
    public Tree() {
        initComponents();
        this.jTree1.setModel(new DefaultTreeModel(new DefaultMutableTreeNode("PROGRAM")));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        ShowTables = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setViewportView(jTree1);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        jButton1.setText("Compilar");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        jButton2.setText("Generar Lexer y Parser");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });

        ShowTables.setText("Mostrar Tablas de Simbolos");
        ShowTables.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ShowTablesMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ShowTables))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 523, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 638, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButton2)
                            .addComponent(ShowTables))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 636, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
        this.jTextArea1.setText("");
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new File("C:/Users/Usuario/Documents/Periodo I 2018/Compiladores I/ProyectoCompiladores"));
        int value = chooser.showOpenDialog(jTree1);

        if (value == JFileChooser.APPROVE_OPTION) {
            try {
                File file = chooser.getSelectedFile();
                FileReader fr = new FileReader(file);
                BufferedReader br = new BufferedReader(fr);
                String line = "";
                while (line != null) {
                    line = br.readLine();
                    this.jTextArea1.append(line);
                    this.jTextArea1.append("\n");
                }
                this.runParser(file.getName());
                JOptionPane.showMessageDialog(this, "Parseado por completo");
            } catch (FileNotFoundException ex) {
                JOptionPane.showMessageDialog(this, "ERROR");
            } catch (IOException ex) {
                Logger.getLogger(Tree.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton1MouseClicked

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        // TODO add your handling code here:
        generateLexer();
        generateParser();
        moveFile("AnalizadorSintactico.java");
        moveFile("sym.java");
        JOptionPane.showMessageDialog(this, "Se genero correctamente");
    }//GEN-LAST:event_jButton2MouseClicked

    private void ShowTablesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ShowTablesMouseClicked
        // TODO add your handling code here:
        DefaultTreeModel model = new DefaultTreeModel(new DefaultMutableTreeNode());
        this.showTree(null, this.symbolTables.root, model, (DefaultMutableTreeNode) model.getRoot());
    }//GEN-LAST:event_ShowTablesMouseClicked

    public void generateLexer() {
        String[] params = new String[3];
        params[0] = "-d";
        params[1] = "src/proyectocompi";
        params[2] = "src/proyectocompi/lexer.flex";

        try {
            jflex.Main.generate(params);
            System.out.println("Se genero lexer");
        } catch (Exception e) {
        }
    }

    public void generateParser() {
        String[] params2 = new String[3];
        params2[0] = "-parser";
        params2[1] = "AnalizadorSintactico";
        params2[2] = "src/proyectocompi/Asintactico.cup";

        try {
            java_cup.Main.main(params2);
            System.out.println("Se genero el Parser");
        } catch (Exception e) {
        }
    }

    public boolean moveFile(String archNombre) {
        boolean efectuado = false;
        File arch = new File(archNombre);
        if (arch.exists()) {
            System.out.println("\n*** Moviendo " + arch + " \n***");
            Path currentRelativePath = Paths.get("");
            String nuevoDir = currentRelativePath.toAbsolutePath().toString()
                    + File.separator + "src" + File.separator
                    + "proyectocompi" + File.separator + arch.getName();
            File archViejo = new File(nuevoDir);
            archViejo.delete();
            if (arch.renameTo(new File(nuevoDir))) {
                System.out.println("\n*** Generado " + archNombre + "***\n");
                efectuado = true;
            } else {
                System.out.println("\n*** No movido " + archNombre + " ***\n");
            }
        } else {
            System.out.println("\n*** Codigo no existente ***\n");
        }
        return efectuado;
    }

    public void runParser(String file) throws FileNotFoundException {
        DefaultTreeModel model = new DefaultTreeModel(new DefaultMutableTreeNode());
        Lexer lexer = new Lexer(new FileReader(file));
        AnalizadorSintactico parser = new AnalizadorSintactico(lexer);
        ArrayList arr = new ArrayList();
        this.symbolTables = new MyTree(new TreeNode("Symbol Tables", null));
        result = new MyTree();
        table = new SymbolTable("Functions");
        node = this.symbolTables.root;

        try {
            arr = (ArrayList) parser.parse().value;
            result = (MyTree) arr.get(0);
            table.list = (ArrayList<Row>) arr.get(1);
            this.showTree(null, result.root, model, (DefaultMutableTreeNode) model.getRoot());
            System.out.println("Parseado correctamente");
        } catch (Exception e) {
            e.printStackTrace();
        }

        this.addTableToTree(table, this.symbolTables.root);
        System.out.println("");
        System.out.println("***************ANALISIS SEMANTICO*********************");
        TreeNode node = this.getLeftestSon(result.root);
        this.evaluateTree(this.result.root, this.result.root.getLefterSon());
    }

    public void addTableToTree(SymbolTable table, TreeNode parent) {
        TreeNode node = new TreeNode(table, parent);
        parent.addSon(node);
        this.node = node;
    }

    public SymbolTable getTableFromNode(TreeNode node) {
        return (SymbolTable) node.value;
    }

    public void evaluateTree(TreeNode parent, TreeNode node) {
        evaluateNode(node);
        if (node.isParent()) {
            evaluateTree(node, node.getLefterSon());
        }

        verifyExitFromBranch(node);
        if (node.hasRightBrother()) {
            evaluateTree(parent, node.getRightBrother());
        }
    }

    public void evaluateNode(TreeNode node) {
        if (node.value.toString().equals("Declaration")) {
            this.type = this.getLeftestSon(node).value.toString();
            this.evaluateDeclaration(node);
        } else if (node.value.toString().equals("Assignment")) {
            this.evaluateAssignment(node, false);
        } else if (node.value.toString().equals("Main")) {
            this.table = new SymbolTable("Main");
            this.addTableToTree(table, this.symbolTables.root);
            parentType = "int";
            parent = "Main";
        } else if (node.value.toString().equals("function")) {
            this.table = new SymbolTable(node.getLefterSon().value.toString());
            this.addTableToTree(table, this.symbolTables.root);
            parentType = node.getHijos().get(1).value.toString();
            parent = node.getLefterSon().value.toString();
        } else if (node.value.toString().equals("Call")) {
            this.evaluateCall(node, "", false);
        } else if (node.value.toString().equals("If")) {
            this.table = new SymbolTable("If");
            this.addTableToTree(table, this.node);
        } else if (node.value.toString().equals("While")) {
            this.table = new SymbolTable("While");
            this.addTableToTree(table, this.node);
        } else if (node.value.toString().equals("ElseIf")) {
            this.table = new SymbolTable("ElseIf");
            this.addTableToTree(table, this.node.parent);
        } else if (node.value.toString().equals("Else")) {
            this.table = new SymbolTable("Else");
            this.addTableToTree(table, this.node);
        } else if (node.value.toString().equals("For")) {
            this.table = new SymbolTable("For");
            this.addTableToTree(table, this.node);
            this.evaluateFor(node);
        } else if (node.value.toString().equals("Case")) {
            this.table = new SymbolTable("Case " + node.getLefterSon().value.toString());
            this.addTableToTree(table, this.node);
        } else if (node.value.toString().equals("ArrayElementAssignment")) {
            this.evaluateArrayElementAssignment(node);
        } else if (node.value.toString().equals("Equal")) {
            this.evaluateComparison(node);
        } else if (node.value.toString().equals("GreaterThan")) {
            this.evaluateComparison(node);
        } else if (node.value.toString().equals("LessThan")) {
            this.evaluateComparison(node);
        } else if (node.value.toString().equals("Different")) {
            this.evaluateComparison(node);
        } else if (node.value.toString().equals("GreaterEqual")) {
            this.evaluateComparison(node);
        } else if (node.value.toString().equals("LessEqual")) {
            this.evaluateComparison(node);
        } else if (node.value.toString().equals("Switch")) {
            this.evaluateSwitch(node);
        } else if (node.value.toString().equals("Write")) {
            for (int i = 0; i < node.getHijos().size(); i++) {
                if (node.getHijos().get(i).value.toString().equals("Call")) {
                    this.evaluateCall(node.getHijos().get(i), "void", true);
                } else {
                    this.getNodeType(node);
                }
            }
        } else if (node.value.toString().equals("Read")) {
            if (!this.existInTable(this.node, node.getLefterSon().value.toString())) {
                System.out.println("Error semantico. Variable " + node.getLefterSon().value.toString()
                        + " no ha sido declarada");
            }
        } else if (node.value.toString().equals("Return")) {
            this.evaluateReturn(node);
        }
    }

    public void verifyExitFromBranch(TreeNode node) {
        if (node.value.toString().equals("If")) {
            //No necesito ver salida de if
        } else if (node.value.toString().equals("While")) {
            this.node = this.node.getParent();
        } else if (node.value.toString().equals("ElseIf")) {;
            this.node = this.node.getParent();
        } else if (node.value.toString().equals("Else")) {
            this.node = this.node.getParent();
        } else if (node.value.toString().equals("For")) {
            this.node = this.node.getParent();
        } else if (node.value.toString().equals("Case")) {
            this.node = this.node.getParent();
        }
    }

    public void evaluateReturn(TreeNode node) {
        TreeNode value = node.getLefterSon();
        String returnType = "";

        if (value.value.toString().equals("Call")) {
            if (this.evaluateCall(value, "void", true)) {
                returnType = this.actualType;
            }
        } else {
            returnType = this.getNodeType(value);
        }

        if (!this.parentType.equals(returnType)) {
            System.out.println("Error semantico. El retorno de " + parent
                    + " deber ser de tipo " + this.parentType);
        }
    }

    public void evaluateFor(TreeNode node) {
        node = node.getLefterSon();
        TreeNode variable = node.getLefterSon();
        TreeNode range = node.getHijos().get(1);
        TreeNode step = node.getHijos().get(2);
        String id = variable.getHijos().get(1).value.toString();

        if (variable.getLefterSon().value.equals("int")) {
            if (this.existInTable(this.node, id)) {
                System.out.println("Error semantico. La variable " + id + " ya ha sido declarada");
                return;
            }
        } else {
            System.out.println("Error semantico. La variable del for debe ser de tipo int");
            return;
        }

        if (!(this.getNodeType(range.getHijos().get(0)).equals("int") && this.getNodeType(range.getHijos().get(1)).equals("int"))) {
            System.out.println("Error semantico. Los rangos del for deben ser int");
            return;
        }

        if (!this.getNodeType(step.getLefterSon()).equals("int")) {
            System.out.println("Error semantico. El valor de incremento del for debe ser de tipo int");
            return;
        }
        this.getTableFromNode(this.node).list.add(new Row(id, "int"));
    }

    public void evaluateSwitch(TreeNode node) {
        String id = node.getLefterSon().value.toString();
        String type = "";
        String caseValue = "";
        String caseValueType = "";

        if (this.existInTable(this.node, id)) {
            type = this.getTypeById(this.node, id);
            for (int i = 1; i < node.getHijos().size() - 1; i++) {
                caseValue = node.getHijos().get(i).getLefterSon().value.toString();
                if (Character.isDigit(caseValue.charAt(0))) {
                    caseValueType = "int";
                } else {
                    if (caseValue.length() == 1) {
                        caseValueType = "char";
                    } else {
                        System.out.println("Error semantico. La variable del switch debe ser char o int");
                        //return;
                    }
                }

                if (!type.equals(caseValueType)) {
                    System.out.println("Error semantico. Los valores del case deben ser de tipo " + type);
                    //return;
                }
            }
        } else {
            System.out.println("Error semantico. La variable " + id + " no ha sido declarada.");
        }
    }

    public void evaluateComparison(TreeNode node) {
        String type1 = "";
        String type2 = "";

        if (node.getLefterSon().value.toString().equals("Call")) {
            if (this.evaluateCall(node.getLefterSon(), "void", true)) {
                type1 = this.actualType;
            }
        } else {
            type1 = this.getNodeType(node.getLefterSon());
        }

        if (node.getHijos().get(1).value.toString().equals("Call")) {
            if (this.evaluateCall(node.getHijos().get(1), "void", true)) {
                type2 = this.actualType;
            }
        } else {
            type2 = this.getNodeType(node.getHijos().get(1));
        }

        if (!type1.equals(type2)) {
            System.out.println("Error semantico. " + "Las comparaciones deben ser entre valores del mismo tipo");
        }
    }

    public void evaluateDeclaration(TreeNode node) {
        for (int i = 1; i < node.hijos.size(); i++) {
            if (!node.hijos.get(i).value.toString().equals("Assignment")) {
                if (!this.existInTable(this.node, node.hijos.get(i).value.toString())) {
                    this.getTableFromNode(this.node).list.add(new Row(node.hijos.get(i).value.toString(), this.type));
                } else {
                    System.out.println("Error semantico en linea " + node.line + ", columna " + node.column
                            + ". Variable " + node.hijos.get(i).value.toString() + " ya ha sido declarada.");
                }
            } else {
                evaluateAssignment(node.hijos.get(i), true);
            }
        }
    }

    public void evaluateAssignment(TreeNode node, boolean isDeclaration) {
        String id = node.getLefterSon().value.toString();
        TreeNode assignment = node.getHijos().get(1);
        String type = "";

        if (node.getParent().value.toString().equals("Declaration")) {
            if (isDeclaration) {
                if (!this.existInTable(this.node, id)) {
                    if (assignment.value.toString().equals("ArrayAssignment")) {
                        evaluateArrayDeclaration(assignment, id, isDeclaration);
                    } else if (assignment.value.toString().equals("Call")) {
                        if (this.evaluateCall(assignment, this.type, isDeclaration)) {
                            this.getTableFromNode(this.node).list.add(new Row(id, this.type));
                        } else {
                            System.out.println("Error semantico. " + " Variable " + id + " es de tipo " + this.type);
                        }
                    } else {
                        type = this.getNodeType(assignment);
                        if (this.type.equals(type)) {
                            this.getTableFromNode(this.node).list.add(new Row(id, this.type));
                        } else {
                            System.out.println("Error semantico. " + " Variable " + id + " es de tipo " + this.type);
                        }
                    }
                } else {
                    System.out.println("Error Semantico. " + "Variable: " + id
                            + " ya ha sido declarada");
                }
            }
        } else {
            if (this.existInTable(this.node, id)) {
                this.type = this.getTypeById(this.node, id);
                if (assignment.value.toString().equals("ArrayAssignment")) {
                    evaluateArrayDeclaration(assignment, id, isDeclaration);
                } else if (assignment.value.toString().equals("Call")) {
                    if (!this.evaluateCall(assignment, this.type, true)) {
                        System.out.println("Error semantico. " + " Variable " + id + " es de tipo " + this.type);
                    }
                } else {
                    type = this.getNodeType(assignment);
                    if (!this.type.equals(type)) {
                        System.out.println("Error semantico. " + " Variable " + id + " es de tipo " + this.type);
                    }
                }
            } else {
                System.out.println("Error Semantico. " + "Variable: " + id
                        + " no ha sido declarada");
            }
        }
    }

    public void evaluateArrayElementAssignment(TreeNode node) {
        String name = node.getLefterSon().value.toString();
        String type = "", varType = "";
        TreeNode assignment = node.getHijos().get(2);

        if (this.existInTable(this.node, name)) {
            type = this.getTypeById(this.node, name);
            type = this.getArrayType(type);

            this.isInteger = true;
            this.evaluateIntegers(null, node.getHijos().get(1));

            if (this.isInteger) {
                if (assignment.value.toString().equals("Call")) {
                    if (!this.evaluateCall(assignment, type, true)) {
                        System.out.println("Error semantico. La variable " + name + " es de tipo " + type);
                    }
                } else {
                    varType = this.getNodeType(assignment);
                    if (!type.equals(varType)) {
                        System.out.println("Error semantico. La variable " + name + " es de tipo " + type);
                    }
                }
            } else {
                System.out.println("Error semantico: " + "La posicion del arreglo debe ser un entero");
            }
        } else {
            System.out.println("Error semantico. " + "El arreglo " + name + " no existe.");
        }
    }

    public void evaluateArrayDeclaration(TreeNode node, String id, boolean isDeclaration) {
        String type = this.type;
        String size = "";

        if (node.getHijos().size() > 1) {
            this.type = node.getLefterSon().value.toString();
            if (type.contains(this.type)) {
                node = node.getHijos().get(1);
                this.isInteger = true;
                this.evaluateIntegers(null, node);
                if (isInteger) {
                    while (node.isParent()) {
                        node = node.getLefterSon();
                    }
                    size = node.value.toString();
                    this.type = this.getArrayType(this.type, size);
                    if (isDeclaration) {
                        this.getTableFromNode(this.node).list.add(new Row(id, this.type));
                    } else {
                        this.getRowById(this.node, id).setType(this.type);
                    }
                } else {
                    System.out.println("Error semantico. " + "El size del array debe ser un int");
                }
            } else {
                System.out.println("Error Semantico. " + " La variable " + id + " es de tipo " + type);
            }
        } else {
            node = node.getLefterSon();
            this.type = this.getArrayType(this.type);
            if (!this.sameTypeElements(node, id)) {
                System.out.println("Error Semantico. Todos los elementos de " + id + " deben ser de tipo " + this.type);
            } else {
                size = node.getHijos().size() + "";
                this.type = node.getHijos().get(0).value.toString();
                this.type = this.getArrayType(this.type, size);
                if (isDeclaration) {
                    this.getTableFromNode(this.node).list.add(new Row(id, this.type));
                } else {
                    this.getRowById(this.node, id).setType(this.type);
                }
            }
        }
    }

    public void evaluateIntegers(TreeNode parent, TreeNode node) {
        if (node.value.toString().equals("*") && node.value.toString().equals("+")
                && node.value.toString().equals("/") && node.value.toString().equals("-")) {
            this.hasSymbol = true;
        }

        if (!node.value.toString().equals("int") && !node.value.toString().equals("int2")
                && !node.value.toString().equals("Parenthesis") && !node.value.toString().equals("*") && !node.value.toString().equals("+")
                && !node.value.toString().equals("/") && !node.value.toString().equals("-")) {
            if (!Character.isDigit(node.value.toString().charAt(0))) {
                if (this.existInTable(this.node, node.value.toString())) {
                    if (!this.getTypeById(this.node, node.value.toString()).equals("int")) {
                        this.isInteger = false;
                    }
                } else {
                    this.isInteger = false;
                    System.out.println("Error semantico. " + " Variable " + node.value.toString()
                            + " no ha sido declarada");
                }
            }
        }

        if (node.isParent()) {
            evaluateIntegers(node, node.getLefterSon());
        }

        if (node.hasRightBrother() && parent != null) {
            evaluateIntegers(parent, node.getRightBrother());
        }
    }

    public String getArrayType(String type) {
        String word = "";
        boolean copy = false;

        if (!type.contains("[]")) {
            for (int i = 0; i < type.length(); i++) {
                if (type.charAt(i) == ')') {
                    copy = false;
                }
                if (copy) {
                    word += type.charAt(i);
                }
                if (type.charAt(i) == ',') {
                    copy = true;
                }
            }
        }
        if (type.contains("[]")) {
            return type;
        }
        return word;
    }

    public boolean sameTypeElements(TreeNode node, String id) {
        String type = "";
        for (int i = 0; i < node.getHijos().size(); i++) {
            type = node.getHijos().get(i).value.toString();
            if (type.equals("Call")) {
                if (!this.evaluateCall(node.getHijos().get(i), this.type, true)) {
                    return false;
                }
            } else {
                type = this.getNodeType(node.getHijos().get(i));
                if (!this.type.contains(type)) {
                    return false;
                }
            }

        }
        return true;
    }

    public boolean evaluateCall(TreeNode node, String type, boolean verifyType) {
        String name = node.getLefterSon().value.toString();
        String params = "";
        ArrayList<Row> functions = new ArrayList();
        functions = ((SymbolTable) getLeftestSon(this.symbolTables.root).value).list;
        ArrayList<Row> functionsWithSameParameters = new ArrayList();
        boolean exist = existFunction(functions, name);

        if (exist) {
            functions = this.getItemsById(functions, name);
            params = this.getFunctionParams(node);
            functionsWithSameParameters = getFunctionsWithSameParameters(functions, params);

            if (verifyType) {
                if (this.verifyCallType(type, functionsWithSameParameters)) {
                    return true;
                }
            }
        }

        if (!exist) {
            System.out.println("Error semantico en linea " + node.line + ", columna " + node.column
                    + ". La funcion " + name + " no esta declarada");
        } else {
            if (functionsWithSameParameters.size() == 0) {
                System.out.println("Error semantico en linea " + node.line + ", columna " + node.column
                        + ". La funcion " + name + " no recibe esos parametros");
            }
        }

        return false;
    }

    public String getFunctionParams(TreeNode node) {
        String word = "", word2 = "";
        int size = ((TreeNode) node.getHijos().get(1)).getHijos().size();

        if (size > 0) {
            for (int i = 0; i < size; i++) {
                word2 = ((TreeNode) node.getHijos().get(1)).getHijos().get(i).value.toString();

                if (word2.equals("Call")) {
                    if (this.evaluateCall(((TreeNode) node.getHijos().get(1)).getHijos().get(i), "void", true)) {
                        word += this.actualType;
                    } else {
                        word = "intF";
                    }
                } else {
                    word += this.getNodeType(((TreeNode) node.getHijos().get(1)).getHijos().get(i));
                }

                if (i < size - 1) {
                    word += " x ";
                }
            }
        } else {
            word += "void";
        }
        return word;
    }

    public String getNodeType(TreeNode node) {
        String word = "intF";
        String id = "";

        if (node.value.toString().equals("int")) {
            this.isInteger = true;
            this.hasSymbol = false;
            this.evaluateIntegers(null, node);

            if (!hasSymbol) {
                id = this.getLeftestSon(node).value.toString();
                if (Character.isDigit(id.charAt(0))) {
                    word = "int";
                } else {
                    if (this.existInTable(this.node, id)) {
                        word = this.getTypeById(this.node, id);
                        if (word.equals("string")) {
                            if (id.length() == 1) {
                                word = "char";
                            }
                        }
                    } else {
                        System.out.println("Error semantico. Variable " + id + " no ha sido declarada");
                    }
                }

            } else {
                if (isInteger) {
                    word = "int";
                }
            }
        } else {
            id = this.getLeftestSon(node).value.toString();
            word = node.value.toString();
            if (word.equals("string")) {
                if (id.length() == 1) {
                    word = "char";
                }
            }
        }
        return word;
    }

    public boolean verifyCallType(String type, ArrayList<Row> functions) {

        for (int i = 0; i < functions.size(); i++) {
            if (type.contains(this.getFunctionReturnType(functions.get(i).type))) {
                return true;
            }
        }

        if (type.equals("void")) {
            return true;
        }
        return false;
    }

    public String getFunctionReturnType(String type) {
        String returnType = "";
        boolean begin = false;

        for (int i = 0; i < type.length(); i++) {
            if (begin) {
                returnType += type.charAt(i);
            }

            if (type.charAt(i) == '>') {
                begin = true;
            }
        }
        this.actualType = returnType;
        return returnType;
    }

    public boolean existFunction(ArrayList<Row> list, String id) {
        for (int i = 0; i < list.size(); i++) {
            if (id.equals(list.get(i).id)) {
                return true;
            }
        }
        return false;
    }

    public ArrayList<Row> getFunctionsWithSameParameters(ArrayList<Row> functions, String params) {
        ArrayList<Row> list = new ArrayList();
        String word = "";
        int index = 0;

        for (int i = 0; i < functions.size(); i++) {
            while (functions.get(i).type.charAt(index) != '-') {
                word += functions.get(i).type.charAt(index);
                index++;
            }
            if (word.equals(params)) {
                list.add(functions.get(i));
            }
            word = "";
            index = 0;
        }
        return list;
    }

    public boolean existInTable(TreeNode node, String value) {
        while (node.getParent() != null) {
            for (int i = 0; i < this.getTableFromNode(node).list.size(); i++) {
                if (value.equals(this.getTableFromNode(node).list.get(i).id)) {
                    return true;
                }
            }
            node = node.parent;
        }
        return false;
    }

    public Row getRowById(TreeNode node, String value) {
        while (node.getParent() != null) {
            for (int i = 0; i < this.getTableFromNode(node).list.size(); i++) {
                if (value.equals(this.getTableFromNode(node).list.get(i).id)) {
                    return this.getTableFromNode(node).list.get(i);
                }
            }
            node = node.parent;
        }
        return new Row("null", "null");
    }

    public String getTypeById(TreeNode node, String value) {
        while (node.getParent() != null) {
            for (int i = 0; i < this.getTableFromNode(node).list.size(); i++) {
                if (value.equals(this.getTableFromNode(node).list.get(i).id)) {
                    return this.getTableFromNode(node).list.get(i).getType();
                }
            }
            node = node.parent;
        }
        return "null";
    }

    public TreeNode getLeftestSon(TreeNode node) {
        while (node.isParent()) {
            node = node.getLefterSon();
        }
        return node;
    }

    public ArrayList<Row> getItemsById(ArrayList<Row> list, String id) {
        ArrayList<Row> items = new ArrayList();

        for (int i = 0; i < list.size(); i++) {
            if (list.get(i).id.equals(id)) {
                items.add(list.get(i));
            }
        }
        return items;
    }

    public String getArrayType(String type, String size) {
        String arrayType = "";
        arrayType = "Array(0..." + (Integer.parseInt(size) - 1) + "," + type + ")";
        return arrayType;
    }

    public void showTree(TreeNode parent, TreeNode node, DefaultTreeModel model, DefaultMutableTreeNode treeNode) {
        if (parent == null) {
            model = new DefaultTreeModel(new DefaultMutableTreeNode(node.getValue()));
            if (node.hijos.size() > 0) {
                showTree(node, node.getLefterSon(), model, (DefaultMutableTreeNode) model.getRoot());
            }
        } else {
            DefaultMutableTreeNode hijo = new DefaultMutableTreeNode(node.getValue());
            treeNode.add(hijo);
            if (node.hasRightBrother()) {
                showTree(parent, node.getRightBrother(), model, treeNode);
            }

            if (node.hijos.size() > 0) {
                showTree(node, node.getLefterSon(), model, hijo);
            }
        }
        this.jTree1.setModel(model);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Tree.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Tree.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Tree.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Tree.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Tree().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ShowTables;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    public javax.swing.JTree jTree1;
    // End of variables declaration//GEN-END:variables
    MyTree result = new MyTree();
    MyTree symbolTables = new MyTree(new TreeNode("Symbol Tables", null));
    String type = "";
    SymbolTable table = new SymbolTable("");
    TreeNode node = new TreeNode(table, null);
    boolean isInteger = true, hasSymbol = false;
    String actualType = "";
    String parentType = "", parent = "";
}
