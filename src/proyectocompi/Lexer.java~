/* The following code was generated by JFlex 1.6.1 */

package proyectocompi;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/proyectocompi/lexer.flex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int STRING = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\32\1\33\1\55\1\55\1\55\22\0\1\32\1\52\2\0"+
    "\1\22\1\21\1\0\1\31\1\41\1\42\1\47\1\47\1\43\1\47"+
    "\1\2\1\47\12\53\1\1\1\34\1\51\1\50\1\51\2\0\1\3"+
    "\2\54\1\5\11\54\1\4\1\6\2\54\1\7\10\54\1\35\1\0"+
    "\1\36\3\0\1\15\1\45\1\20\1\25\1\13\1\14\1\46\1\30"+
    "\1\24\2\54\1\16\1\44\1\26\1\27\2\54\1\11\1\17\1\10"+
    "\1\12\1\54\1\23\3\54\1\37\1\0\1\40\7\0\1\55\44\0"+
    "\1\54\12\0\1\54\4\0\1\54\5\0\27\54\1\0\37\54\1\0"+
    "\u01ca\54\4\0\14\54\16\0\5\54\7\0\1\54\1\0\1\54\201\0"+
    "\5\54\1\0\2\54\2\0\4\54\1\0\1\54\6\0\1\54\1\0"+
    "\3\54\1\0\1\54\1\0\24\54\1\0\123\54\1\0\213\54\10\0"+
    "\246\54\1\0\46\54\2\0\1\54\7\0\47\54\110\0\33\54\5\0"+
    "\3\54\55\0\53\54\25\0\12\53\4\0\2\54\1\0\143\54\1\0"+
    "\1\54\17\0\2\54\7\0\2\54\12\53\3\54\2\0\1\54\20\0"+
    "\1\54\1\0\36\54\35\0\131\54\13\0\1\54\16\0\12\53\41\54"+
    "\11\0\2\54\4\0\1\54\5\0\26\54\4\0\1\54\11\0\1\54"+
    "\3\0\1\54\27\0\31\54\107\0\23\54\121\0\66\54\3\0\1\54"+
    "\22\0\1\54\7\0\12\54\4\0\12\53\1\0\20\54\4\0\10\54"+
    "\2\0\2\54\2\0\26\54\1\0\7\54\1\0\1\54\3\0\4\54"+
    "\3\0\1\54\20\0\1\54\15\0\2\54\1\0\3\54\4\0\12\53"+
    "\2\54\23\0\6\54\4\0\2\54\2\0\26\54\1\0\7\54\1\0"+
    "\2\54\1\0\2\54\1\0\2\54\37\0\4\54\1\0\1\54\7\0"+
    "\12\53\2\0\3\54\20\0\11\54\1\0\3\54\1\0\26\54\1\0"+
    "\7\54\1\0\2\54\1\0\5\54\3\0\1\54\22\0\1\54\17\0"+
    "\2\54\4\0\12\53\25\0\10\54\2\0\2\54\2\0\26\54\1\0"+
    "\7\54\1\0\2\54\1\0\5\54\3\0\1\54\36\0\2\54\1\0"+
    "\3\54\4\0\12\53\1\0\1\54\21\0\1\54\1\0\6\54\3\0"+
    "\3\54\1\0\4\54\3\0\2\54\1\0\1\54\1\0\2\54\3\0"+
    "\2\54\3\0\3\54\3\0\14\54\26\0\1\54\25\0\12\53\25\0"+
    "\10\54\1\0\3\54\1\0\27\54\1\0\20\54\3\0\1\54\32\0"+
    "\2\54\6\0\2\54\4\0\12\53\25\0\10\54\1\0\3\54\1\0"+
    "\27\54\1\0\12\54\1\0\5\54\3\0\1\54\40\0\1\54\1\0"+
    "\2\54\4\0\12\53\1\0\2\54\22\0\10\54\1\0\3\54\1\0"+
    "\51\54\2\0\1\54\20\0\1\54\21\0\2\54\4\0\12\53\12\0"+
    "\6\54\5\0\22\54\3\0\30\54\1\0\11\54\1\0\1\54\2\0"+
    "\7\54\37\0\12\53\21\0\60\54\1\0\2\54\14\0\7\54\11\0"+
    "\12\53\47\0\2\54\1\0\1\54\2\0\2\54\1\0\1\54\2\0"+
    "\1\54\6\0\4\54\1\0\7\54\1\0\3\54\1\0\1\54\1\0"+
    "\1\54\2\0\2\54\1\0\4\54\1\0\2\54\11\0\1\54\2\0"+
    "\5\54\1\0\1\54\11\0\12\53\2\0\4\54\40\0\1\54\37\0"+
    "\12\53\26\0\10\54\1\0\44\54\33\0\5\54\163\0\53\54\24\0"+
    "\1\54\12\53\6\0\6\54\4\0\4\54\3\0\1\54\3\0\2\54"+
    "\7\0\3\54\4\0\15\54\14\0\1\54\1\0\12\53\6\0\46\54"+
    "\1\0\1\54\5\0\1\54\2\0\53\54\1\0\u014d\54\1\0\4\54"+
    "\2\0\7\54\1\0\1\54\1\0\4\54\2\0\51\54\1\0\4\54"+
    "\2\0\41\54\1\0\4\54\2\0\7\54\1\0\1\54\1\0\4\54"+
    "\2\0\17\54\1\0\71\54\1\0\4\54\2\0\103\54\45\0\20\54"+
    "\20\0\125\54\14\0\u026c\54\2\0\21\54\1\0\32\54\5\0\113\54"+
    "\6\0\10\54\7\0\15\54\1\0\4\54\16\0\22\54\16\0\22\54"+
    "\16\0\15\54\1\0\3\54\17\0\64\54\43\0\1\54\4\0\1\54"+
    "\3\0\12\53\46\0\12\53\6\0\130\54\10\0\51\54\1\0\1\54"+
    "\5\0\106\54\12\0\37\54\47\0\12\53\36\54\2\0\5\54\13\0"+
    "\54\54\25\0\7\54\10\0\12\53\46\0\27\54\11\0\65\54\53\0"+
    "\12\53\6\0\12\53\15\0\1\54\135\0\57\54\21\0\7\54\4\0"+
    "\12\53\51\0\36\54\15\0\2\54\12\53\54\54\32\0\44\54\34\0"+
    "\12\53\3\0\3\54\12\53\44\54\153\0\4\54\1\0\4\54\3\0"+
    "\2\54\11\0\300\54\100\0\u0116\54\2\0\6\54\2\0\46\54\2\0"+
    "\6\54\2\0\10\54\1\0\1\54\1\0\1\54\1\0\1\54\1\0"+
    "\37\54\2\0\65\54\1\0\7\54\1\0\1\54\3\0\3\54\1\0"+
    "\7\54\3\0\4\54\2\0\6\54\4\0\15\54\5\0\3\54\1\0"+
    "\7\54\53\0\1\55\1\55\107\0\1\54\15\0\1\54\20\0\15\54"+
    "\145\0\1\54\4\0\1\54\2\0\12\54\1\0\1\54\3\0\5\54"+
    "\6\0\1\54\1\0\1\54\1\0\1\54\1\0\4\54\1\0\13\54"+
    "\2\0\4\54\5\0\5\54\4\0\1\54\64\0\2\54\u0a7b\0\57\54"+
    "\1\0\57\54\1\0\205\54\6\0\4\54\3\0\2\54\14\0\46\54"+
    "\1\0\1\54\5\0\1\54\2\0\70\54\7\0\1\54\20\0\27\54"+
    "\11\0\7\54\1\0\7\54\1\0\7\54\1\0\7\54\1\0\7\54"+
    "\1\0\7\54\1\0\7\54\1\0\7\54\120\0\1\54\u01d5\0\2\54"+
    "\52\0\5\54\5\0\2\54\4\0\126\54\6\0\3\54\1\0\132\54"+
    "\1\0\4\54\5\0\51\54\3\0\136\54\21\0\33\54\65\0\20\54"+
    "\u0200\0\u19b6\54\112\0\u51cd\54\63\0\u048d\54\103\0\56\54\2\0\u010d\54"+
    "\3\0\20\54\12\53\2\54\24\0\57\54\20\0\37\54\2\0\106\54"+
    "\61\0\11\54\2\0\147\54\2\0\4\54\1\0\36\54\2\0\2\54"+
    "\105\0\13\54\1\0\3\54\1\0\4\54\1\0\27\54\35\0\64\54"+
    "\16\0\62\54\34\0\12\53\30\0\6\54\3\0\1\54\4\0\12\53"+
    "\34\54\12\0\27\54\31\0\35\54\7\0\57\54\34\0\1\54\12\53"+
    "\6\0\5\54\1\0\12\54\12\53\5\54\1\0\51\54\27\0\3\54"+
    "\1\0\10\54\4\0\12\53\6\0\27\54\3\0\1\54\3\0\62\54"+
    "\1\0\1\54\3\0\2\54\2\0\5\54\2\0\1\54\1\0\1\54"+
    "\30\0\3\54\2\0\13\54\7\0\3\54\14\0\6\54\2\0\6\54"+
    "\2\0\6\54\11\0\7\54\1\0\7\54\1\0\53\54\1\0\4\54"+
    "\4\0\2\54\132\0\43\54\15\0\12\53\6\0\u2ba4\54\14\0\27\54"+
    "\4\0\61\54\u2104\0\u016e\54\2\0\152\54\46\0\7\54\14\0\5\54"+
    "\5\0\1\54\1\0\12\54\1\0\15\54\1\0\5\54\1\0\1\54"+
    "\1\0\2\54\1\0\2\54\1\0\154\54\41\0\u016b\54\22\0\100\54"+
    "\2\0\66\54\50\0\14\54\164\0\5\54\1\0\207\54\23\0\12\53"+
    "\7\0\32\54\6\0\32\54\13\0\131\54\3\0\6\54\2\0\6\54"+
    "\2\0\6\54\2\0\3\54\43\0\14\54\1\0\32\54\1\0\23\54"+
    "\1\0\2\54\1\0\17\54\2\0\16\54\42\0\173\54\u0185\0\35\54"+
    "\3\0\61\54\57\0\40\54\20\0\21\54\1\0\10\54\6\0\46\54"+
    "\12\0\36\54\2\0\44\54\4\0\10\54\60\0\236\54\2\0\12\53"+
    "\126\0\50\54\10\0\64\54\234\0\u0137\54\11\0\26\54\12\0\10\54"+
    "\230\0\6\54\2\0\1\54\1\0\54\54\1\0\2\54\3\0\1\54"+
    "\2\0\27\54\12\0\27\54\11\0\37\54\141\0\26\54\12\0\32\54"+
    "\106\0\70\54\6\0\2\54\100\0\1\54\17\0\4\54\1\0\3\54"+
    "\1\0\33\54\54\0\35\54\3\0\35\54\43\0\10\54\1\0\34\54"+
    "\33\0\66\54\12\0\26\54\12\0\23\54\15\0\22\54\156\0\111\54"+
    "\u03ba\0\65\54\56\0\12\53\23\0\55\54\40\0\31\54\7\0\12\53"+
    "\11\0\44\54\17\0\12\53\20\0\43\54\3\0\1\54\14\0\60\54"+
    "\16\0\4\54\13\0\12\53\1\54\45\0\22\54\1\0\31\54\204\0"+
    "\57\54\21\0\12\53\13\0\10\54\2\0\2\54\2\0\26\54\1\0"+
    "\7\54\1\0\2\54\1\0\5\54\3\0\1\54\37\0\5\54\u011e\0"+
    "\60\54\24\0\2\54\1\0\1\54\10\0\12\53\246\0\57\54\121\0"+
    "\60\54\24\0\1\54\13\0\12\53\46\0\53\54\25\0\12\53\u01d6\0"+
    "\100\54\12\53\25\0\1\54\u01c0\0\71\54\u0507\0\u0399\54\u0c67\0\u042f\54"+
    "\u33d1\0\u0239\54\7\0\37\54\1\0\12\53\146\0\36\54\22\0\60\54"+
    "\20\0\4\54\14\0\12\53\11\0\25\54\5\0\23\54\u0370\0\105\54"+
    "\13\0\1\54\102\0\15\54\u4060\0\2\54\u0bfe\0\153\54\5\0\15\54"+
    "\3\0\11\54\7\0\12\54\u1766\0\125\54\1\0\107\54\1\0\2\54"+
    "\2\0\1\54\2\0\2\54\2\0\4\54\1\0\14\54\1\0\1\54"+
    "\1\0\7\54\1\0\101\54\1\0\4\54\2\0\10\54\1\0\7\54"+
    "\1\0\34\54\1\0\4\54\1\0\5\54\1\0\1\54\3\0\7\54"+
    "\1\0\u0154\54\2\0\31\54\1\0\31\54\1\0\37\54\1\0\31\54"+
    "\1\0\37\54\1\0\31\54\1\0\37\54\1\0\31\54\1\0\37\54"+
    "\1\0\31\54\1\0\10\54\2\0\62\53\u1000\0\305\54\u053b\0\4\54"+
    "\1\0\33\54\1\0\2\54\1\0\1\54\2\0\1\54\1\0\12\54"+
    "\1\0\4\54\1\0\1\54\1\0\1\54\6\0\1\54\4\0\1\54"+
    "\1\0\1\54\1\0\1\54\1\0\3\54\1\0\2\54\1\0\1\54"+
    "\2\0\1\54\1\0\1\54\1\0\1\54\1\0\1\54\1\0\1\54"+
    "\1\0\2\54\1\0\1\54\2\0\4\54\1\0\7\54\1\0\4\54"+
    "\1\0\4\54\1\0\1\54\1\0\12\54\1\0\21\54\5\0\3\54"+
    "\1\0\5\54\1\0\21\54\u1144\0\ua6d7\54\51\0\u1035\54\13\0\336\54"+
    "\u3fe2\0\u021e\54\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05f0\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\2\0\1\2\1\3\1\2\11\4\1\5\1\6"+
    "\3\4\1\7\1\1\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\2\4\1\20\1\2\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\0"+
    "\1\4\1\32\15\4\1\33\4\4\1\21\1\34\1\35"+
    "\7\4\1\36\7\4\1\37\3\4\1\40\1\4\1\41"+
    "\1\42\4\4\1\43\1\44\2\4\1\0\1\4\1\45"+
    "\7\4\1\46\1\47\1\50\2\4\1\51\1\52\2\4"+
    "\1\53\2\4\1\54\1\4\1\55\1\56";

  private static int [] zzUnpackAction() {
    int [] result = new int[124];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\346\0\u0114\0\u0142"+
    "\0\u0170\0\u019e\0\u01cc\0\u01fa\0\u0228\0\u0256\0\u0284\0\212"+
    "\0\212\0\u02b2\0\u02e0\0\u030e\0\212\0\u033c\0\212\0\212"+
    "\0\212\0\212\0\212\0\212\0\212\0\212\0\u036a\0\u0398"+
    "\0\270\0\u03c6\0\u03c6\0\u03f4\0\212\0\212\0\212\0\212"+
    "\0\212\0\212\0\212\0\u0422\0\u0450\0\u0142\0\u047e\0\u04ac"+
    "\0\u04da\0\u0508\0\u0536\0\u0564\0\u0592\0\u05c0\0\u05ee\0\u061c"+
    "\0\u064a\0\u0678\0\u06a6\0\u0142\0\u06d4\0\u0702\0\u0730\0\u075e"+
    "\0\212\0\212\0\u0142\0\u078c\0\u07ba\0\u07e8\0\u0816\0\u0844"+
    "\0\u0872\0\u08a0\0\u0142\0\u08ce\0\u08fc\0\u092a\0\u0958\0\u0986"+
    "\0\u09b4\0\u09e2\0\u0a10\0\u0a3e\0\u0a6c\0\u0a9a\0\u0142\0\u0ac8"+
    "\0\u0142\0\u0af6\0\u0b24\0\u0b52\0\u0b80\0\u0bae\0\u0142\0\u0142"+
    "\0\u0bdc\0\u0c0a\0\u0c38\0\u0c66\0\u0142\0\u0c94\0\u0cc2\0\u0cf0"+
    "\0\u0d1e\0\u0d4c\0\u0d7a\0\u0da8\0\u0142\0\u0142\0\212\0\u0dd6"+
    "\0\u0e04\0\u0142\0\u0142\0\u0e32\0\u0e60\0\u0142\0\u0e8e\0\u0ebc"+
    "\0\u0142\0\u0eea\0\u0142\0\u0142";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[124];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\2\10\1\11\1\10\1\12"+
    "\1\13\1\10\1\14\1\15\2\10\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\3\10\1\25\2\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\10\1\41\1\42\1\43\1\42\1\44\1\10"+
    "\1\45\21\46\1\47\1\50\10\46\1\45\21\46\1\45"+
    "\31\51\1\52\1\51\1\45\21\51\1\45\126\0\1\53"+
    "\7\0\1\54\56\0\1\10\1\55\14\10\2\0\6\10"+
    "\13\0\3\10\4\0\2\10\4\0\16\10\2\0\6\10"+
    "\13\0\3\10\4\0\2\10\4\0\4\10\1\56\11\10"+
    "\2\0\6\10\13\0\3\10\4\0\2\10\4\0\6\10"+
    "\1\57\7\10\2\0\6\10\13\0\3\10\4\0\2\10"+
    "\4\0\10\10\1\60\5\10\2\0\6\10\13\0\3\10"+
    "\4\0\2\10\4\0\13\10\1\61\2\10\2\0\3\10"+
    "\1\62\2\10\13\0\3\10\4\0\2\10\4\0\7\10"+
    "\1\63\2\10\1\64\3\10\2\0\4\10\1\65\1\10"+
    "\13\0\3\10\4\0\2\10\4\0\5\10\1\66\10\10"+
    "\2\0\1\67\5\10\13\0\3\10\4\0\2\10\4\0"+
    "\12\10\1\70\3\10\2\0\5\10\1\71\13\0\3\10"+
    "\4\0\2\10\4\0\6\10\1\72\7\10\2\0\5\10"+
    "\1\73\13\0\3\10\4\0\2\10\4\0\11\10\1\74"+
    "\4\10\2\0\3\10\1\75\2\10\13\0\3\10\4\0"+
    "\2\10\4\0\10\10\1\76\5\10\2\0\6\10\13\0"+
    "\3\10\4\0\2\10\33\0\2\26\25\0\12\10\1\77"+
    "\3\10\2\0\6\10\13\0\3\10\4\0\2\10\4\0"+
    "\16\10\2\0\4\10\1\100\1\10\13\0\3\10\4\0"+
    "\2\10\51\0\1\101\60\0\1\44\4\0\1\102\56\0"+
    "\2\10\1\103\13\10\2\0\6\10\13\0\3\10\4\0"+
    "\2\10\4\0\7\10\1\104\6\10\2\0\6\10\13\0"+
    "\3\10\4\0\2\10\4\0\5\10\1\105\4\10\1\106"+
    "\3\10\2\0\6\10\13\0\3\10\4\0\2\10\4\0"+
    "\14\10\1\107\1\10\2\0\6\10\13\0\3\10\4\0"+
    "\2\10\4\0\16\10\2\0\2\10\1\110\3\10\13\0"+
    "\3\10\4\0\2\10\4\0\16\10\2\0\3\10\1\111"+
    "\2\10\13\0\3\10\4\0\2\10\4\0\13\10\1\112"+
    "\2\10\2\0\6\10\13\0\3\10\4\0\2\10\4\0"+
    "\6\10\1\113\7\10\2\0\6\10\13\0\3\10\4\0"+
    "\2\10\4\0\6\10\1\114\7\10\2\0\6\10\13\0"+
    "\3\10\4\0\2\10\4\0\16\10\2\0\1\10\1\115"+
    "\4\10\13\0\3\10\4\0\2\10\4\0\13\10\1\116"+
    "\1\117\1\10\2\0\6\10\13\0\3\10\4\0\2\10"+
    "\4\0\12\10\1\120\3\10\2\0\6\10\13\0\3\10"+
    "\4\0\2\10\4\0\16\10\2\0\1\10\1\121\4\10"+
    "\13\0\3\10\4\0\2\10\4\0\16\10\2\0\1\10"+
    "\1\122\4\10\13\0\3\10\4\0\2\10\4\0\5\10"+
    "\1\123\10\10\2\0\6\10\13\0\3\10\4\0\2\10"+
    "\4\0\11\10\1\124\4\10\2\0\6\10\13\0\3\10"+
    "\4\0\2\10\4\0\16\10\2\0\1\10\1\125\4\10"+
    "\13\0\3\10\4\0\2\10\4\0\16\10\2\0\4\10"+
    "\1\126\1\10\13\0\3\10\4\0\2\10\4\0\10\10"+
    "\1\127\5\10\2\0\6\10\13\0\3\10\4\0\2\10"+
    "\4\0\7\10\1\130\6\10\2\0\6\10\13\0\3\10"+
    "\4\0\2\10\4\0\16\10\2\0\2\10\1\131\3\10"+
    "\13\0\3\10\4\0\2\10\4\0\10\10\1\132\5\10"+
    "\2\0\6\10\13\0\3\10\4\0\2\10\4\0\15\10"+
    "\1\133\2\0\6\10\13\0\3\10\4\0\2\10\4\0"+
    "\15\10\1\134\2\0\6\10\13\0\3\10\4\0\2\10"+
    "\4\0\14\10\1\104\1\10\2\0\6\10\13\0\3\10"+
    "\4\0\2\10\4\0\16\10\2\0\1\10\1\135\4\10"+
    "\13\0\3\10\4\0\2\10\4\0\5\10\1\136\10\10"+
    "\2\0\6\10\13\0\3\10\4\0\2\10\4\0\13\10"+
    "\1\137\2\10\2\0\6\10\13\0\3\10\4\0\2\10"+
    "\4\0\10\10\1\140\5\10\2\0\6\10\13\0\3\10"+
    "\4\0\2\10\4\0\6\10\1\123\7\10\2\0\6\10"+
    "\13\0\3\10\4\0\2\10\4\0\5\10\1\141\10\10"+
    "\2\0\6\10\13\0\3\10\4\0\2\10\4\0\13\10"+
    "\1\142\2\10\2\0\6\10\13\0\3\10\4\0\2\10"+
    "\4\0\16\10\2\0\6\10\4\0\1\143\6\0\3\10"+
    "\4\0\2\10\4\0\12\10\1\144\3\10\2\0\6\10"+
    "\13\0\3\10\4\0\2\10\4\0\16\10\2\0\3\10"+
    "\1\145\2\10\13\0\3\10\4\0\2\10\4\0\13\10"+
    "\1\146\2\10\2\0\6\10\13\0\3\10\4\0\2\10"+
    "\4\0\6\10\1\147\7\10\2\0\6\10\13\0\3\10"+
    "\4\0\2\10\4\0\16\10\2\0\1\10\1\150\4\10"+
    "\13\0\3\10\4\0\2\10\4\0\12\10\1\151\3\10"+
    "\2\0\6\10\13\0\3\10\4\0\2\10\4\0\5\10"+
    "\1\152\10\10\2\0\6\10\13\0\3\10\4\0\2\10"+
    "\4\0\16\10\2\0\3\10\1\153\2\10\13\0\3\10"+
    "\4\0\2\10\4\0\15\10\1\154\2\0\6\10\13\0"+
    "\3\10\4\0\2\10\4\0\10\10\1\155\5\10\2\0"+
    "\6\10\13\0\3\10\4\0\2\10\4\0\10\10\1\156"+
    "\5\10\2\0\6\10\13\0\3\10\4\0\2\10\37\0"+
    "\1\157\22\0\7\10\1\160\6\10\2\0\6\10\13\0"+
    "\3\10\4\0\2\10\4\0\10\10\1\161\5\10\2\0"+
    "\6\10\13\0\3\10\4\0\2\10\4\0\16\10\2\0"+
    "\3\10\1\162\2\10\13\0\3\10\4\0\2\10\4\0"+
    "\11\10\1\163\4\10\2\0\6\10\13\0\3\10\4\0"+
    "\2\10\4\0\14\10\1\164\1\10\2\0\6\10\13\0"+
    "\3\10\4\0\2\10\4\0\16\10\2\0\1\10\1\165"+
    "\4\10\13\0\3\10\4\0\2\10\4\0\16\10\2\0"+
    "\6\10\13\0\2\10\1\123\4\0\2\10\4\0\16\10"+
    "\2\0\5\10\1\166\13\0\3\10\4\0\2\10\4\0"+
    "\13\10\1\167\2\10\2\0\6\10\13\0\3\10\4\0"+
    "\2\10\4\0\12\10\1\170\3\10\2\0\6\10\13\0"+
    "\3\10\4\0\2\10\4\0\10\10\1\171\5\10\2\0"+
    "\6\10\13\0\3\10\4\0\2\10\4\0\16\10\2\0"+
    "\4\10\1\172\1\10\13\0\3\10\4\0\2\10\4\0"+
    "\5\10\1\173\10\10\2\0\6\10\13\0\3\10\4\0"+
    "\2\10\4\0\16\10\2\0\3\10\1\123\2\10\13\0"+
    "\3\10\4\0\2\10\4\0\16\10\2\0\3\10\1\174"+
    "\2\10\13\0\3\10\4\0\2\10\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3864];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\2\0\1\11\13\1\2\11\3\1\1\11\1\1"+
    "\10\11\6\1\7\11\1\0\24\1\2\11\40\1\1\0"+
    "\13\1\1\11\15\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[124];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	String comment = "";
	String string = "";
        
        public Symbol token(int type){
            return new Symbol(type,yyline,yycolumn);
        }

        public Symbol token(int type,Object value){
            return new Symbol(type,yyline,yycolumn,value);
        }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2474) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            }
          case 47: break;
          case 2: 
            { System.out.println("Error en la linea: " + (yyline + 1) + " columna " + (yycolumn+1) + " Character Not Found: " + yytext());
            }
          case 48: break;
          case 3: 
            { return token(sym.TwoPoints, new String(yytext()));
            }
          case 49: break;
          case 4: 
            { return token(sym.VariableName,new String(yytext()));
            }
          case 50: break;
          case 5: 
            { yybegin(COMMENT);
            }
          case 51: break;
          case 6: 
            { System.out.println("Salgo");
				return token(sym.endComment, new String("%$"));
            }
          case 52: break;
          case 7: 
            { System.out.println("Apostrophe "+ yytext());
					string = "";
					yybegin(STRING);
            }
          case 53: break;
          case 8: 
            { return token(sym.EOL, new String(yytext()));
            }
          case 54: break;
          case 9: 
            { return token(sym.LeftBracket, new String(yytext()));
            }
          case 55: break;
          case 10: 
            { return token(sym.RightBracket, new String(yytext()));
            }
          case 56: break;
          case 11: 
            { return token(sym.LeftKey, new String(yytext()));
            }
          case 57: break;
          case 12: 
            { return token(sym.RightKey, new String(yytext()));
            }
          case 58: break;
          case 13: 
            { return token(sym.leftParenthesis, new String(yytext()));
            }
          case 59: break;
          case 14: 
            { return token(sym.rightParenthesis, new String(yytext()));
            }
          case 60: break;
          case 15: 
            { return token(sym.Delimeter, new String(yytext()));
            }
          case 61: break;
          case 16: 
            { if("+".equals(yytext())){
								return token(sym.AddOP, new String(yytext()));
							}else if("-".equals(yytext())){
								return token(sym.SubOP, new String(yytext()));
							}else if("*".equals(yytext())){
								return token(sym.MultOP, new String(yytext()));
							}else if("/".equals(yytext())){
								return token(sym.DivOP, new String(yytext()));
							}
            }
          case 62: break;
          case 17: 
            { if("==".equals(yytext())){
										return token(sym.Equal, new String(yytext()));
									}else if("!=".equals(yytext())){
										return token(sym.NotEqual, new String(yytext()));
									}else if(">".equals(yytext())){
										return token(sym.GreaterThan, new String(yytext()));
									}else if("<".equals(yytext())){
										return token(sym.LessThan, new String(yytext()));
									}else if(">=".equals(yytext())){
										return token(sym.GreaterEqual, new String(yytext()));
									}else if("<=".equals(yytext())){
										return token(sym.LessEqual, new String(yytext()));
									}
            }
          case 63: break;
          case 18: 
            { return token(sym.Number, new String(yytext()));
            }
          case 64: break;
          case 19: 
            { System.out.print(yytext());
            }
          case 65: break;
          case 20: 
            { return token(sym.Comment, new String(yytext()));
            }
          case 66: break;
          case 21: 
            { yybegin(YYINITIAL);
            }
          case 67: break;
          case 22: 
            { System.out.println("Entro");
				return token(sym.beginComment, new String("%$"));
            }
          case 68: break;
          case 23: 
            { string+=yytext();
            }
          case 69: break;
          case 24: 
            { System.out.println("Apostrophe: " + yytext());
					yybegin(YYINITIAL);
                        return token(sym.STRING,string);
            }
          case 70: break;
          case 25: 
            { if(":=".equals(yytext())){
										return token(sym.Assign, new String(yytext()));
									}else if("+=".equals(yytext())){
										return token(sym.PlusEqual, new String(yytext()));
									}else if("-=".equals(yytext())){
										return token(sym.MinusEqual, new String(yytext()));
									}else if("*=".equals(yytext())){
										return token(sym.MultEqual, new String(yytext()));
									}else if("/=".equals(yytext())){
										return token(sym.DivEqual, new String(yytext()));
									}
            }
          case 71: break;
          case 26: 
            { return token(sym.Or, new String(yytext()));
            }
          case 72: break;
          case 27: 
            { return token(sym.If, new String(yytext()));
            }
          case 73: break;
          case 28: 
            { return token(sym.ThreePoints, new String(yytext()));
            }
          case 74: break;
          case 29: 
            { return token(sym.And, new String(yytext()));
            }
          case 75: break;
          case 30: 
            { return token(sym.For,new String(yytext()));
            }
          case 76: break;
          case 31: 
            { return token(sym.Type,new String(yytext()));
            }
          case 77: break;
          case 32: 
            { return token(sym.BooleanValue, new String(yytext()));
            }
          case 78: break;
          case 33: 
            { return token(sym.Read, new String(yytext()));
            }
          case 79: break;
          case 34: 
            { return token(sym.Else, new String(yytext()));
            }
          case 80: break;
          case 35: 
            { return token(sym.Call, new String(yytext()));
            }
          case 81: break;
          case 36: 
            { return token(sym.Case, new String(yytext()));
            }
          case 82: break;
          case 37: 
            { return token(sym.Main, new String(yytext()));
            }
          case 83: break;
          case 38: 
            { return token(sym.Write,new String(yytext()));
            }
          case 84: break;
          case 39: 
            { return token(sym.While,new String(yytext()));
            }
          case 85: break;
          case 40: 
            { return token(sym.ArrayType, new String(yytext()));
            }
          case 86: break;
          case 41: 
            { return token(sym.Return, new String(yytext()));
            }
          case 87: break;
          case 42: 
            { return token(sym.Elseif, new String(yytext()));
            }
          case 88: break;
          case 43: 
            { return token(sym.Switch, new String(yytext()));
            }
          case 89: break;
          case 44: 
            { return token(sym.Endcase, new String(yytext()));
            }
          case 90: break;
          case 45: 
            { return token(sym.Default, new String(yytext()));
            }
          case 91: break;
          case 46: 
            { return token(sym.Function, new String(yytext()));
            }
          case 92: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
