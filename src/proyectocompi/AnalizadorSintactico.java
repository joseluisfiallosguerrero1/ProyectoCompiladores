
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed May 02 14:10:49 CST 2018
//----------------------------------------------------

package proyectocompi;

import java.util.ArrayList;
import java_cup.runtime.*;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed May 02 14:10:49 CST 2018
  */
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\175\000\002\045\004\000\002\002\004\000\002\062" +
    "\007\000\002\063\007\000\002\044\006\000\002\064\002" +
    "\000\002\044\005\000\002\060\005\000\002\061\004\000" +
    "\002\061\002\000\002\043\004\000\002\043\004\000\002" +
    "\043\004\000\002\043\004\000\002\043\004\000\002\043" +
    "\005\000\002\043\004\000\002\043\004\000\002\043\004" +
    "\000\002\043\004\000\002\043\004\000\002\043\002\000" +
    "\002\065\002\000\002\051\006\000\002\066\002\000\002" +
    "\051\006\000\002\067\002\000\002\051\005\000\002\070" +
    "\002\000\002\051\005\000\002\037\005\000\002\042\005" +
    "\000\002\040\003\000\002\040\005\000\002\041\003\000" +
    "\002\041\002\000\002\031\007\000\002\071\002\000\002" +
    "\031\006\000\002\031\002\000\002\035\007\000\002\072" +
    "\002\000\002\035\005\000\002\035\006\000\002\036\006" +
    "\000\002\036\005\000\002\073\002\000\002\036\007\000" +
    "\002\032\004\000\002\032\006\000\002\033\003\000\002" +
    "\033\002\000\002\034\005\000\002\005\005\000\002\003" +
    "\005\000\002\003\007\000\002\003\003\000\002\003\005" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\054\003\000\002\054\003\000\002\052\006" +
    "\000\002\052\005\000\002\053\003\000\002\053\005\000" +
    "\002\004\006\000\002\004\011\000\002\023\007\000\002" +
    "\074\002\000\002\023\007\000\002\030\005\000\002\025" +
    "\005\000\002\026\005\000\002\026\004\000\002\024\005" +
    "\000\002\075\002\000\002\024\005\000\002\024\002\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\021\006\000\002\022\006\000\002\022\004\000\002\022" +
    "\002\000\002\007\004\000\002\011\005\000\002\011\005" +
    "\000\002\011\002\000\002\010\004\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\002\000\002" +
    "\013\003\000\002\013\003\000\002\013\005\000\002\017" +
    "\005\000\002\014\006\000\002\020\004\000\002\020\002" +
    "\000\002\015\003\000\002\015\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\046\005\000\002\055" +
    "\011\000\002\056\004\000\002\057\005\000\002\047\005" +
    "\000\002\050\005\000\002\050\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\357\000\006\003\004\054\006\001\002\000\006\003" +
    "\ufffc\051\ufffc\001\002\000\010\002\uffda\003\330\041\327" +
    "\001\002\000\004\046\011\001\002\000\004\002\010\001" +
    "\002\000\004\002\000\001\002\000\004\047\012\001\002" +
    "\000\006\003\013\051\015\001\002\000\034\003\uffd3\005" +
    "\uffd3\007\uffd3\032\uffd3\040\uffd3\042\uffd3\043\uffd3\055\uffd3" +
    "\056\uffd3\061\uffd3\062\uffd3\063\uffd3\064\uffd3\001\002\000" +
    "\010\002\ufffd\003\ufffd\041\ufffd\001\002\000\034\003\uffec" +
    "\005\uffec\007\uffec\032\uffec\040\uffec\042\uffec\043\uffec\055" +
    "\uffec\056\uffec\061\uffec\062\uffec\063\uffec\064\uffec\001\002" +
    "\000\034\003\041\005\036\007\033\032\037\040\043\042" +
    "\022\043\040\055\021\056\046\061\042\062\020\063\047" +
    "\064\034\001\002\000\040\003\ufff5\005\ufff5\007\ufff5\032" +
    "\ufff5\036\ufff5\040\ufff5\042\ufff5\043\ufff5\052\ufff5\055\ufff5" +
    "\056\ufff5\061\ufff5\062\ufff5\063\ufff5\064\ufff5\001\002\000" +
    "\004\046\316\001\002\000\004\046\301\001\002\000\006" +
    "\003\275\005\120\001\002\000\004\044\274\001\002\000" +
    "\040\003\uffed\005\uffed\007\uffed\032\uffed\036\uffed\040\uffed" +
    "\042\uffed\043\uffed\052\uffed\055\uffed\056\uffed\061\uffed\062" +
    "\uffed\063\uffed\064\uffed\001\002\000\040\003\ufff3\005\ufff3" +
    "\007\ufff3\032\ufff3\036\ufff3\040\ufff3\042\ufff3\043\ufff3\052" +
    "\ufff3\055\ufff3\056\ufff3\061\ufff3\062\ufff3\063\ufff3\064\ufff3" +
    "\001\002\000\004\052\273\001\002\000\040\003\ufff7\005" +
    "\ufff7\007\ufff7\032\ufff7\036\ufff7\040\ufff7\042\ufff7\043\ufff7" +
    "\052\ufff7\055\ufff7\056\ufff7\061\ufff7\062\ufff7\063\ufff7\064" +
    "\ufff7\001\002\000\040\003\ufff0\005\ufff0\007\ufff0\032\ufff0" +
    "\036\ufff0\040\ufff0\042\ufff0\043\ufff0\052\ufff0\055\ufff0\056" +
    "\ufff0\061\ufff0\062\ufff0\063\ufff0\064\ufff0\001\002\000\040" +
    "\003\ufff1\005\ufff1\007\ufff1\032\ufff1\036\ufff1\040\ufff1\042" +
    "\ufff1\043\ufff1\052\ufff1\055\ufff1\056\ufff1\061\ufff1\062\ufff1" +
    "\063\ufff1\064\ufff1\001\002\000\040\003\ufff4\005\ufff4\007" +
    "\ufff4\032\ufff4\036\ufff4\040\ufff4\042\ufff4\043\ufff4\052\ufff4" +
    "\055\ufff4\056\ufff4\061\ufff4\062\ufff4\063\ufff4\064\ufff4\001" +
    "\002\000\010\003\uffbd\005\uffbd\051\uffbd\001\002\000\006" +
    "\065\ufff8\066\ufff8\001\002\000\040\003\ufff6\005\ufff6\007" +
    "\ufff6\032\ufff6\036\ufff6\040\ufff6\042\ufff6\043\ufff6\052\ufff6" +
    "\055\ufff6\056\ufff6\061\ufff6\062\ufff6\063\ufff6\064\ufff6\001" +
    "\002\000\016\015\201\016\174\017\176\020\177\021\175" +
    "\057\257\001\002\000\004\046\056\001\002\000\022\004" +
    "\071\005\065\006\067\007\060\010\066\042\064\046\072" +
    "\057\070\001\002\000\014\002\uffd4\003\uffd4\041\uffd4\044" +
    "\uffe7\051\uffe5\001\002\000\010\003\uffbc\005\uffbc\051\uffbc" +
    "\001\002\000\006\003\212\046\214\001\002\000\006\003" +
    "\171\005\173\001\002\000\040\003\uffee\005\uffee\007\uffee" +
    "\032\uffee\036\uffee\040\uffee\042\uffee\043\uffee\052\uffee\055" +
    "\uffee\056\uffee\061\uffee\062\uffee\063\uffee\064\uffee\001\002" +
    "\000\004\046\056\001\002\000\004\046\051\001\002\000" +
    "\040\003\uffef\005\uffef\007\uffef\032\uffef\036\uffef\040\uffef" +
    "\042\uffef\043\uffef\052\uffef\055\uffef\056\uffef\061\uffef\062" +
    "\uffef\063\uffef\064\uffef\001\002\000\004\005\052\001\002" +
    "\000\004\047\053\001\002\000\004\044\054\001\002\000" +
    "\040\003\ufffe\005\ufffe\007\ufffe\032\ufffe\036\ufffe\040\ufffe" +
    "\042\ufffe\043\ufffe\052\ufffe\055\ufffe\056\ufffe\061\ufffe\062" +
    "\ufffe\063\ufffe\064\ufffe\001\002\000\004\051\160\001\002" +
    "\000\022\004\071\005\065\006\067\007\060\010\066\042" +
    "\064\046\072\057\070\001\002\000\016\024\143\025\147" +
    "\026\144\027\151\030\146\031\145\001\002\000\004\057" +
    "\140\001\002\000\032\022\uffc6\023\uffc6\024\uffc6\025\uffc6" +
    "\026\uffc6\027\uffc6\030\uffc6\031\uffc6\044\uffc6\045\uffc6\047" +
    "\uffc6\060\uffc6\001\002\000\040\013\133\014\132\022\uffa0" +
    "\023\uffa0\024\uffa0\025\uffa0\026\uffa0\027\uffa0\030\uffa0\031" +
    "\uffa0\044\uffa0\045\uffa0\047\uffa0\050\uffa0\060\uffa0\001\002" +
    "\000\032\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027" +
    "\uffc3\030\uffc3\031\uffc3\044\uffc3\045\uffc3\047\uffc3\060\uffc3" +
    "\001\002\000\004\005\120\001\002\000\046\011\uff9a\012" +
    "\uff9a\013\uff9a\014\uff9a\022\uff9a\023\uff9a\024\uff9a\025\uff9a" +
    "\026\uff9a\027\uff9a\030\uff9a\031\uff9a\044\uff9a\045\uff9a\047" +
    "\uff9a\050\uff9a\060\uff9a\067\uff9a\001\002\000\032\022\uffc4" +
    "\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031" +
    "\uffc4\044\uffc4\045\uffc4\047\uffc4\060\uffc4\001\002\000\032" +
    "\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030" +
    "\uffc5\031\uffc5\044\uffc5\045\uffc5\047\uffc5\060\uffc5\001\002" +
    "\000\022\004\071\005\065\006\067\007\060\010\066\042" +
    "\064\046\072\057\070\001\002\000\046\011\uff99\012\uff99" +
    "\013\uff99\014\uff99\022\uff99\023\uff99\024\uff99\025\uff99\026" +
    "\uff99\027\uff99\030\uff99\031\uff99\044\uff99\045\uff99\047\uff99" +
    "\050\uff99\060\uff99\067\uff99\001\002\000\010\004\071\005" +
    "\065\046\072\001\002\000\004\047\110\001\002\000\032" +
    "\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030" +
    "\uffc7\031\uffc7\044\uffc7\045\uffc7\047\uffc7\060\uffc7\001\002" +
    "\000\046\011\076\012\101\013\uff9b\014\uff9b\022\uff9b\023" +
    "\uff9b\024\uff9b\025\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b" +
    "\044\uff9b\045\uff9b\047\uff9b\050\uff9b\060\uff9b\067\077\001" +
    "\002\000\010\004\071\005\065\046\072\001\002\000\010" +
    "\004\071\005\065\046\072\001\002\000\040\013\uff9f\014" +
    "\uff9f\022\uff9f\023\uff9f\024\uff9f\025\uff9f\026\uff9f\027\uff9f" +
    "\030\uff9f\031\uff9f\044\uff9f\045\uff9f\047\uff9f\050\uff9f\060" +
    "\uff9f\001\002\000\010\004\071\005\065\046\072\001\002" +
    "\000\046\011\076\012\101\013\uff9b\014\uff9b\022\uff9b\023" +
    "\uff9b\024\uff9b\025\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b" +
    "\044\uff9b\045\uff9b\047\uff9b\050\uff9b\060\uff9b\067\077\001" +
    "\002\000\040\013\uff9d\014\uff9d\022\uff9d\023\uff9d\024\uff9d" +
    "\025\uff9d\026\uff9d\027\uff9d\030\uff9d\031\uff9d\044\uff9d\045" +
    "\uff9d\047\uff9d\050\uff9d\060\uff9d\001\002\000\046\011\076" +
    "\012\101\013\uff9b\014\uff9b\022\uff9b\023\uff9b\024\uff9b\025" +
    "\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b\044\uff9b\045\uff9b" +
    "\047\uff9b\050\uff9b\060\uff9b\067\077\001\002\000\040\013" +
    "\uff9c\014\uff9c\022\uff9c\023\uff9c\024\uff9c\025\uff9c\026\uff9c" +
    "\027\uff9c\030\uff9c\031\uff9c\044\uff9c\045\uff9c\047\uff9c\050" +
    "\uff9c\060\uff9c\001\002\000\046\011\076\012\101\013\uff9b" +
    "\014\uff9b\022\uff9b\023\uff9b\024\uff9b\025\uff9b\026\uff9b\027" +
    "\uff9b\030\uff9b\031\uff9b\044\uff9b\045\uff9b\047\uff9b\050\uff9b" +
    "\060\uff9b\067\077\001\002\000\040\013\uff9e\014\uff9e\022" +
    "\uff9e\023\uff9e\024\uff9e\025\uff9e\026\uff9e\027\uff9e\030\uff9e" +
    "\031\uff9e\044\uff9e\045\uff9e\047\uff9e\050\uff9e\060\uff9e\001" +
    "\002\000\004\051\uff97\001\002\000\004\047\112\001\002" +
    "\000\046\011\uff98\012\uff98\013\uff98\014\uff98\022\uff98\023" +
    "\uff98\024\uff98\025\uff98\026\uff98\027\uff98\030\uff98\031\uff98" +
    "\044\uff98\045\uff98\047\uff98\050\uff98\060\uff98\067\uff98\001" +
    "\002\000\006\045\uffb9\060\uffb9\001\002\000\006\045\116" +
    "\060\115\001\002\000\032\022\uffba\023\uffba\024\uffba\025" +
    "\uffba\026\uffba\027\uffba\030\uffba\031\uffba\044\uffba\045\uffba" +
    "\047\uffba\060\uffba\001\002\000\022\004\071\005\065\006" +
    "\067\007\060\010\066\042\064\046\072\057\070\001\002" +
    "\000\006\045\uffb8\060\uffb8\001\002\000\004\046\122\001" +
    "\002\000\032\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3" +
    "\027\uffe3\030\uffe3\031\uffe3\044\uffe3\045\uffe3\047\uffe3\060" +
    "\uffe3\001\002\000\024\004\071\005\065\006\067\007\060" +
    "\010\066\042\064\046\072\047\uffde\057\070\001\002\000" +
    "\006\045\uffe1\047\uffe1\001\002\000\006\045\127\047\uffdf" +
    "\001\002\000\004\047\126\001\002\000\032\022\uffe2\023" +
    "\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2" +
    "\044\uffe2\045\uffe2\047\uffe2\060\uffe2\001\002\000\022\004" +
    "\071\005\065\006\067\007\060\010\066\042\064\046\072" +
    "\057\070\001\002\000\006\045\uffe0\047\uffe0\001\002\000" +
    "\034\022\uffa3\023\uffa3\024\uffa3\025\uffa3\026\uffa3\027\uffa3" +
    "\030\uffa3\031\uffa3\044\uffa3\045\uffa3\047\uffa3\050\uffa3\060" +
    "\uffa3\001\002\000\010\004\071\005\065\046\072\001\002" +
    "\000\010\004\071\005\065\046\072\001\002\000\040\013" +
    "\133\014\132\022\uffa0\023\uffa0\024\uffa0\025\uffa0\026\uffa0" +
    "\027\uffa0\030\uffa0\031\uffa0\044\uffa0\045\uffa0\047\uffa0\050" +
    "\uffa0\060\uffa0\001\002\000\034\022\uffa2\023\uffa2\024\uffa2" +
    "\025\uffa2\026\uffa2\027\uffa2\030\uffa2\031\uffa2\044\uffa2\045" +
    "\uffa2\047\uffa2\050\uffa2\060\uffa2\001\002\000\040\013\133" +
    "\014\132\022\uffa0\023\uffa0\024\uffa0\025\uffa0\026\uffa0\027" +
    "\uffa0\030\uffa0\031\uffa0\044\uffa0\045\uffa0\047\uffa0\050\uffa0" +
    "\060\uffa0\001\002\000\034\022\uffa1\023\uffa1\024\uffa1\025" +
    "\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1\044\uffa1\045\uffa1" +
    "\047\uffa1\050\uffa1\060\uffa1\001\002\000\010\004\071\005" +
    "\065\046\072\001\002\000\004\060\142\001\002\000\032" +
    "\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030" +
    "\uffbb\031\uffbb\044\uffbb\045\uffbb\047\uffbb\060\uffbb\001\002" +
    "\000\022\004\uff91\005\uff91\006\uff91\007\uff91\010\uff91\042" +
    "\uff91\046\uff91\057\uff91\001\002\000\022\004\uff8f\005\uff8f" +
    "\006\uff8f\007\uff8f\010\uff8f\042\uff8f\046\uff8f\057\uff8f\001" +
    "\002\000\022\004\uff8c\005\uff8c\006\uff8c\007\uff8c\010\uff8c" +
    "\042\uff8c\046\uff8c\057\uff8c\001\002\000\022\004\uff8d\005" +
    "\uff8d\006\uff8d\007\uff8d\010\uff8d\042\uff8d\046\uff8d\057\uff8d" +
    "\001\002\000\022\004\uff90\005\uff90\006\uff90\007\uff90\010" +
    "\uff90\042\uff90\046\uff90\057\uff90\001\002\000\022\004\071" +
    "\005\065\006\067\007\060\010\066\042\064\046\072\057" +
    "\070\001\002\000\022\004\uff8e\005\uff8e\006\uff8e\007\uff8e" +
    "\010\uff8e\042\uff8e\046\uff8e\057\uff8e\001\002\000\010\022" +
    "\154\023\156\047\uff94\001\002\000\022\004\071\005\065" +
    "\006\067\007\060\010\066\042\064\046\072\057\070\001" +
    "\002\000\022\004\uff93\005\uff93\006\uff93\007\uff93\010\uff93" +
    "\042\uff93\046\uff93\057\uff93\001\002\000\004\047\uff96\001" +
    "\002\000\022\004\uff92\005\uff92\006\uff92\007\uff92\010\uff92" +
    "\042\uff92\046\uff92\057\uff92\001\002\000\004\047\uff95\001" +
    "\002\000\034\003\uffec\005\uffec\007\uffec\032\uffec\040\uffec" +
    "\042\uffec\052\uffec\055\uffec\056\uffec\061\uffec\062\uffec\063" +
    "\uffec\064\uffec\001\002\000\040\003\uff87\005\uff87\007\uff87" +
    "\032\uff87\036\uff87\040\uff87\042\uff87\043\uff87\052\uff87\055" +
    "\uff87\056\uff87\061\uff87\062\uff87\063\uff87\064\uff87\001\002" +
    "\000\034\003\164\005\036\007\033\032\037\040\043\042" +
    "\022\052\163\055\021\056\046\061\042\062\020\063\047" +
    "\064\034\001\002\000\044\003\uff86\005\uff86\007\uff86\032" +
    "\uff86\033\uff86\034\uff86\036\uff86\040\uff86\042\uff86\043\uff86" +
    "\052\uff86\055\uff86\056\uff86\061\uff86\062\uff86\063\uff86\064" +
    "\uff86\001\002\000\050\003\uff85\005\uff85\007\uff85\032\uff85" +
    "\033\uff85\034\uff85\036\uff85\040\uff85\042\uff85\043\uff85\044" +
    "\uffe7\051\uffe5\052\uff85\055\uff85\056\uff85\061\uff85\062\uff85" +
    "\063\uff85\064\uff85\001\002\000\004\044\170\001\002\000" +
    "\004\051\160\001\002\000\040\003\uffe4\005\uffe4\007\uffe4" +
    "\032\uffe4\036\uffe4\040\uffe4\042\uffe4\043\uffe4\052\uffe4\055" +
    "\uffe4\056\uffe4\061\uffe4\062\uffe4\063\uffe4\064\uffe4\001\002" +
    "\000\040\003\uffe6\005\uffe6\007\uffe6\032\uffe6\036\uffe6\040" +
    "\uffe6\042\uffe6\043\uffe6\052\uffe6\055\uffe6\056\uffe6\061\uffe6" +
    "\062\uffe6\063\uffe6\064\uffe6\001\002\000\004\044\uffe9\001" +
    "\002\000\006\044\203\045\204\001\002\000\020\015\201" +
    "\016\174\017\176\020\177\021\175\044\uffc9\045\uffc9\001" +
    "\002\000\022\004\uffc1\005\uffc1\006\uffc1\007\uffc1\010\uffc1" +
    "\042\uffc1\046\uffc1\057\uffc1\001\002\000\022\004\uffbe\005" +
    "\uffbe\006\uffbe\007\uffbe\010\uffbe\042\uffbe\046\uffbe\057\uffbe" +
    "\001\002\000\022\004\uffc0\005\uffc0\006\uffc0\007\uffc0\010" +
    "\uffc0\042\uffc0\046\uffc0\057\uffc0\001\002\000\022\004\uffbf" +
    "\005\uffbf\006\uffbf\007\uffbf\010\uffbf\042\uffbf\046\uffbf\057" +
    "\uffbf\001\002\000\022\004\071\005\065\006\067\007\060" +
    "\010\066\042\064\046\072\057\070\001\002\000\022\004" +
    "\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2\042\uffc2\046\uffc2" +
    "\057\uffc2\001\002\000\006\044\uffcb\045\uffcb\001\002\000" +
    "\040\003\uffcc\005\uffcc\007\uffcc\032\uffcc\036\uffcc\040\uffcc" +
    "\042\uffcc\043\uffcc\052\uffcc\055\uffcc\056\uffcc\061\uffcc\062" +
    "\uffcc\063\uffcc\064\uffcc\001\002\000\004\005\205\001\002" +
    "\000\020\015\201\016\174\017\176\020\177\021\175\044" +
    "\uffc8\045\uffc8\001\002\000\022\004\071\005\065\006\067" +
    "\007\060\010\066\042\064\046\072\057\070\001\002\000" +
    "\006\044\uffca\045\uffca\001\002\000\004\044\211\001\002" +
    "\000\040\003\uffe8\005\uffe8\007\uffe8\032\uffe8\036\uffe8\040" +
    "\uffe8\042\uffe8\043\uffe8\052\uffe8\055\uffe8\056\uffe8\061\uffe8" +
    "\062\uffe8\063\uffe8\064\uffe8\001\002\000\010\003\uffb4\035" +
    "\uffb4\052\uffb4\001\002\000\004\051\217\001\002\000\004" +
    "\005\215\001\002\000\004\047\216\001\002\000\004\051" +
    "\uffb2\001\002\000\010\003\220\035\uffab\052\uffab\001\002" +
    "\000\034\003\uffad\005\uffad\007\uffad\032\uffad\036\uffad\040" +
    "\uffad\042\uffad\055\uffad\056\uffad\061\uffad\062\uffad\063\uffad" +
    "\064\uffad\001\002\000\006\035\223\052\222\001\002\000" +
    "\040\003\uffb5\005\uffb5\007\uffb5\032\uffb5\036\uffb5\040\uffb5" +
    "\042\uffb5\043\uffb5\052\uffb5\055\uffb5\056\uffb5\061\uffb5\062" +
    "\uffb5\063\uffb5\064\uffb5\001\002\000\010\004\235\010\234" +
    "\037\233\001\002\000\034\003\uffec\005\uffec\007\uffec\032" +
    "\uffec\036\uffec\040\uffec\042\uffec\055\uffec\056\uffec\061\uffec" +
    "\062\uffec\063\uffec\064\uffec\001\002\000\034\003\230\005" +
    "\036\007\033\032\037\036\227\040\043\042\022\055\021" +
    "\056\046\061\042\062\020\063\047\064\034\001\002\000" +
    "\006\035\uffae\052\uffae\001\002\000\004\044\231\001\002" +
    "\000\012\035\uffaf\044\uffe7\051\uffe5\052\uffaf\001\002\000" +
    "\006\035\uffb0\052\uffb0\001\002\000\004\053\236\001\002" +
    "\000\004\053\uffa8\001\002\000\004\053\uffa9\001\002\000" +
    "\004\053\uffaa\001\002\000\034\003\uffb1\005\uffb1\007\uffb1" +
    "\032\uffb1\036\uffb1\040\uffb1\042\uffb1\055\uffb1\056\uffb1\061" +
    "\uffb1\062\uffb1\063\uffb1\064\uffb1\001\002\000\034\003\uffec" +
    "\005\uffec\007\uffec\032\uffec\036\uffec\040\uffec\042\uffec\055" +
    "\uffec\056\uffec\061\uffec\062\uffec\063\uffec\064\uffec\001\002" +
    "\000\006\035\uffac\052\uffac\001\002\000\010\003\220\035" +
    "\uffab\052\uffab\001\002\000\006\035\223\052\243\001\002" +
    "\000\040\003\uffb3\005\uffb3\007\uffb3\032\uffb3\036\uffb3\040" +
    "\uffb3\042\uffb3\043\uffb3\052\uffb3\055\uffb3\056\uffb3\061\uffb3" +
    "\062\uffb3\063\uffb3\064\uffb3\001\002\000\004\044\245\001" +
    "\002\000\004\052\uffcd\001\002\000\004\051\160\001\002" +
    "\000\044\003\uffa4\005\uffa4\007\uffa4\032\uffa4\033\251\034" +
    "\252\036\uffa4\040\uffa4\042\uffa4\043\uffa4\052\uffa4\055\uffa4" +
    "\056\uffa4\061\uffa4\062\uffa4\063\uffa4\064\uffa4\001\002\000" +
    "\040\003\uffa7\005\uffa7\007\uffa7\032\uffa7\036\uffa7\040\uffa7" +
    "\042\uffa7\043\uffa7\052\uffa7\055\uffa7\056\uffa7\061\uffa7\062" +
    "\uffa7\063\uffa7\064\uffa7\001\002\000\004\046\056\001\002" +
    "\000\004\051\160\001\002\000\040\003\uffa5\005\uffa5\007" +
    "\uffa5\032\uffa5\036\uffa5\040\uffa5\042\uffa5\043\uffa5\052\uffa5" +
    "\055\uffa5\056\uffa5\061\uffa5\062\uffa5\063\uffa5\064\uffa5\001" +
    "\002\000\004\051\160\001\002\000\044\003\uffa4\005\uffa4" +
    "\007\uffa4\032\uffa4\033\251\034\252\036\uffa4\040\uffa4\042" +
    "\uffa4\043\uffa4\052\uffa4\055\uffa4\056\uffa4\061\uffa4\062\uffa4" +
    "\063\uffa4\064\uffa4\001\002\000\040\003\uffa6\005\uffa6\007" +
    "\uffa6\032\uffa6\036\uffa6\040\uffa6\042\uffa6\043\uffa6\052\uffa6" +
    "\055\uffa6\056\uffa6\061\uffa6\062\uffa6\063\uffa6\064\uffa6\001" +
    "\002\000\010\004\071\005\065\046\072\001\002\000\022" +
    "\004\071\005\065\006\067\007\060\010\066\042\064\046" +
    "\072\057\070\001\002\000\004\044\262\001\002\000\040" +
    "\003\uffb7\005\uffb7\007\uffb7\032\uffb7\036\uffb7\040\uffb7\042" +
    "\uffb7\043\uffb7\052\uffb7\055\uffb7\056\uffb7\061\uffb7\062\uffb7" +
    "\063\uffb7\064\uffb7\001\002\000\004\060\264\001\002\000" +
    "\014\015\201\016\174\017\176\020\177\021\175\001\002" +
    "\000\022\004\071\005\065\006\067\007\060\010\066\042" +
    "\064\046\072\057\070\001\002\000\004\044\267\001\002" +
    "\000\040\003\uffb6\005\uffb6\007\uffb6\032\uffb6\036\uffb6\040" +
    "\uffb6\042\uffb6\043\uffb6\052\uffb6\055\uffb6\056\uffb6\061\uffb6" +
    "\062\uffb6\063\uffb6\064\uffb6\001\002\000\006\065\272\066" +
    "\271\001\002\000\006\065\ufff9\066\ufff9\001\002\000\040" +
    "\003\ufffa\005\ufffa\007\ufffa\032\ufffa\036\ufffa\040\ufffa\042" +
    "\ufffa\043\ufffa\052\ufffa\055\ufffa\056\ufffa\061\ufffa\062\ufffa" +
    "\063\ufffa\064\ufffa\001\002\000\010\002\uffd5\003\uffd5\041" +
    "\uffd5\001\002\000\040\003\ufff2\005\ufff2\007\ufff2\032\ufff2" +
    "\036\ufff2\040\ufff2\042\ufff2\043\ufff2\052\ufff2\055\ufff2\056" +
    "\ufff2\061\ufff2\062\ufff2\063\ufff2\064\ufff2\001\002\000\004" +
    "\044\uffeb\001\002\000\004\044\277\001\002\000\040\003" +
    "\uffea\005\uffea\007\uffea\032\uffea\036\uffea\040\uffea\042\uffea" +
    "\043\uffea\052\uffea\055\uffea\056\uffea\061\uffea\062\uffea\063" +
    "\uffea\064\uffea\001\002\000\004\051\160\001\002\000\004" +
    "\007\302\001\002\000\004\005\314\001\002\000\004\045" +
    "\304\001\002\000\010\004\071\005\065\046\072\001\002" +
    "\000\004\044\311\001\002\000\004\050\307\001\002\000" +
    "\010\004\071\005\065\046\072\001\002\000\004\044\uff88" +
    "\001\002\000\010\004\071\005\065\046\072\001\002\000" +
    "\004\047\313\001\002\000\004\051\uff8a\001\002\000\004" +
    "\045\uff89\001\002\000\040\003\uff8b\005\uff8b\007\uff8b\032" +
    "\uff8b\036\uff8b\040\uff8b\042\uff8b\043\uff8b\052\uff8b\055\uff8b" +
    "\056\uff8b\061\uff8b\062\uff8b\063\uff8b\064\uff8b\001\002\000" +
    "\022\004\071\005\065\006\067\007\060\010\066\042\064" +
    "\046\072\057\070\001\002\000\006\045\127\047\320\001" +
    "\002\000\004\044\321\001\002\000\040\003\uffff\005\uffff" +
    "\007\uffff\032\uffff\036\uffff\040\uffff\042\uffff\043\uffff\052" +
    "\uffff\055\uffff\056\uffff\061\uffff\062\uffff\063\uffff\064\uffff" +
    "\001\002\000\034\003\uffec\005\uffec\007\uffec\032\uffec\040" +
    "\uffec\042\uffec\043\uffec\055\uffec\056\uffec\061\uffec\062\uffec" +
    "\063\uffec\064\uffec\001\002\000\034\003\325\005\036\007" +
    "\033\032\037\040\043\042\022\043\040\055\021\056\046" +
    "\061\042\062\020\063\047\064\034\001\002\000\004\052" +
    "\326\001\002\000\006\044\uffe7\051\uffe5\001\002\000\010" +
    "\002\uffd2\003\uffd2\041\uffd2\001\002\000\004\005\335\001" +
    "\002\000\006\003\uffdc\051\uffdc\001\002\000\004\002\001" +
    "\001\002\000\006\003\013\051\015\001\002\000\010\002" +
    "\uffda\003\330\041\327\001\002\000\004\002\uffdb\001\002" +
    "\000\006\003\336\046\340\001\002\000\006\007\uffd8\061" +
    "\uffd8\001\002\000\006\003\013\051\015\001\002\000\010" +
    "\007\033\047\uffce\061\042\001\002\000\004\047\350\001" +
    "\002\000\006\045\345\047\uffcf\001\002\000\004\005\344" +
    "\001\002\000\006\045\uffd1\047\uffd1\001\002\000\006\007" +
    "\033\061\042\001\002\000\004\005\347\001\002\000\006" +
    "\045\uffd0\047\uffd0\001\002\000\006\003\351\053\352\001" +
    "\002\000\006\003\uffd6\051\uffd6\001\002\000\006\007\033" +
    "\061\042\001\002\000\006\003\uffd9\051\uffd9\001\002\000" +
    "\010\002\uffda\003\330\041\327\001\002\000\004\002\uffdd" +
    "\001\002\000\006\007\033\061\042\001\002\000\006\003" +
    "\uffd7\051\uffd7\001\002\000\006\003\013\051\015\001\002" +
    "\000\010\002\ufffb\003\ufffb\041\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\357\000\006\044\004\045\006\001\001\000\004\064" +
    "\357\001\001\000\004\031\330\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\036\013\001\001\000\004\073\321\001\001\000\002" +
    "\001\001\000\004\043\015\001\001\000\034\004\047\005" +
    "\024\021\030\023\027\034\025\037\022\046\044\047\023" +
    "\051\026\054\043\060\034\062\031\063\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\055\277\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\061\267\001\001\000\002\001\001\000\004" +
    "\006\257\001\001\000\004\017\245\001\001\000\016\002" +
    "\243\007\060\010\061\013\074\037\073\052\062\001\001" +
    "\000\006\067\164\070\165\001\001\000\002\001\001\000" +
    "\004\030\212\001\001\000\004\003\171\001\001\000\002" +
    "\001\001\000\004\017\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\050\160\001\001\000" +
    "\020\002\056\007\060\010\061\013\074\014\072\037\073" +
    "\052\062\001\001\000\004\016\147\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\130\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\002\112\007\060\010\061" +
    "\013\074\037\073\052\062\053\113\001\001\000\002\001" +
    "\001\000\010\007\110\010\061\013\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\077\001\001\000" +
    "\004\013\105\001\001\000\004\013\103\001\001\000\002" +
    "\001\001\000\004\013\101\001\001\000\004\012\102\001" +
    "\001\000\002\001\001\000\004\012\104\001\001\000\002" +
    "\001\001\000\004\012\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\002" +
    "\116\007\060\010\061\013\074\037\073\052\062\001\001" +
    "\000\002\001\001\000\004\042\120\001\001\000\002\001" +
    "\001\000\022\002\122\007\060\010\061\013\074\037\073" +
    "\040\123\041\124\052\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\002\127\007\060\010\061\013\074\037\073\052\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\135" +
    "\013\074\001\001\000\006\010\133\013\074\001\001\000" +
    "\004\011\134\001\001\000\002\001\001\000\004\011\136" +
    "\001\001\000\002\001\001\000\010\007\140\010\061\013" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\002\151\007\060\010\061" +
    "\013\074\037\073\052\062\001\001\000\002\001\001\000" +
    "\006\015\152\020\154\001\001\000\020\002\056\007\060" +
    "\010\061\013\074\014\156\037\073\052\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\043\161\001\001\000\002\001\001\000" +
    "\032\004\047\005\024\021\030\023\027\037\022\046\044" +
    "\047\023\051\026\054\043\060\034\062\031\063\016\001" +
    "\001\000\002\001\001\000\006\067\164\070\165\001\001" +
    "\000\002\001\001\000\004\050\166\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\066\207\001\001\000\002" +
    "\001\001\000\004\006\177\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\002\201\007\060\010\061\013\074\037\073\052\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\205\001\001\000\016\002" +
    "\206\007\060\010\061\013\074\037\073\052\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\074\240\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\220\001" +
    "\001\000\004\075\236\001\001\000\004\025\223\001\001" +
    "\000\002\001\001\000\004\027\231\001\001\000\006\026" +
    "\225\043\224\001\001\000\032\004\047\005\024\021\030" +
    "\023\027\037\022\046\044\047\023\051\026\054\043\060" +
    "\034\062\031\063\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\067\164\070\165\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\026\237\043" +
    "\224\001\001\000\002\001\001\000\004\024\241\001\001" +
    "\000\004\025\223\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\050\246\001\001\000\004" +
    "\022\247\001\001\000\002\001\001\000\004\017\253\001" +
    "\001\000\004\050\252\001\001\000\002\001\001\000\004" +
    "\050\254\001\001\000\004\022\255\001\001\000\002\001" +
    "\001\000\010\007\262\010\061\013\074\001\001\000\016" +
    "\002\260\007\060\010\061\013\074\037\073\052\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\264\001\001\000\016\002\265\007\060\010" +
    "\061\013\074\037\073\052\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\065\275\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\050\314\001\001\000\004\056\302\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\007\305\010\061\013" +
    "\074\057\304\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\007\307\010\061\013\074\001\001\000\002\001" +
    "\001\000\010\007\311\010\061\013\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\002\122\007\060\010\061\013\074\037\073" +
    "\040\316\052\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\043\322\001\001\000\034" +
    "\004\047\005\024\021\030\023\027\034\323\037\022\046" +
    "\044\047\023\051\026\054\043\060\034\062\031\063\016" +
    "\001\001\000\002\001\001\000\006\067\164\070\165\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\071\331" +
    "\001\001\000\002\001\001\000\004\036\332\001\001\000" +
    "\004\031\333\001\001\000\002\001\001\000\004\035\336" +
    "\001\001\000\004\072\355\001\001\000\004\036\353\001" +
    "\001\000\010\032\341\033\340\054\342\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\054\345\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\054" +
    "\352\001\001\000\002\001\001\000\004\031\354\001\001" +
    "\000\002\001\001\000\004\054\356\001\001\000\002\001" +
    "\001\000\004\036\360\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	MyTree tree = new MyTree();
	Symbol next;
	TreeNode node = new TreeNode("Errores",null);
	boolean errorFound = false;
	ArrayList<TreeNode> functions = new ArrayList();
	ArrayList<TreeNode> operations = new ArrayList();
	ArrayList<TreeNode> body = new ArrayList();
	ArrayList<TreeNode> arrayElements = new ArrayList();
	ArrayList<TreeNode> params = new ArrayList();
	ArrayList<TreeNode> params2 = new ArrayList();
	ArrayList<TreeNode> cases = new ArrayList();
	ArrayList<TreeNode> comparisons = new ArrayList();
	ArrayList<TreeNode> ifs = new ArrayList();
	ArrayList<TreeNode> assignments = new ArrayList();
	ArrayList<Row> functionTable = new ArrayList();
	String row = "";
	ArrayList<String> functionNames = new ArrayList();

	public void report_error(String errorBody, Object info) {
		errorFound = true;
		next = (Symbol)info;
	}

	public void report_fatal_error(String errorBody, Object info) {
		next = (Symbol)info;
		System.out.println("Unexpected Token");
	}

	public int error_sync_size(){
		return 1;
	}

	public void unrecovered_syntax_error(Symbol s){
		System.out.println("Unexpected token: " + next.value + " in line: " + next.left + "; column: " + next.right);
	}

	public void callError(int line, int column){
		if(next.sym == sym.leftParenthesis){
			printError(line,next.right - 1,"Missing function name");
		}else if(next.sym == sym.VariableName || next.sym == sym.Number || 
			next.sym == sym.STRING || next.sym == sym.BooleanValue){
			printError(line,next.right-1,"Missing '(' or ','");
		}else if(next.sym == sym.Delimeter || next.sym == sym.rightParenthesis){
			printError(line,column,"Syntax error in function parameter");
		}else if(next.sym == sym.EOL){
			printError(line,column,"Missing ')'");
		}
	}

	public void assignmentError(int line, int column){
		printError(line,column,"Syntax error in assigment");
	}

	public void missingCallOrTypeError(int line, int column){
		if(next.sym == sym.VariableName){
			printError(line,next.right - 1,"Syntax error in call or in variable type");		
		}else if(next.sym == sym.Assign ||next.sym == sym.MinusEqual ||next.sym == sym.PlusEqual ||
				next.sym == sym.DivEqual ||next.sym == sym.MultEqual){
			printError(line,next.right-1,"Syntax error in variable name");
		}else if(next.sym == sym.leftParenthesis){
			printError(line,column,"Missing for or call");
		}else if(next.sym == sym.Call || next.sym == sym.Type || next.sym == sym.ArrayType || 
				next.sym == sym.If ||next.sym == sym.For || next.sym == sym.While || next.sym == sym.Switch ||
				next.sym == sym.RightKey || next.sym == sym.Read || next.sym == sym.Write){
			printError(line,column,"Missing  '(' or '{' or ';'");
		}else if(next.sym == sym.rightParenthesis){
			printError(line,column,"Missing parameters in function");
		}else if(next.sym == sym.EOL){
			printError(line,column,"Missing ')'");
		}
	}

	public void structureError(int line, int column){
		if(next.sym == sym.leftParenthesis){
			printError(line,column,"Missing if/elseif or while or switch");	
		}else if(next.sym == sym.VariableName || next.sym == sym.Number || next.sym == sym.BooleanValue||
			next.sym == sym.STRING){
			printError(line,next.right-1,"Syntax error in comparison for structure or in function name");
		}else if(next.sym == sym.Equal || next.sym == sym.GreaterThan|| next.sym == sym.GreaterEqual||
			     next.sym == sym.LessThan || next.sym == sym.LessEqual ||next.sym == sym.NotEqual){
			printError(line,next.right-1,"Missing left value in comparison");
		}else if(next.sym == sym.And || next.sym == sym.Or || next.sym == sym.rightParenthesis){
			printError(line,next.right-1,"Missing right value in comparison");
		}else if(next.sym == sym.LeftKey){
			printError(line,column,"Missing ')' or else");
		}else if(next.sym == sym.Elseif || next.sym == sym.Else){
			printError(next.left+1,next.right,"Missing '}'");
		}
	}

	public void returnError(int line, int column){
		 if(sym.RightKey == next.sym){
			printError(next.left,column,"Syntax error in return");
		}else{
			printError(next.left-1,next.right,"Missing '}'");
		}
	}

	public void switchError(int line, int column){
		if(next.sym == sym.VariableName){
			printError(line,column,"Missing '('");
		}else if(next.sym == sym.rightParenthesis){
			printError(line,column,"Missing variable for switch");
		}else if(next.sym == sym.LeftKey){
			printError(line,column,"Missing ')'");
		}else if(next.sym == sym.Case){
			printError(line,column,"Missing '{'");
		}
	}

	public void caseHeaderError(int line, int column){
		if(next.sym == sym.Number || next.sym == sym.STRING || next.sym == sym.Default){
			printError(next.left+1,next.right-1,"Syntax error in case");
		}else if(next.sym == sym.TwoPoints){
			printError(next.left+1,next.right-1,"Missing case value");
		}else{
			printError(next.left+1,next.right-1,"Syntax error in case");
		}
	}

	public void caseEndingError(int line, int column){
		if(next.sym == sym.EOL){
			printError(line,next.right,"Syntax error in endcase");
		}else if(next.sym == sym.Case || next.sym == sym.RightKey){
			printError(line,next.right,"Syntax error in endcase");
		}
	}

	public void functionError(int line, int column, String word){
		if(word.equals("Function")){
			printError(line,next.right,"Syntax error in function name");	
		}else if(word.equals("BeforeType")){
			if(next.sym == sym.Type){
				printError(line,column,"Missing '(' or ',' or ':'");
			}else if(next.sym == sym.VariableName){
				printError(line,column,"Syntax error parameter types");
			}else if(next.sym == sym.Delimeter || next.sym == sym.rightParenthesis){
				printError(line,column,"Syntax error in parameters");
			}else if (next.sym == sym.TwoPoints) {
				printError(line,column,"Missing ')'");
			}		
		}else if(word.equals("Type")){
			printError(line,column,"Syntax error in return type");
		}
	}

	public void addMultipleNodes(TreeNode node, ArrayList<TreeNode> list,boolean reverse){
		try{
			if(reverse){
				for(int i = list.size()-1; i >=0; i--){
					addNodeToTree(node,list.get(i));
				}
			}else{
				for(int i = 0; i < list.size(); i++){
					addNodeToTree(node,list.get(i));
				}
			}
		}catch(Exception e){
			System.out.println("Error");
		}
	}

	public boolean verifyBody(int size){
		if(size>body.size()){
			return false;
		}
		return true;
	}

	public void addNodeToTree(TreeNode parent, TreeNode node){
		node.setParent(parent);
		parent.addSon(node);
	}

	public void printError(int line, int column, String message){
		TreeNode error = new TreeNode("Syntax error in line: " + line + " Column: " + column + 
					"; "  + message,null);
		addNodeToTree(node,error);
		System.out.println("Syntax error in line: " + line + " Column: " + column + 
					"; "  + message);
	}

	public TreeNode verifyAssignmentOperator(TreeNode param){
			TreeNode node = new TreeNode();

			if(param.value.toString().equals(":=")){
				node = new TreeNode("Assignment",null);
			}else if(param.value.toString().equals("+=")){
				node = new TreeNode("SumAssignment",null);
			}else if(param.value.toString().equals("-=")){
				node = new TreeNode("SubAssignment",null);
			}else if(param.value.toString().equals("*=")){
				node = new TreeNode("MultAssignment",null);
			}else if(param.value.toString().equals("/=")){
				node = new TreeNode("DivAssignment",null);
			}
			return node;
	}

	public TreeNode verifyComparisonOperator(TreeNode param){
			TreeNode node = new TreeNode();

			if(param.value.toString().equals("==")){
				node = new TreeNode("Equal",null);
			}else if(param.value.toString().equals(">=")){
				node = new TreeNode("GreaterEqual",null);
			}else if(param.value.toString().equals("<=")){
				node = new TreeNode("LessEqual",null);
			}else if(param.value.toString().equals("!=")){
				node = new TreeNode("Different",null);
			}else if(param.value.toString().equals("<")){
				node = new TreeNode("LessThan",null);
			}else if(param.value.toString().equals(">")){
				node = new TreeNode("GreaterThan",null);
			}
			return node;
	}	

	public void addFunctionsToTable(){
		int k = 0;
		for(int i = functionNames.size()-1; i >= 0; i--){
			functionTable.get(k).setId(functionNames.get(i));
			k++;
		}
	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico$actions {
  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // WhileForBody ::= LeftKey BODY error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
				  		parser.printError(eleft+1, eright+1, "Missing '}'");
				  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("WhileForBody",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // WhileForBody ::= LeftKey BODY RightKey 
            {
              Object RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
						if(!parser.errorFound){
							TreeNode bodyNode = new TreeNode("Body",null);
							parser.body = (ArrayList<TreeNode>)body;
							parser.addMultipleNodes(bodyNode,parser.body,false);
							RESULT = bodyNode;
						}
				  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("WhileForBody",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // WHILE ::= While ComparisonInParenthesis WhileForBody 
            {
              Object RESULT =null;
		int CPleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int CPright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object CP = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
				if(!parser.errorFound){
					TreeNode whileNode = new TreeNode("While", null);
					parser.addNodeToTree(whileNode,(TreeNode)CP);
					parser.addNodeToTree(whileNode,(TreeNode)body);
					RESULT = whileNode;
				}
		  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("WHILE",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // rangeFor ::= AddSub ThreePoints AddSub 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
				 if(!parser.errorFound){
				 	TreeNode range = new TreeNode("Range", null);
				 	parser.addNodeToTree(range,(TreeNode)a1);
				 	parser.addNodeToTree(range,(TreeNode)a2);
					 RESULT = range;
				}
	         
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("rangeFor",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // declarationFor ::= Type VariableName 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
						if(!parser.errorFound){
							TreeNode var = new TreeNode("Variable", null);
							TreeNode typeNode = new TreeNode(type.toString(), null);
							TreeNode nameNode = new TreeNode(name.toString(), null);
							parser.addNodeToTree(var,typeNode);
							parser.addNodeToTree(var,nameNode);
							RESULT = var;
						}

				   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declarationFor",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // paramsFor ::= leftParenthesis declarationFor Delimeter rangeFor EOL AddSub rightParenthesis 
            {
              Object RESULT =null;
		int Vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int Vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object V = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int Rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int Rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object R = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int Aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
					if(!parser.errorFound){
						TreeNode node = new TreeNode("Condition", null);
						TreeNode step = new TreeNode("stepValue", null);
						parser.addNodeToTree(node,(TreeNode)V);
						parser.addNodeToTree(node,(TreeNode)R);
						parser.addNodeToTree(node,step);
						parser.addNodeToTree(step,(TreeNode)A);
						RESULT = node;
					}
	          
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("paramsFor",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // FOR ::= For paramsFor WhileForBody 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
			if(!parser.errorFound){
				TreeNode For = new TreeNode("For", null);
				parser.addNodeToTree(For,(TreeNode)cond);
				parser.addNodeToTree(For,(TreeNode)body);
				RESULT = For;
			}
	    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FOR",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // RelationalOperator ::= LessEqual 
            {
              Object RESULT =null;
		RESULT = new TreeNode("<=",null);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("RelationalOperator",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // RelationalOperator ::= GreaterEqual 
            {
              Object RESULT =null;
		RESULT = new TreeNode(">=",null);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("RelationalOperator",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // RelationalOperator ::= LessThan 
            {
              Object RESULT =null;
		RESULT = new TreeNode("<",null);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("RelationalOperator",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // RelationalOperator ::= GreaterThan 
            {
              Object RESULT =null;
		RESULT = new TreeNode(">",null);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("RelationalOperator",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // RelationalOperator ::= NotEqual 
            {
              Object RESULT =null;
		RESULT = new TreeNode("!=",null);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("RelationalOperator",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // RelationalOperator ::= Equal 
            {
              Object RESULT =null;
		RESULT = new TreeNode("==",null);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("RelationalOperator",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // AndOr ::= Or 
            {
              Object RESULT =null;
		RESULT = parser.params.add(new TreeNode("OR", null));
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AndOr",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // AndOr ::= And 
            {
              Object RESULT =null;
		RESULT = parser.params.add(new TreeNode("AND", null));
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AndOr",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // MultipleComparison ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MultipleComparison",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // MultipleComparison ::= AndOr Comparison 
            {
              Object RESULT =null;
		int AOleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int AOright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object AO = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
							RESULT = AO;
					   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MultipleComparison",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Comparison ::= leftValue RelationalOperator leftValue MultipleComparison 
            {
              Object RESULT =null;
		int LVleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int LVright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object LV = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object operator = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int RVleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int RVright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object RV = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
						if(!parser.errorFound){
							TreeNode comparison = parser.verifyComparisonOperator((TreeNode)operator);
							parser.addNodeToTree(comparison,(TreeNode)LV);
							parser.addNodeToTree(comparison,(TreeNode)RV);
							parser.comparisons.add(comparison);
						}
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Comparison",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ComparisonInParenthesis ::= leftParenthesis Comparison rightParenthesis 
            {
              Object RESULT =null;
		
									if(!parser.errorFound){
										TreeNode condition = new TreeNode("Conditions", null);
										int contador = -1;
										if(parser.params.size()>0){
											contador = 0;
										}
										for(int i = parser.comparisons.size()-1; i >= 0; i--){
											parser.addNodeToTree(condition,parser.comparisons.get(i));
											if(contador>-1 && contador<parser.params.size()){
												parser.addNodeToTree(condition,parser.params.get(contador));
												contador++;
											}
										}
										parser.params = new ArrayList();
										parser.comparisons = new ArrayList();
										RESULT = condition;
									}
							
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ComparisonInParenthesis",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ArithmeticOperation ::= leftParenthesis AddSub rightParenthesis 
            {
              Object RESULT =null;
		int ASleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int ASright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object AS = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                        	if(!parser.errorFound){
                        		TreeNode parenthesis = new TreeNode("Parenthesis", null);
                        		parser.addNodeToTree(parenthesis,(TreeNode)AS);
                        		RESULT = parenthesis;
                        	}
                        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ArithmeticOperation",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ArithmeticOperation ::= Number 
            {
              Object RESULT =null;
		int numberleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object number = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                        	if(!parser.errorFound){
								TreeNode nameNode = new TreeNode(number.toString(),null);
                        		RESULT = nameNode;
                        	}
						
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ArithmeticOperation",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ArithmeticOperation ::= VariableName 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
							if(!parser.errorFound){
								TreeNode nameNode = new TreeNode(name.toString(),null);  
								RESULT = nameNode;
							}
						
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ArithmeticOperation",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // MultipleMultDiv ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MultipleMultDiv",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // MultipleMultDiv ::= ModOP ArithmeticOperation MultipleMultDiv 
            {
              Object RESULT =null;
		int AOPleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int AOPright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object AOP = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
						parser.operations.add((TreeNode)AOP);
						parser.operations.add(new TreeNode("mod",null));
					
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MultipleMultDiv",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // MultipleMultDiv ::= DivOP ArithmeticOperation MultipleMultDiv 
            {
              Object RESULT =null;
		int AOPleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int AOPright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object AOP = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
						parser.operations.add((TreeNode)AOP);
						parser.operations.add(new TreeNode("/",null));
					
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MultipleMultDiv",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // MultipleMultDiv ::= MultOP ArithmeticOperation MultipleMultDiv 
            {
              Object RESULT =null;
		int AOPleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int AOPright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object AOP = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
						parser.operations.add((TreeNode)AOP);
						parser.operations.add(new TreeNode("*",null));
					
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MultipleMultDiv",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // MultDiv ::= ArithmeticOperation MultipleMultDiv 
            {
              Object RESULT =null;
		int AOPleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int AOPright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object AOP = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				if(!parser.errorFound){
					parser.operations.add((TreeNode)AOP);
					TreeNode multDiv = new TreeNode("int2", null);
					parser.addMultipleNodes(multDiv,parser.operations,true);
					RESULT = multDiv;
					parser.operations = new ArrayList();
				}
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MultDiv",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // MultipleAddSub ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MultipleAddSub",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // MultipleAddSub ::= SubOP MultDiv MultipleAddSub 
            {
              Object RESULT =null;
		int MDleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int MDright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object MD = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                   		parser.operations.add((TreeNode)MD);
                   		parser.operations.add(new TreeNode("-",null));
                   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MultipleAddSub",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // MultipleAddSub ::= AddOP MultDiv MultipleAddSub 
            {
              Object RESULT =null;
		int MDleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int MDright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object MD = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int MASleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int MASright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object MAS = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                   		parser.operations.add((TreeNode)MD);
                   		parser.operations.add(new TreeNode("+",null));
                   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MultipleAddSub",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // AddSub ::= MultDiv MultipleAddSub 
            {
              Object RESULT =null;
		int MDleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int MDright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object MD = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int MASleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int MASright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object MAS = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
		   		if(!parser.errorFound){
		   			parser.operations.add((TreeNode)MD);
						TreeNode AddSub = new TreeNode("int", null);
						parser.addMultipleNodes(AddSub,parser.operations,true);
						RESULT = AddSub;
						parser.operations = new ArrayList();
					}
		   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AddSub",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ELSEIF ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ELSEIF",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ELSEIF ::= Else WhileForBody 
            {
              Object RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
           		if(!parser.errorFound){
           			TreeNode elseNode = new TreeNode("Else",null);
           			parser.addNodeToTree(elseNode,(TreeNode)body);
           			parser.ifs.add(elseNode);
           		}
           
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ELSEIF",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ELSEIF ::= Elseif ComparisonInParenthesis WhileForBody ELSEIF 
            {
              Object RESULT =null;
		int CPleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int CPright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object CP = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				if(!parser.errorFound){
					TreeNode elseif = new TreeNode("ElseIf", null);
					parser.addNodeToTree(elseif,(TreeNode)CP);
					parser.addNodeToTree(elseif,(TreeNode)body);
           			parser.ifs.add(elseif);
           		}
	       
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ELSEIF",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // IF ::= If ComparisonInParenthesis WhileForBody ELSEIF 
            {
              Object RESULT =null;
		int CPleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int CPright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object CP = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
			if(!parser.errorFound){
				TreeNode ifNode = new TreeNode("If", null);
				parser.addNodeToTree(ifNode,(TreeNode)CP);
				parser.addNodeToTree(ifNode,(TreeNode)body);
				parser.addMultipleNodes(ifNode,parser.ifs,true);
				parser.ifs = new ArrayList();
				RESULT =ifNode;
			}
	   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("IF",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CaseValues ::= Default 
            {
              Object RESULT =null;
		int defleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int defright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object def = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = new TreeNode(def.toString(), null);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CaseValues",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CaseValues ::= STRING 
            {
              Object RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object string = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = new TreeNode(string.toString(), null);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CaseValues",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CaseValues ::= Number 
            {
              Object RESULT =null;
		int numberleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object number = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = new TreeNode(number.toString(), null);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CaseValues",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CASE ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CASE",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CASE ::= error NT$9 CaseEnding 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CASE",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$9 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

					parser.caseHeaderError(eleft+1, eright+1);
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$9",59, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CASE ::= CASE CaseHeader CaseEnding 
            {
              Object RESULT =null;
		int Cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int headerleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int headerright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object header = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int endingleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int endingright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ending = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
				if(!parser.errorFound){
					ArrayList<TreeNode> arr = new ArrayList();
					if(C != null){
							arr = (ArrayList<TreeNode>)C;
					}
					TreeNode caseNode = new TreeNode("Case", null);
					parser.addNodeToTree(caseNode,(TreeNode)header);
					parser.addNodeToTree(caseNode,(TreeNode)ending);
					arr.add(caseNode);
					RESULT = arr;
				}
		 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CASE",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CaseEnding ::= BODY error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
					parser.caseEndingError(eleft+1, eright+1);
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CaseEnding",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CaseEnding ::= BODY Endcase EOL 
            {
              Object RESULT =null;
		int Bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
					if(!parser.errorFound){
						TreeNode body = new TreeNode("Body", null);
						parser.addMultipleNodes(body,(ArrayList<TreeNode>)B,false);
						RESULT = body;
						parser.body = new ArrayList();
					}
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CaseEnding",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CaseHeader ::= Case CaseValues TwoPoints 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
					if(!parser.errorFound){
						RESULT = ((TreeNode)value);
					}
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CaseHeader",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ComparisonSwitch ::= leftParenthesis VariableName rightParenthesis 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
							if(!parser.errorFound){
								TreeNode nameNode = new TreeNode(name.toString(),null);
								RESULT = nameNode;
							}
					 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ComparisonSwitch",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SWITCH ::= Switch error NT$8 CASE RightKey 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("SWITCH",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$8 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

				parser.switchError(eleft + 1, eright + 1);
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$8",58, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SWITCH ::= Switch ComparisonSwitch LeftKey CASE RightKey 
            {
              Object RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object variable = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				if(!parser.errorFound){
					TreeNode node = new TreeNode("Switch",null);
					parser.addNodeToTree(node, (TreeNode)variable);
					parser.addMultipleNodes(node,(ArrayList<TreeNode>)C,false);
					RESULT = node;
					parser.cases = new ArrayList();
				}
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("SWITCH",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SingleAssignment ::= VariableName LeftBracket AddSub RightBracket AssignmentOperator leftValue EOL 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object size = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object operator = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int LVleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int LVright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object LV = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
					 			if(!parser.errorFound){
					 			TreeNode node = new TreeNode("ArrayAssignment",null);
					 			TreeNode nameNode = new TreeNode(name.toString(), null);
					 			parser.addNodeToTree(node,nameNode);
					 			parser.addNodeToTree(node,(TreeNode)size);
					 			parser.addNodeToTree(node,(TreeNode)LV);
					 			RESULT = node;
					 		}
					 	
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("SingleAssignment",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SingleAssignment ::= VariableName AssignmentOperator leftValue EOL 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object operator = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int LVleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int LVright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object LV = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
					 		if(!parser.errorFound){
					 			TreeNode node = new TreeNode("Assignment",null);
					 			TreeNode nameNode = new TreeNode(name.toString(), null);
					 			parser.addNodeToTree(node,nameNode);
					 			parser.addNodeToTree(node,(TreeNode)LV);
					 			RESULT = node;
					 		}
					 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("SingleAssignment",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Element ::= Element Delimeter leftValue 
            {
              Object RESULT =null;
		int LVleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int LVright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object LV = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
            	parser.arrayElements.add((TreeNode)LV);
            
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Element",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Element ::= leftValue 
            {
              Object RESULT =null;
		int LVleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int LVright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object LV = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
				parser.arrayElements.add((TreeNode)LV);
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Element",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ArrayAssignment ::= LeftBracket Element RightBracket 
            {
              Object RESULT =null;
		
                    	if(!parser.errorFound){
                    		TreeNode node = new TreeNode("ArrayAssignment",null);
                    		TreeNode node2 = new TreeNode("Elements",null);
                    		parser.addNodeToTree(node,node2);
                    		parser.addMultipleNodes(node2,parser.arrayElements,false);
                    		RESULT = node;
                    		parser.arrayElements = new ArrayList();
                    	}
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ArrayAssignment",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ArrayAssignment ::= Type LeftBracket AddSub RightBracket 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object size = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
						if(!parser.errorFound){
							TreeNode node = new TreeNode("ArrayAssignment",null);
							TreeNode node1 = new TreeNode(type.toString(),null);
							TreeNode node2 = (TreeNode)size;
							parser.addNodeToTree(node,node1);
							parser.addNodeToTree(node,node2);
							RESULT = node;
						}
					
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ArrayAssignment",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // VariableType ::= ArrayType 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = new TreeNode(t.toString(),null);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VariableType",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // VariableType ::= Type 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = new TreeNode(t.toString(),null);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VariableType",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // AssignmentOperator ::= DivEqual 
            {
              Object RESULT =null;
		RESULT = new TreeNode("/=",null);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AssignmentOperator",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // AssignmentOperator ::= MultEqual 
            {
              Object RESULT =null;
		RESULT = new TreeNode("*=",null);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AssignmentOperator",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // AssignmentOperator ::= MinusEqual 
            {
              Object RESULT =null;
		RESULT = new TreeNode("-=",null);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AssignmentOperator",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // AssignmentOperator ::= PlusEqual 
            {
              Object RESULT =null;
		RESULT = new TreeNode("+=",null);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AssignmentOperator",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // AssignmentOperator ::= Assign 
            {
              Object RESULT =null;
		RESULT = new TreeNode(":=",null);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AssignmentOperator",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // leftValue ::= ArrayAssignment 
            {
              Object RESULT =null;
		int AAleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int AAright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object AA = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
              	RESULT = AA;
              	
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("leftValue",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // leftValue ::= STRING 
            {
              Object RESULT =null;
		int wordleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int wordright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object word = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
              		if(!parser.errorFound){
              			TreeNode node = new TreeNode("string", null);
              			TreeNode value = new TreeNode(word.toString(),null);
              			parser.addNodeToTree(node,value);
              			RESULT = node;
              		}
              
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("leftValue",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // leftValue ::= BooleanValue 
            {
              Object RESULT =null;
		int Booleanleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int Booleanright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object Boolean = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
              		if(!parser.errorFound){
              			TreeNode node = new TreeNode("boolean", null);
              			TreeNode value = new TreeNode(Boolean.toString(),null);
              			parser.addNodeToTree(node, value);
              			RESULT = node;
              		}
              
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("leftValue",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // leftValue ::= AddSub 
            {
              Object RESULT =null;
		int ASleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int ASright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object AS = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
					RESULT = AS;
			  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("leftValue",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // leftValue ::= CALL 
            {
              Object RESULT =null;
		int Cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
              	RESULT = C;
              	
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("leftValue",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Assignment ::= Assignment Delimeter VariableName 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
			   		if(!parser.errorFound){
			   			TreeNode nameNode = new TreeNode(name.toString(), null);
			   			parser.assignments.add(nameNode);
			   		}
			   	
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Assignment",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Assignment ::= VariableName 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
			   		if(!parser.errorFound){
			   			TreeNode nameNode = new TreeNode(name.toString(), null);
			   			parser.assignments.add(nameNode);
			   		}
			   	
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Assignment",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Assignment ::= Assignment Delimeter VariableName AssignmentOperator leftValue 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object operator = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int leftValleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int leftValright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object leftVal = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
					if(!parser.errorFound){
						TreeNode assignment = new TreeNode("Assignment",null);
						TreeNode nameNode = new TreeNode(name.toString(),null);
						parser.addNodeToTree(assignment,nameNode);
						parser.addNodeToTree(assignment,(TreeNode)leftVal);
						parser.assignments.add(assignment);
					}
			   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Assignment",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Assignment ::= VariableName AssignmentOperator leftValue 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object operator = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int leftValleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int leftValright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object leftVal = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
					if(!parser.errorFound){
						TreeNode assignment = parser.verifyAssignmentOperator((TreeNode)operator);
						TreeNode nameNode = new TreeNode(name.toString(),null);
						parser.addNodeToTree(assignment,nameNode);
						parser.addNodeToTree(assignment,(TreeNode)leftVal);
						parser.assignments.add(assignment);
					}
			   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Assignment",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Declaration ::= VariableType Assignment EOL 
            {
              Object RESULT =null;
		int VTypeleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int VTyperight = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object VType = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
					if(!parser.errorFound){
						TreeNode declaration = new TreeNode("Declaration",null);
						TreeNode type = new TreeNode("Type",null);
						TreeNode typeNode = new TreeNode(VType.toString(),null);
						parser.addNodeToTree(declaration,type);
						parser.addMultipleNodes(declaration,parser.assignments,false);
						parser.addNodeToTree(type,typeNode);
						parser.assignments = new ArrayList();
						RESULT = declaration;
					}
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Declaration",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // RETURN ::= Return leftValue EOL 
            {
              Object RESULT =null;
		int LVleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int LVright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object LV = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				if(!parser.errorFound){
					TreeNode node = new TreeNode("Return", null);
					parser.addNodeToTree(node,(TreeNode)LV);
					RESULT = node;
				}
	       
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("RETURN",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ParamsOrEmpty ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ParamsOrEmpty",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ParamsOrEmpty ::= Params 
            {
              Object RESULT =null;
		int Pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object P = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = P;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ParamsOrEmpty",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Params ::= Params Delimeter VariableType VariableName 
            {
              Object RESULT =null;
		int Pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object P = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
		   		if(!parser.errorFound){
		   			TreeNode node = new TreeNode("Parameter", null);
					TreeNode node1 = new TreeNode(type.toString(), null);
					TreeNode node2 = new TreeNode(name.toString(), null);
					parser.addNodeToTree(node,node1);
					parser.addNodeToTree(node,node2);
					ArrayList<TreeNode> arr = new ArrayList();
					if(P != null){
						arr = (ArrayList<TreeNode>)P;
					}
					parser.row += "," + type.toString();
					arr.add(node);
					RESULT = arr;
				}
		   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Params",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Params ::= VariableType VariableName 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
				if(!parser.errorFound){
					TreeNode node = new TreeNode("Parameter", null);
					parser.row+=type.toString();
					TreeNode node1 = new TreeNode(type.toString(), null);
					TreeNode node2 = new TreeNode(name.toString(), null);
					parser.addNodeToTree(node,node1);
					parser.addNodeToTree(node,node2);
					ArrayList<TreeNode> arr = new ArrayList();
					arr.add(node);
					RESULT = arr;
				}
	       
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Params",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FunctionBody ::= error NT$7 BODY RETURN RightKey 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FunctionBody",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$7 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

				 	System.out.println("Fixing");
				 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$7",57, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FunctionBody ::= LeftKey BODY error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
				 		parser.returnError(eleft+1,eright+1);
				 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FunctionBody",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FunctionBody ::= LeftKey BODY RETURN RightKey 
            {
              Object RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int Rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int Rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object R = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
						if(!parser.errorFound){
							TreeNode bodyNode = new TreeNode("Body",null);
							parser.body = (ArrayList<TreeNode>)body;
							parser.addMultipleNodes(bodyNode,parser.body,false);
							parser.addNodeToTree(bodyNode,(TreeNode)R);
							RESULT = bodyNode;
						}						
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FunctionBody",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FunctionHeader ::= leftParenthesis ParamsOrEmpty rightParenthesis error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
			 			parser.functionError(eleft+1,eright+1,"Type");
				   	
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FunctionHeader",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FunctionHeader ::= error NT$6 VariableType 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FunctionHeader",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$6 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

			 			parser.functionError(eleft+1,eright+1,"BeforeType");
				   	
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$6",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FunctionHeader ::= leftParenthesis ParamsOrEmpty rightParenthesis TwoPoints VariableType 
            {
              Object RESULT =null;
		int Pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object P = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
							ArrayList arr = new ArrayList();
							arr.add(type);
							arr.add(P);
							parser.row+="->" + type.toString();
							parser.functionTable.add(new Row("",parser.row));
							parser.row = "";
							RESULT = arr;
				   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FunctionHeader",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FUNCTION ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FUNCTION",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FUNCTION ::= error NT$5 FunctionBody FUNCTION 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FUNCTION",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$5 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

			 	parser.functionError(eleft+1,eright+1,"Function");
			 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$5",55, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FUNCTION ::= Function VariableName FunctionHeader FunctionBody FUNCTION 
            {
              Object RESULT =null;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object functionName = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int FHleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int FHright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object FH = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
					if(!parser.errorFound){
						TreeNode node = new TreeNode("function", null);
						TreeNode params2 = new TreeNode("Parameters", null);
						TreeNode nameNode = new TreeNode(functionName.toString(), null);
						parser.addNodeToTree(node,nameNode);
						parser.addNodeToTree(node,((TreeNode)((ArrayList)FH).get(0)));
						parser.addNodeToTree(node,params2);
						parser.addNodeToTree(node,(TreeNode)body);
						parser.addMultipleNodes(params2,((ArrayList<TreeNode>)((ArrayList)FH).get(1)),false);
						parser.functions.add(node);
						parser.functionNames.add(functionName.toString());
						parser.params2 = new ArrayList();
					}
			 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FUNCTION",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CallParamsOrEmpty ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CallParamsOrEmpty",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CallParamsOrEmpty ::= CallParams 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CallParamsOrEmpty",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CallParams ::= CallParams Delimeter leftValue 
            {
              Object RESULT =null;
		int LVleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int LVright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object LV = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		parser.params.add((TreeNode)LV);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CallParams",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CallParams ::= leftValue 
            {
              Object RESULT =null;
		int LVleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int LVright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object LV = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		parser.params.add((TreeNode)LV);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CallParams",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CallHeader ::= leftParenthesis CallParamsOrEmpty rightParenthesis 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CallHeader",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CALL ::= Call VariableName CallHeader 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				if(!parser.errorFound){
		 			TreeNode node = new TreeNode("Call",null);
		 			TreeNode node3 = new TreeNode("FunctionParams",null);
		 			TreeNode nameNode = new TreeNode(name.toString(),null);
		 			parser.addNodeToTree(node,nameNode);

		 			if(parser.params.size() > 0){
		 				parser.addNodeToTree(node,node3);
		 				parser.addMultipleNodes(node3,parser.params,false);
		 			}
		 			RESULT = node;
		 			parser.params = new ArrayList();
		 		}
		 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CALL",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ERROR ::= error NT$4 WhileForBody 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ERROR",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$4 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

		  		parser.structureError(eleft+1, eright+1);
		  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$4",54, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ERROR ::= error NT$3 EOL 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ERROR",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$3 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

		  		parser.missingCallOrTypeError(eleft + 1, eright +1);
		  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$3",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ERROR ::= VariableType error NT$2 EOL 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ERROR",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$2 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

		  		parser.assignmentError(eleft + 1, eright + 1);
		  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$2",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ERROR ::= Call error NT$1 EOL 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ERROR",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$1 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

				parser.callError(eleft + 1, eright + 1);
		  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$1",51, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // BODY ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BODY",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // BODY ::= BODY WHILE 
            {
              Object RESULT =null;
		int Bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int Wleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int Wright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object W = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
		  		if(!parser.errorFound){
		  			ArrayList<TreeNode> nodes = new ArrayList();
		  			if(B == null){
		  				nodes = new ArrayList();
		  			}else{
		  				nodes = ((ArrayList<TreeNode>)B);
		  			}
		  			nodes.add((TreeNode)W);
		  			RESULT = nodes;
		  		}
		  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BODY",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // BODY ::= BODY FOR 
            {
              Object RESULT =null;
		int Bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int Fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int Fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object F = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
		  		if(!parser.errorFound){
		  			ArrayList<TreeNode> nodes = new ArrayList();
		  			if(B == null){
		  				nodes = new ArrayList();
		  			}else{
		  				nodes = ((ArrayList<TreeNode>)B);
		  			}
		  			nodes.add((TreeNode)F);
		  			RESULT = nodes;
		  		}
		  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BODY",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // BODY ::= BODY SingleAssignment 
            {
              Object RESULT =null;
		int Bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int SAleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int SAright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object SA = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
		  		if(!parser.errorFound){
		  			ArrayList<TreeNode> nodes = new ArrayList();
		  			if(B == null){
		  				nodes = new ArrayList();
		  			}else{
		  				nodes = ((ArrayList<TreeNode>)B);
		  			}
		  			nodes.add((TreeNode)SA);
		  			RESULT = nodes;
		  		}
		  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BODY",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // BODY ::= BODY SWITCH 
            {
              Object RESULT =null;
		int Bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int Sleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int Sright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object S = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
		  		if(!parser.errorFound){
		  			ArrayList<TreeNode> nodes = new ArrayList();
		  			if(B == null){
		  				nodes = new ArrayList();
		  			}else{
		  				nodes = ((ArrayList<TreeNode>)B);
		  			}
		  			nodes.add((TreeNode)S);
		  			RESULT = nodes;
		  		}
		  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BODY",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // BODY ::= BODY IF 
            {
              Object RESULT =null;
		int Bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int Ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object I = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
		  		if(!parser.errorFound){
		  			ArrayList<TreeNode> nodes = new ArrayList();
		  			if(B == null){
		  				nodes = new ArrayList();
		  			}else{
		  				nodes = ((ArrayList<TreeNode>)B);
		  			}
		  			nodes.add((TreeNode)I);
		  			RESULT = nodes;
		  		}
		  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BODY",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // BODY ::= BODY CALL EOL 
            {
              Object RESULT =null;
		int Bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
		  		if(!parser.errorFound){
		  			ArrayList<TreeNode> nodes = new ArrayList();
		  			if(B == null){
		  				nodes = new ArrayList();
		  			}else{
		  				nodes = ((ArrayList<TreeNode>)B);
		  			}
		  			nodes.add((TreeNode)C);
		  			RESULT = nodes;
		  		}
		  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BODY",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // BODY ::= BODY Declaration 
            {
              Object RESULT =null;
		int Bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int Dleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
		  		if(!parser.errorFound){
		  			ArrayList<TreeNode> nodes = new ArrayList();
		  			if(B == null){
		  				nodes = new ArrayList();
		  			}else{
		  				nodes = ((ArrayList<TreeNode>)B);
		  			}
		  			nodes.add((TreeNode)D);
		  			RESULT = nodes;
		  		}
		  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BODY",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BODY ::= BODY WRITE 
            {
              Object RESULT =null;
		int Bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int Wleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int Wright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object W = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
		  		if(!parser.errorFound){
		  			ArrayList<TreeNode> nodes = new ArrayList();
		  			if(B == null){
		  				nodes = new ArrayList();
		  			}else{
		  				nodes = ((ArrayList<TreeNode>)B);
		  			}
		  			nodes.add((TreeNode)W);
		  			RESULT = nodes;
		  		}
		  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BODY",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // BODY ::= BODY READ 
            {
              Object RESULT =null;
		int Bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int Rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int Rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object R = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
		  		if(!parser.errorFound){
		  			ArrayList<TreeNode> nodes = new ArrayList();
		  			if(B == null){
		  				nodes = new ArrayList();
		  			}else{
		  				nodes = ((ArrayList<TreeNode>)B);
		  			}
		  			nodes.add((TreeNode)R);
		  			RESULT = nodes;
		  		}
		  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BODY",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // BODY ::= BODY COMMENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BODY",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BODY ::= BODY ERROR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BODY",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CompleteComment ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CompleteComment",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CompleteComment ::= CompleteComment Comment 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CompleteComment",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // COMMENT ::= beginComment CompleteComment endComment 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("COMMENT",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // MAIN ::= error NT$0 FunctionBody 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MAIN",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$0 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

		 		parser.printError(0,0,"Missing Main()");
		 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$0",50, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // MAIN ::= Main leftParenthesis rightParenthesis FunctionBody 
            {
              Object RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
				if(!parser.errorFound){
					TreeNode node = new TreeNode("Main",null);
					parser.addNodeToTree(node,(TreeNode)body);
					RESULT = node;
				}
		 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MAIN",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // READ ::= Read leftParenthesis VariableName rightParenthesis EOL 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
				if(!parser.errorFound){
					TreeNode node = new TreeNode("Read", null);
					TreeNode node1 = new TreeNode(name.toString(), null);
					parser.addNodeToTree(node,node1);
					RESULT = node;
				}
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("READ",49, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // WRITE ::= Write leftParenthesis CallParams rightParenthesis EOL 
            {
              Object RESULT =null;
		
				if(!parser.errorFound){
					TreeNode node = new TreeNode("Write", null);
					parser.addMultipleNodes(node,parser.params,false);
					parser.params = new ArrayList();
					RESULT = node;
				}
	      
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("WRITE",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PROGRAM EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PROGRAM ::= MAIN FUNCTION 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
						ArrayList list = new ArrayList();
					if(!parser.errorFound){
						parser.tree = new MyTree(new TreeNode("Program", null));
						parser.addNodeToTree(parser.tree.root, (TreeNode)m);
						TreeNode node = new TreeNode("Functions", null);
						parser.addMultipleNodes(node,parser.functions,true);
						parser.addNodeToTree(parser.tree.root,node);
						list.add(parser.tree);
						parser.addFunctionsToTable();
						list.add(parser.functionTable);
						RESULT = list;
					}else{
						parser.tree = new MyTree(parser.node);
						list.add(parser.tree);
						list.add(new ArrayList());
						RESULT = list;
					}
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PROGRAM",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

