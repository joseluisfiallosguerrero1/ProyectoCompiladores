
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Mar 10 13:22:12 CST 2018
//----------------------------------------------------

package proyectocompi;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Mar 10 13:22:12 CST 2018
  */
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\077\000\002\034\004\000\002\002\004\000\002\033" +
    "\010\000\002\032\004\000\002\032\004\000\002\032\004" +
    "\000\002\032\004\000\002\032\004\000\002\032\002\000" +
    "\002\026\010\000\002\027\004\000\002\030\004\000\002" +
    "\030\002\000\002\031\003\000\002\031\002\000\002\022" +
    "\015\000\002\022\002\000\002\023\005\000\002\024\004" +
    "\000\002\024\002\000\002\025\003\000\002\025\002\000" +
    "\002\005\005\000\002\003\006\000\002\003\004\000\002" +
    "\004\004\000\002\004\002\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\035\006\000\002\020\017\000\002\021\011\000\002" +
    "\021\002\000\002\014\012\000\002\015\011\000\002\015" +
    "\004\000\002\015\002\000\002\006\005\000\002\006\005" +
    "\000\002\006\003\000\002\007\005\000\002\007\005\000" +
    "\002\007\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\005\000\002\011\006\000\002\012\004\000\002\012" +
    "\002\000\002\013\003\000\002\013\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\207\000\004\055\005\001\002\000\006\002\ufff1\053" +
    "\170\001\002\000\004\024\010\001\002\000\004\002\007" +
    "\001\002\000\004\002\000\001\002\000\004\025\011\001" +
    "\002\000\004\047\012\001\002\000\016\005\021\007\013" +
    "\037\015\050\ufff9\051\014\054\017\001\002\000\004\005" +
    "\160\001\002\000\004\024\136\001\002\000\004\024\100" +
    "\001\002\000\026\005\021\007\013\037\015\040\ufff9\041" +
    "\ufff9\042\ufff9\045\ufff9\050\ufff9\051\014\054\017\001\002" +
    "\000\004\005\065\001\002\000\026\005\021\007\013\037" +
    "\015\040\ufff9\041\ufff9\042\ufff9\045\ufff9\050\ufff9\051\014" +
    "\054\017\001\002\000\014\014\037\015\032\016\034\017" +
    "\035\020\033\001\002\000\004\050\031\001\002\000\026" +
    "\005\021\007\013\037\015\040\ufff9\041\ufff9\042\ufff9\045" +
    "\ufff9\050\ufff9\051\014\054\017\001\002\000\026\005\021" +
    "\007\013\037\015\040\ufff9\041\ufff9\042\ufff9\045\ufff9\050" +
    "\ufff9\051\014\054\017\001\002\000\026\005\021\007\013" +
    "\037\015\040\ufff9\041\ufff9\042\ufff9\045\ufff9\050\ufff9\051" +
    "\014\054\017\001\002\000\014\040\ufffd\041\ufffd\042\ufffd" +
    "\045\ufffd\050\ufffd\001\002\000\014\040\ufffb\041\ufffb\042" +
    "\ufffb\045\ufffb\050\ufffb\001\002\000\014\040\ufffc\041\ufffc" +
    "\042\ufffc\045\ufffc\050\ufffc\001\002\000\006\002\uffff\053" +
    "\uffff\001\002\000\014\004\uffe2\005\uffe2\006\uffe2\022\uffe2" +
    "\024\uffe2\001\002\000\014\004\uffdf\005\uffdf\006\uffdf\022" +
    "\uffdf\024\uffdf\001\002\000\014\004\uffe1\005\uffe1\006\uffe1" +
    "\022\uffe1\024\uffe1\001\002\000\014\004\uffe0\005\uffe0\006" +
    "\uffe0\022\uffe0\024\uffe0\001\002\000\014\004\046\005\043" +
    "\006\045\022\044\024\047\001\002\000\014\004\uffe3\005" +
    "\uffe3\006\uffe3\022\uffe3\024\uffe3\001\002\000\004\021\063" +
    "\001\002\000\036\012\054\013\052\021\uffe6\023\uffe6\025" +
    "\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6" +
    "\035\uffe6\036\uffe6\052\uffe6\001\002\000\042\010\056\011" +
    "\057\012\uffd4\013\uffd4\021\uffd4\023\uffd4\025\uffd4\027\uffd4" +
    "\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036" +
    "\uffd4\052\uffd4\001\002\000\042\010\uffd0\011\uffd0\012\uffd0" +
    "\013\uffd0\021\uffd0\023\uffd0\025\uffd0\027\uffd0\030\uffd0\031" +
    "\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\052\uffd0" +
    "\001\002\000\032\021\uffe4\023\uffe4\025\uffe4\027\uffe4\030" +
    "\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4" +
    "\052\uffe4\001\002\000\032\021\uffe5\023\uffe5\025\uffe5\027" +
    "\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5" +
    "\036\uffe5\052\uffe5\001\002\000\042\010\uffcf\011\uffcf\012" +
    "\uffcf\013\uffcf\021\uffcf\023\uffcf\025\uffcf\027\uffcf\030\uffcf" +
    "\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\052" +
    "\uffcf\001\002\000\010\004\046\005\043\024\047\001\002" +
    "\000\042\010\uffd1\011\uffd1\012\uffd1\013\uffd1\021\uffd1\023" +
    "\uffd1\025\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1" +
    "\034\uffd1\035\uffd1\036\uffd1\052\uffd1\001\002\000\010\012" +
    "\054\013\052\025\053\001\002\000\010\004\046\005\043" +
    "\024\047\001\002\000\042\010\uffce\011\uffce\012\uffce\013" +
    "\uffce\021\uffce\023\uffce\025\uffce\027\uffce\030\uffce\031\uffce" +
    "\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce\052\uffce\001" +
    "\002\000\010\004\046\005\043\024\047\001\002\000\042" +
    "\010\056\011\057\012\uffd6\013\uffd6\021\uffd6\023\uffd6\025" +
    "\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6" +
    "\035\uffd6\036\uffd6\052\uffd6\001\002\000\010\004\046\005" +
    "\043\024\047\001\002\000\010\004\046\005\043\024\047" +
    "\001\002\000\042\010\uffd2\011\uffd2\012\uffd2\013\uffd2\021" +
    "\uffd2\023\uffd2\025\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2" +
    "\033\uffd2\034\uffd2\035\uffd2\036\uffd2\052\uffd2\001\002\000" +
    "\042\010\uffd3\011\uffd3\012\uffd3\013\uffd3\021\uffd3\023\uffd3" +
    "\025\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034" +
    "\uffd3\035\uffd3\036\uffd3\052\uffd3\001\002\000\042\010\056" +
    "\011\057\012\uffd5\013\uffd5\021\uffd5\023\uffd5\025\uffd5\027" +
    "\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5" +
    "\036\uffd5\052\uffd5\001\002\000\026\005\uffde\007\uffde\037" +
    "\uffde\040\uffde\041\uffde\042\uffde\045\uffde\050\uffde\051\uffde" +
    "\054\uffde\001\002\000\014\040\ufffe\041\ufffe\042\ufffe\045" +
    "\ufffe\050\ufffe\001\002\000\004\024\066\001\002\000\016" +
    "\004\046\005\043\006\045\022\044\024\047\025\ufff3\001" +
    "\002\000\006\023\075\025\ufff5\001\002\000\004\025\ufff4" +
    "\001\002\000\004\025\072\001\002\000\004\021\073\001" +
    "\002\000\026\005\ufff8\007\ufff8\037\ufff8\040\ufff8\041\ufff8" +
    "\042\ufff8\045\ufff8\050\ufff8\051\ufff8\054\ufff8\001\002\000" +
    "\004\025\ufff7\001\002\000\014\004\046\005\043\006\045" +
    "\022\044\024\047\001\002\000\004\025\ufff6\001\002\000" +
    "\014\040\ufffa\041\ufffa\042\ufffa\045\ufffa\050\ufffa\001\002" +
    "\000\014\004\046\005\043\006\045\022\044\024\047\001" +
    "\002\000\016\031\121\032\125\033\122\034\127\035\124" +
    "\036\123\001\002\000\004\025\103\001\002\000\004\043" +
    "\104\001\002\000\022\005\021\007\013\037\015\040\ufff9" +
    "\041\ufff9\042\ufff9\051\014\054\017\001\002\000\010\040" +
    "\106\041\uffd7\042\110\001\002\000\004\024\113\001\002" +
    "\000\004\041\112\001\002\000\016\005\021\007\013\037" +
    "\015\041\ufff9\051\014\054\017\001\002\000\004\041\uffd8" +
    "\001\002\000\026\005\uffda\007\uffda\037\uffda\040\uffda\041" +
    "\uffda\042\uffda\045\uffda\050\uffda\051\uffda\054\uffda\001\002" +
    "\000\014\004\046\005\043\006\045\022\044\024\047\001" +
    "\002\000\004\025\115\001\002\000\004\043\116\001\002" +
    "\000\022\005\021\007\013\037\015\040\ufff9\041\ufff9\042" +
    "\ufff9\051\014\054\017\001\002\000\010\040\106\041\uffd7" +
    "\042\110\001\002\000\004\041\uffd9\001\002\000\014\004" +
    "\uffc8\005\uffc8\006\uffc8\022\uffc8\024\uffc8\001\002\000\014" +
    "\004\uffc6\005\uffc6\006\uffc6\022\uffc6\024\uffc6\001\002\000" +
    "\014\004\uffc3\005\uffc3\006\uffc3\022\uffc3\024\uffc3\001\002" +
    "\000\014\004\uffc4\005\uffc4\006\uffc4\022\uffc4\024\uffc4\001" +
    "\002\000\014\004\uffc7\005\uffc7\006\uffc7\022\uffc7\024\uffc7" +
    "\001\002\000\014\004\046\005\043\006\045\022\044\024" +
    "\047\001\002\000\014\004\uffc5\005\uffc5\006\uffc5\022\uffc5" +
    "\024\uffc5\001\002\000\010\025\uffcb\027\132\030\134\001" +
    "\002\000\014\004\046\005\043\006\045\022\044\024\047" +
    "\001\002\000\014\004\uffca\005\uffca\006\uffca\022\uffca\024" +
    "\uffca\001\002\000\004\025\uffcd\001\002\000\014\004\uffc9" +
    "\005\uffc9\006\uffc9\022\uffc9\024\uffc9\001\002\000\004\025" +
    "\uffcc\001\002\000\004\005\137\001\002\000\004\025\140" +
    "\001\002\000\004\047\141\001\002\000\004\044\uffdb\001" +
    "\002\000\004\044\143\001\002\000\016\004\046\005\043" +
    "\006\045\022\044\024\047\046\145\001\002\000\004\052" +
    "\153\001\002\000\004\052\146\001\002\000\016\005\021" +
    "\007\013\037\015\045\ufff9\051\014\054\017\001\002\000" +
    "\004\045\150\001\002\000\004\021\151\001\002\000\004" +
    "\050\152\001\002\000\026\005\uffdd\007\uffdd\037\uffdd\040" +
    "\uffdd\041\uffdd\042\uffdd\045\uffdd\050\uffdd\051\uffdd\054\uffdd" +
    "\001\002\000\016\005\021\007\013\037\015\045\ufff9\051" +
    "\014\054\017\001\002\000\004\045\155\001\002\000\004" +
    "\021\156\001\002\000\004\044\uffdc\001\002\000\004\021" +
    "\167\001\002\000\020\014\037\015\032\016\034\017\035" +
    "\020\033\021\uffe7\023\162\001\002\000\004\021\uffe9\001" +
    "\002\000\004\005\160\001\002\000\014\004\046\005\043" +
    "\006\045\022\044\024\047\001\002\000\006\021\uffe7\023" +
    "\162\001\002\000\004\021\uffea\001\002\000\004\021\uffe8" +
    "\001\002\000\026\005\uffeb\007\uffeb\037\uffeb\040\uffeb\041" +
    "\uffeb\042\uffeb\045\uffeb\050\uffeb\051\uffeb\054\uffeb\001\002" +
    "\000\004\005\172\001\002\000\004\002\001\001\002\000" +
    "\004\024\173\001\002\000\006\007\174\025\uffec\001\002" +
    "\000\004\005\206\001\002\000\004\025\177\001\002\000" +
    "\004\025\uffed\001\002\000\004\052\200\001\002\000\004" +
    "\007\201\001\002\000\004\047\202\001\002\000\016\005" +
    "\021\007\013\037\015\050\ufff9\051\014\054\017\001\002" +
    "\000\004\050\204\001\002\000\006\002\ufff1\053\170\001" +
    "\002\000\004\002\ufff2\001\002\000\006\023\207\025\uffee" +
    "\001\002\000\004\007\174\001\002\000\004\025\ufff0\001" +
    "\002\000\004\025\uffef\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\207\000\006\033\003\034\005\001\001\000\004\022" +
    "\170\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\005" +
    "\017\014\022\020\023\026\024\032\021\035\015\001\001" +
    "\000\004\003\156\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\005\017\014\022\020\023\026\024\032\076" +
    "\035\015\001\001\000\002\001\001\000\016\005\017\014" +
    "\022\020\023\026\024\032\063\035\015\001\001\000\004" +
    "\017\035\001\001\000\002\001\001\000\016\005\017\014" +
    "\022\020\023\026\024\032\027\035\015\001\001\000\016" +
    "\005\017\014\022\020\023\026\024\032\026\035\015\001" +
    "\001\000\016\005\017\014\022\020\023\026\024\032\025" +
    "\035\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\002" +
    "\037\006\040\007\041\010\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\006\050\007\041\010\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\061\010\047" +
    "\001\001\000\002\001\001\000\006\007\054\010\047\001" +
    "\001\000\002\001\001\000\004\010\060\001\001\000\004" +
    "\010\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\002\066\006\040\007\041\010\047\027" +
    "\067\031\070\001\001\000\004\030\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\002\066\006\040\007\041" +
    "\010\047\027\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\002\100\006\040\007\041\010\047\011\101" +
    "\001\001\000\004\016\125\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\005\017\014\022\020\023\026\024" +
    "\032\104\035\015\001\001\000\004\015\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\005\017\014\022" +
    "\020\023\026\024\032\110\035\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\002\100\006\040\007\041" +
    "\010\047\011\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\005\017\014\022\020\023\026\024\032\116" +
    "\035\015\001\001\000\004\015\117\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\002\127\006" +
    "\040\007\041\010\047\001\001\000\002\001\001\000\006" +
    "\012\132\013\130\001\001\000\014\002\100\006\040\007" +
    "\041\010\047\011\134\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\141" +
    "\001\001\000\002\001\001\000\012\002\143\006\040\007" +
    "\041\010\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\005\017\014\022\020\023\026\024\032\146\035" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\005\017\014\022\020" +
    "\023\026\024\032\153\035\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\160\017\162\001\001\000\002\001\001\000\004" +
    "\003\165\001\001\000\012\002\163\006\040\007\041\010" +
    "\047\001\001\000\004\004\164\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\023\175\025\174" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\005\017\014\022\020\023\026\024\032\202\035" +
    "\015\001\001\000\002\001\001\000\004\022\204\001\001" +
    "\000\002\001\001\000\004\024\207\001\001\000\004\023" +
    "\210\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}





}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico$actions {
  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // RelationalOperator ::= LessEqual 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("RelationalOperator",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // RelationalOperator ::= GreaterEqual 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("RelationalOperator",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // RelationalOperator ::= LessThan 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("RelationalOperator",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // RelationalOperator ::= GreaterThan 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("RelationalOperator",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // RelationalOperator ::= NotEqual 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("RelationalOperator",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // RelationalOperator ::= Equal 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("RelationalOperator",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // AndOr ::= Or 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AndOr",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // AndOr ::= And 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AndOr",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // MultipleComparison ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MultipleComparison",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // MultipleComparison ::= AndOr Comparison 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MultipleComparison",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Comparison ::= leftValue RelationalOperator leftValue MultipleComparison 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Comparison",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ArithmeticOperation ::= leftParenthesis AddSub rightParenthesis 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ArithmeticOperation",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ArithmeticOperation ::= Number 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ArithmeticOperation",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ArithmeticOperation ::= VariableName 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ArithmeticOperation",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // MultDiv ::= ArithmeticOperation 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MultDiv",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // MultDiv ::= MultDiv DivOP ArithmeticOperation 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MultDiv",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // MultDiv ::= MultDiv MultOP ArithmeticOperation 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MultDiv",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // AddSub ::= MultDiv 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AddSub",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // AddSub ::= AddSub SubOP MultDiv 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AddSub",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // AddSub ::= AddSub AddOP MultDiv 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AddSub",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ELSEIF ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ELSEIF",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ELSEIF ::= Else BODY 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ELSEIF",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ELSEIF ::= Elseif leftParenthesis Comparison rightParenthesis Then BODY ELSEIF 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ELSEIF",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // IF ::= If leftParenthesis Comparison rightParenthesis Then BODY ELSEIF Endif 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("IF",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CASE ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CASE",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CASE ::= CASE Case leftValue TwoPoints BODY Endcase EOL 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CASE",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SWITCH ::= Switch leftParenthesis VariableName rightParenthesis LeftKey CASE Case Default TwoPoints BODY Endcase EOL RightKey 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("SWITCH",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-12)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SingleAssignment ::= VariableName AssignmentOperator leftValue EOL 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("SingleAssignment",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // AssignmentOperator ::= DivEqual 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AssignmentOperator",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // AssignmentOperator ::= MultEqual 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AssignmentOperator",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // AssignmentOperator ::= MinusEqual 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AssignmentOperator",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // AssignmentOperator ::= PlusEqual 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AssignmentOperator",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // AssignmentOperator ::= Assign 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AssignmentOperator",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // leftValue ::= STRING 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("leftValue",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // leftValue ::= BooleanValue 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("leftValue",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // leftValue ::= AddSub 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("leftValue",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // MultipleAssignment ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MultipleAssignment",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // MultipleAssignment ::= Delimeter Assignment 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MultipleAssignment",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Assignment ::= VariableName MultipleAssignment 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Assignment",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Assignment ::= VariableName AssignmentOperator leftValue MultipleAssignment 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Assignment",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Declaration ::= Type Assignment EOL 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Declaration",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ParamsOrEmpty ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ParamsOrEmpty",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ParamsOrEmpty ::= Params 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ParamsOrEmpty",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // MultipleParams ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MultipleParams",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // MultipleParams ::= Delimeter Params 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MultipleParams",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Params ::= Type VariableName MultipleParams 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Params",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FUNCTION ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FUNCTION",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FUNCTION ::= Function VariableName leftParenthesis ParamsOrEmpty rightParenthesis TwoPoints Type LeftKey BODY RightKey FUNCTION 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FUNCTION",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CallParamsOrEmpty ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CallParamsOrEmpty",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CallParamsOrEmpty ::= CallParams 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CallParamsOrEmpty",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CallMultipleParams ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CallMultipleParams",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CallMultipleParams ::= Delimeter CallParams 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CallMultipleParams",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CallParams ::= leftValue CallMultipleParams 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CallParams",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CALL ::= Call VariableName leftParenthesis CallParamsOrEmpty rightParenthesis EOL 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CALL",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BODY ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BODY",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BODY ::= SingleAssignment BODY 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BODY",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BODY ::= SWITCH BODY 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BODY",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BODY ::= IF BODY 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BODY",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BODY ::= CALL BODY 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BODY",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BODY ::= Declaration BODY 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BODY",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // MAIN ::= Main leftParenthesis rightParenthesis LeftKey BODY RightKey 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MAIN",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PROGRAM EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PROGRAM ::= MAIN FUNCTION 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PROGRAM",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

