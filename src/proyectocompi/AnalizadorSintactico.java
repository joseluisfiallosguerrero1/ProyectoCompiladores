
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Mar 29 12:34:39 CST 2018
//----------------------------------------------------

package proyectocompi;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Mar 29 12:34:39 CST 2018
  */
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\163\000\002\050\004\000\002\002\004\000\002\047" +
    "\006\000\002\064\002\000\002\047\005\000\002\046\004" +
    "\000\002\046\004\000\002\046\004\000\002\046\004\000" +
    "\002\046\004\000\002\046\004\000\002\046\004\000\002" +
    "\046\004\000\002\046\002\000\002\065\002\000\002\054" +
    "\006\000\002\066\002\000\002\054\006\000\002\067\002" +
    "\000\002\054\005\000\002\070\002\000\002\054\005\000" +
    "\002\042\006\000\002\045\005\000\002\043\003\000\002" +
    "\043\005\000\002\044\003\000\002\044\002\000\002\034" +
    "\007\000\002\071\002\000\002\034\006\000\002\034\002" +
    "\000\002\040\007\000\002\072\002\000\002\040\005\000" +
    "\002\040\006\000\002\041\006\000\002\041\005\000\002" +
    "\073\002\000\002\041\007\000\002\035\004\000\002\035" +
    "\006\000\002\036\003\000\002\036\002\000\002\037\005" +
    "\000\002\005\005\000\002\003\005\000\002\003\007\000" +
    "\002\003\003\000\002\003\005\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\057\003\000" +
    "\002\057\003\000\002\055\006\000\002\055\005\000\002" +
    "\056\003\000\002\056\005\000\002\004\006\000\002\025" +
    "\007\000\002\074\002\000\002\025\007\000\002\032\005" +
    "\000\002\027\005\000\002\030\005\000\002\030\004\000" +
    "\002\026\005\000\002\075\002\000\002\026\005\000\002" +
    "\026\002\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\021\006\000\002\022\006\000\002\022\004" +
    "\000\002\022\002\000\002\007\004\000\002\011\005\000" +
    "\002\011\005\000\002\011\002\000\002\010\004\000\002" +
    "\012\005\000\002\012\005\000\002\012\002\000\002\013" +
    "\003\000\002\013\003\000\002\013\005\000\002\017\005" +
    "\000\002\014\006\000\002\020\004\000\002\020\002\000" +
    "\002\015\003\000\002\015\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\051\005\000\002\060\011" +
    "\000\002\061\004\000\002\062\005\000\002\052\005\000" +
    "\002\053\005\000\002\053\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\325\000\006\003\004\056\006\001\002\000\006\003" +
    "\ufffe\053\ufffe\001\002\000\010\002\uffe2\003\276\043\275" +
    "\001\002\000\004\050\011\001\002\000\004\002\010\001" +
    "\002\000\004\002\000\001\002\000\004\051\012\001\002" +
    "\000\006\003\013\053\015\001\002\000\026\003\uffdb\005" +
    "\uffdb\007\uffdb\032\uffdb\042\uffdb\044\uffdb\045\uffdb\057\uffdb" +
    "\060\uffdb\063\uffdb\001\002\000\010\002\uffff\003\uffff\043" +
    "\uffff\001\002\000\026\003\ufff4\005\ufff4\007\ufff4\032\ufff4" +
    "\042\ufff4\044\ufff4\045\ufff4\057\ufff4\060\ufff4\063\ufff4\001" +
    "\002\000\026\003\034\005\031\007\030\032\032\042\036" +
    "\044\020\045\033\057\017\060\040\063\035\001\002\000" +
    "\004\050\253\001\002\000\006\003\247\005\103\001\002" +
    "\000\032\003\ufff5\005\ufff5\007\ufff5\032\ufff5\040\ufff5\042" +
    "\ufff5\044\ufff5\045\ufff5\054\ufff5\057\ufff5\060\ufff5\063\ufff5" +
    "\001\002\000\032\003\ufffa\005\ufffa\007\ufffa\032\ufffa\040" +
    "\ufffa\042\ufffa\044\ufffa\045\ufffa\054\ufffa\057\ufffa\060\ufffa" +
    "\063\ufffa\001\002\000\032\003\ufffb\005\ufffb\007\ufffb\032" +
    "\ufffb\040\ufffb\042\ufffb\044\ufffb\045\ufffb\054\ufffb\057\ufffb" +
    "\060\ufffb\063\ufffb\001\002\000\004\054\246\001\002\000" +
    "\032\003\ufffc\005\ufffc\007\ufffc\032\ufffc\040\ufffc\042\ufffc" +
    "\044\ufffc\045\ufffc\054\ufffc\057\ufffc\060\ufffc\063\ufffc\001" +
    "\002\000\032\003\ufff8\005\ufff8\007\ufff8\032\ufff8\040\ufff8" +
    "\042\ufff8\044\ufff8\045\ufff8\054\ufff8\057\ufff8\060\ufff8\063" +
    "\ufff8\001\002\000\032\003\ufff9\005\ufff9\007\ufff9\032\ufff9" +
    "\040\ufff9\042\ufff9\044\ufff9\045\ufff9\054\ufff9\057\ufff9\060" +
    "\ufff9\063\ufff9\001\002\000\010\003\uffc5\005\uffc5\053\uffc5" +
    "\001\002\000\014\015\164\016\160\017\162\020\163\021" +
    "\161\001\002\000\004\050\044\001\002\000\022\004\057" +
    "\005\053\006\055\007\045\010\054\044\052\050\060\061" +
    "\056\001\002\000\014\002\uffdc\003\uffdc\043\uffdc\046\uffef" +
    "\053\uffed\001\002\000\010\003\uffc4\005\uffc4\053\uffc4\001" +
    "\002\000\006\003\176\050\200\001\002\000\006\003\155" +
    "\005\157\001\002\000\004\050\044\001\002\000\032\003" +
    "\ufff6\005\ufff6\007\ufff6\032\ufff6\040\ufff6\042\ufff6\044\ufff6" +
    "\045\ufff6\054\ufff6\057\ufff6\060\ufff6\063\ufff6\001\002\000" +
    "\032\003\ufff7\005\ufff7\007\ufff7\032\ufff7\040\ufff7\042\ufff7" +
    "\044\ufff7\045\ufff7\054\ufff7\057\ufff7\060\ufff7\063\ufff7\001" +
    "\002\000\004\053\144\001\002\000\022\004\057\005\053" +
    "\006\055\007\045\010\054\044\052\050\060\061\056\001" +
    "\002\000\004\061\141\001\002\000\016\024\124\025\130" +
    "\026\125\027\132\030\127\031\126\001\002\000\032\022" +
    "\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf" +
    "\031\uffcf\046\uffcf\047\uffcf\051\uffcf\062\uffcf\001\002\000" +
    "\040\013\117\014\116\022\uffa9\023\uffa9\024\uffa9\025\uffa9" +
    "\026\uffa9\027\uffa9\030\uffa9\031\uffa9\046\uffa9\047\uffa9\051" +
    "\uffa9\052\uffa9\062\uffa9\001\002\000\032\022\uffcb\023\uffcb" +
    "\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\046" +
    "\uffcb\047\uffcb\051\uffcb\062\uffcb\001\002\000\004\005\103" +
    "\001\002\000\044\011\uffa4\012\uffa4\013\uffa4\014\uffa4\022" +
    "\uffa4\023\uffa4\024\uffa4\025\uffa4\026\uffa4\027\uffa4\030\uffa4" +
    "\031\uffa4\046\uffa4\047\uffa4\051\uffa4\052\uffa4\062\uffa4\001" +
    "\002\000\032\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd" +
    "\027\uffcd\030\uffcd\031\uffcd\046\uffcd\047\uffcd\051\uffcd\062" +
    "\uffcd\001\002\000\032\022\uffce\023\uffce\024\uffce\025\uffce" +
    "\026\uffce\027\uffce\030\uffce\031\uffce\046\uffce\047\uffce\051" +
    "\uffce\062\uffce\001\002\000\022\004\057\005\053\006\055" +
    "\007\045\010\054\044\052\050\060\061\056\001\002\000" +
    "\044\011\uffa3\012\uffa3\013\uffa3\014\uffa3\022\uffa3\023\uffa3" +
    "\024\uffa3\025\uffa3\026\uffa3\027\uffa3\030\uffa3\031\uffa3\046" +
    "\uffa3\047\uffa3\051\uffa3\052\uffa3\062\uffa3\001\002\000\010" +
    "\004\057\005\053\050\060\001\002\000\004\051\073\001" +
    "\002\000\032\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc" +
    "\027\uffcc\030\uffcc\031\uffcc\046\uffcc\047\uffcc\051\uffcc\062" +
    "\uffcc\001\002\000\044\011\064\012\066\013\uffa5\014\uffa5" +
    "\022\uffa5\023\uffa5\024\uffa5\025\uffa5\026\uffa5\027\uffa5\030" +
    "\uffa5\031\uffa5\046\uffa5\047\uffa5\051\uffa5\052\uffa5\062\uffa5" +
    "\001\002\000\010\004\057\005\053\050\060\001\002\000" +
    "\040\013\uffa8\014\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8" +
    "\026\uffa8\027\uffa8\030\uffa8\031\uffa8\046\uffa8\047\uffa8\051" +
    "\uffa8\052\uffa8\062\uffa8\001\002\000\010\004\057\005\053" +
    "\050\060\001\002\000\044\011\064\012\066\013\uffa5\014" +
    "\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5\026\uffa5\027\uffa5" +
    "\030\uffa5\031\uffa5\046\uffa5\047\uffa5\051\uffa5\052\uffa5\062" +
    "\uffa5\001\002\000\040\013\uffa6\014\uffa6\022\uffa6\023\uffa6" +
    "\024\uffa6\025\uffa6\026\uffa6\027\uffa6\030\uffa6\031\uffa6\046" +
    "\uffa6\047\uffa6\051\uffa6\052\uffa6\062\uffa6\001\002\000\044" +
    "\011\064\012\066\013\uffa5\014\uffa5\022\uffa5\023\uffa5\024" +
    "\uffa5\025\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5\046\uffa5" +
    "\047\uffa5\051\uffa5\052\uffa5\062\uffa5\001\002\000\040\013" +
    "\uffa7\014\uffa7\022\uffa7\023\uffa7\024\uffa7\025\uffa7\026\uffa7" +
    "\027\uffa7\030\uffa7\031\uffa7\046\uffa7\047\uffa7\051\uffa7\052" +
    "\uffa7\062\uffa7\001\002\000\004\053\uffa1\001\002\000\004" +
    "\051\075\001\002\000\044\011\uffa2\012\uffa2\013\uffa2\014" +
    "\uffa2\022\uffa2\023\uffa2\024\uffa2\025\uffa2\026\uffa2\027\uffa2" +
    "\030\uffa2\031\uffa2\046\uffa2\047\uffa2\051\uffa2\052\uffa2\062" +
    "\uffa2\001\002\000\006\047\uffc1\062\uffc1\001\002\000\006" +
    "\047\101\062\100\001\002\000\032\022\uffc2\023\uffc2\024" +
    "\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\046\uffc2" +
    "\047\uffc2\051\uffc2\062\uffc2\001\002\000\022\004\057\005" +
    "\053\006\055\007\045\010\054\044\052\050\060\061\056" +
    "\001\002\000\006\047\uffc0\062\uffc0\001\002\000\004\050" +
    "\105\001\002\000\004\046\114\001\002\000\024\004\057" +
    "\005\053\006\055\007\045\010\054\044\052\050\060\051" +
    "\uffe6\061\056\001\002\000\006\047\uffe9\051\uffe9\001\002" +
    "\000\006\047\112\051\uffe7\001\002\000\004\051\111\001" +
    "\002\000\004\046\uffea\001\002\000\022\004\057\005\053" +
    "\006\055\007\045\010\054\044\052\050\060\061\056\001" +
    "\002\000\006\047\uffe8\051\uffe8\001\002\000\062\003\uffeb" +
    "\005\uffeb\007\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026" +
    "\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\040\uffeb\042\uffeb" +
    "\044\uffeb\045\uffeb\046\uffeb\047\uffeb\051\uffeb\054\uffeb\057" +
    "\uffeb\060\uffeb\062\uffeb\063\uffeb\001\002\000\034\022\uffac" +
    "\023\uffac\024\uffac\025\uffac\026\uffac\027\uffac\030\uffac\031" +
    "\uffac\046\uffac\047\uffac\051\uffac\052\uffac\062\uffac\001\002" +
    "\000\010\004\057\005\053\050\060\001\002\000\010\004" +
    "\057\005\053\050\060\001\002\000\040\013\117\014\116" +
    "\022\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9\030" +
    "\uffa9\031\uffa9\046\uffa9\047\uffa9\051\uffa9\052\uffa9\062\uffa9" +
    "\001\002\000\034\022\uffab\023\uffab\024\uffab\025\uffab\026" +
    "\uffab\027\uffab\030\uffab\031\uffab\046\uffab\047\uffab\051\uffab" +
    "\052\uffab\062\uffab\001\002\000\040\013\117\014\116\022" +
    "\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9" +
    "\031\uffa9\046\uffa9\047\uffa9\051\uffa9\052\uffa9\062\uffa9\001" +
    "\002\000\034\022\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa" +
    "\027\uffaa\030\uffaa\031\uffaa\046\uffaa\047\uffaa\051\uffaa\052" +
    "\uffaa\062\uffaa\001\002\000\022\004\uff9b\005\uff9b\006\uff9b" +
    "\007\uff9b\010\uff9b\044\uff9b\050\uff9b\061\uff9b\001\002\000" +
    "\022\004\uff99\005\uff99\006\uff99\007\uff99\010\uff99\044\uff99" +
    "\050\uff99\061\uff99\001\002\000\022\004\uff96\005\uff96\006" +
    "\uff96\007\uff96\010\uff96\044\uff96\050\uff96\061\uff96\001\002" +
    "\000\022\004\uff97\005\uff97\006\uff97\007\uff97\010\uff97\044" +
    "\uff97\050\uff97\061\uff97\001\002\000\022\004\uff9a\005\uff9a" +
    "\006\uff9a\007\uff9a\010\uff9a\044\uff9a\050\uff9a\061\uff9a\001" +
    "\002\000\022\004\057\005\053\006\055\007\045\010\054" +
    "\044\052\050\060\061\056\001\002\000\022\004\uff98\005" +
    "\uff98\006\uff98\007\uff98\010\uff98\044\uff98\050\uff98\061\uff98" +
    "\001\002\000\010\022\135\023\137\051\uff9e\001\002\000" +
    "\022\004\057\005\053\006\055\007\045\010\054\044\052" +
    "\050\060\061\056\001\002\000\022\004\uff9d\005\uff9d\006" +
    "\uff9d\007\uff9d\010\uff9d\044\uff9d\050\uff9d\061\uff9d\001\002" +
    "\000\004\051\uffa0\001\002\000\022\004\uff9c\005\uff9c\006" +
    "\uff9c\007\uff9c\010\uff9c\044\uff9c\050\uff9c\061\uff9c\001\002" +
    "\000\004\051\uff9f\001\002\000\010\004\057\005\053\050" +
    "\060\001\002\000\004\062\143\001\002\000\032\022\uffc3" +
    "\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031" +
    "\uffc3\046\uffc3\047\uffc3\051\uffc3\062\uffc3\001\002\000\026" +
    "\003\ufff4\005\ufff4\007\ufff4\032\ufff4\042\ufff4\044\ufff4\054" +
    "\ufff4\057\ufff4\060\ufff4\063\ufff4\001\002\000\032\003\uff91" +
    "\005\uff91\007\uff91\032\uff91\040\uff91\042\uff91\044\uff91\045" +
    "\uff91\054\uff91\057\uff91\060\uff91\063\uff91\001\002\000\026" +
    "\003\150\005\031\007\030\032\032\042\036\044\020\054" +
    "\147\057\017\060\040\063\035\001\002\000\036\003\uff90" +
    "\005\uff90\007\uff90\032\uff90\033\uff90\035\uff90\040\uff90\042" +
    "\uff90\044\uff90\045\uff90\054\uff90\057\uff90\060\uff90\063\uff90" +
    "\001\002\000\042\003\uff8f\005\uff8f\007\uff8f\032\uff8f\033" +
    "\uff8f\035\uff8f\040\uff8f\042\uff8f\044\uff8f\045\uff8f\046\uffef" +
    "\053\uffed\054\uff8f\057\uff8f\060\uff8f\063\uff8f\001\002\000" +
    "\004\046\154\001\002\000\004\053\144\001\002\000\032" +
    "\003\uffec\005\uffec\007\uffec\032\uffec\040\uffec\042\uffec\044" +
    "\uffec\045\uffec\054\uffec\057\uffec\060\uffec\063\uffec\001\002" +
    "\000\032\003\uffee\005\uffee\007\uffee\032\uffee\040\uffee\042" +
    "\uffee\044\uffee\045\uffee\054\uffee\057\uffee\060\uffee\063\uffee" +
    "\001\002\000\004\046\ufff1\001\002\000\006\046\167\047" +
    "\170\001\002\000\020\015\164\016\160\017\162\020\163" +
    "\021\161\046\uffd1\047\uffd1\001\002\000\022\004\uffc9\005" +
    "\uffc9\006\uffc9\007\uffc9\010\uffc9\044\uffc9\050\uffc9\061\uffc9" +
    "\001\002\000\022\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010" +
    "\uffc6\044\uffc6\050\uffc6\061\uffc6\001\002\000\022\004\uffc8" +
    "\005\uffc8\006\uffc8\007\uffc8\010\uffc8\044\uffc8\050\uffc8\061" +
    "\uffc8\001\002\000\022\004\uffc7\005\uffc7\006\uffc7\007\uffc7" +
    "\010\uffc7\044\uffc7\050\uffc7\061\uffc7\001\002\000\022\004" +
    "\uffca\005\uffca\006\uffca\007\uffca\010\uffca\044\uffca\050\uffca" +
    "\061\uffca\001\002\000\022\004\057\005\053\006\055\007" +
    "\045\010\054\044\052\050\060\061\056\001\002\000\006" +
    "\046\uffd3\047\uffd3\001\002\000\032\003\uffd4\005\uffd4\007" +
    "\uffd4\032\uffd4\040\uffd4\042\uffd4\044\uffd4\045\uffd4\054\uffd4" +
    "\057\uffd4\060\uffd4\063\uffd4\001\002\000\004\005\171\001" +
    "\002\000\020\015\164\016\160\017\162\020\163\021\161" +
    "\046\uffd0\047\uffd0\001\002\000\022\004\057\005\053\006" +
    "\055\007\045\010\054\044\052\050\060\061\056\001\002" +
    "\000\006\046\uffd2\047\uffd2\001\002\000\004\046\175\001" +
    "\002\000\032\003\ufff0\005\ufff0\007\ufff0\032\ufff0\040\ufff0" +
    "\042\ufff0\044\ufff0\045\ufff0\054\ufff0\057\ufff0\060\ufff0\063" +
    "\ufff0\001\002\000\010\003\uffbd\037\uffbd\054\uffbd\001\002" +
    "\000\004\053\203\001\002\000\004\005\201\001\002\000" +
    "\004\051\202\001\002\000\004\053\uffbb\001\002\000\010" +
    "\003\204\037\uffb4\054\uffb4\001\002\000\026\003\uffb6\005" +
    "\uffb6\007\uffb6\032\uffb6\040\uffb6\042\uffb6\044\uffb6\057\uffb6" +
    "\060\uffb6\063\uffb6\001\002\000\006\037\207\054\206\001" +
    "\002\000\032\003\uffbe\005\uffbe\007\uffbe\032\uffbe\040\uffbe" +
    "\042\uffbe\044\uffbe\045\uffbe\054\uffbe\057\uffbe\060\uffbe\063" +
    "\uffbe\001\002\000\010\004\221\010\220\041\217\001\002" +
    "\000\026\003\ufff4\005\ufff4\007\ufff4\032\ufff4\040\ufff4\042" +
    "\ufff4\044\ufff4\057\ufff4\060\ufff4\063\ufff4\001\002\000\026" +
    "\003\214\005\031\007\030\032\032\040\213\042\036\044" +
    "\020\057\017\060\040\063\035\001\002\000\006\037\uffb7" +
    "\054\uffb7\001\002\000\004\046\215\001\002\000\012\037" +
    "\uffb8\046\uffef\053\uffed\054\uffb8\001\002\000\006\037\uffb9" +
    "\054\uffb9\001\002\000\004\055\222\001\002\000\004\055" +
    "\uffb1\001\002\000\004\055\uffb2\001\002\000\004\055\uffb3" +
    "\001\002\000\026\003\uffba\005\uffba\007\uffba\032\uffba\040" +
    "\uffba\042\uffba\044\uffba\057\uffba\060\uffba\063\uffba\001\002" +
    "\000\026\003\ufff4\005\ufff4\007\ufff4\032\ufff4\040\ufff4\042" +
    "\ufff4\044\ufff4\057\ufff4\060\ufff4\063\ufff4\001\002\000\006" +
    "\037\uffb5\054\uffb5\001\002\000\010\003\204\037\uffb4\054" +
    "\uffb4\001\002\000\006\037\207\054\227\001\002\000\032" +
    "\003\uffbc\005\uffbc\007\uffbc\032\uffbc\040\uffbc\042\uffbc\044" +
    "\uffbc\045\uffbc\054\uffbc\057\uffbc\060\uffbc\063\uffbc\001\002" +
    "\000\004\046\231\001\002\000\004\054\uffd5\001\002\000" +
    "\004\053\144\001\002\000\036\003\uffad\005\uffad\007\uffad" +
    "\032\uffad\033\235\035\236\040\uffad\042\uffad\044\uffad\045" +
    "\uffad\054\uffad\057\uffad\060\uffad\063\uffad\001\002\000\032" +
    "\003\uffb0\005\uffb0\007\uffb0\032\uffb0\040\uffb0\042\uffb0\044" +
    "\uffb0\045\uffb0\054\uffb0\057\uffb0\060\uffb0\063\uffb0\001\002" +
    "\000\004\050\044\001\002\000\004\053\144\001\002\000" +
    "\032\003\uffae\005\uffae\007\uffae\032\uffae\040\uffae\042\uffae" +
    "\044\uffae\045\uffae\054\uffae\057\uffae\060\uffae\063\uffae\001" +
    "\002\000\004\053\144\001\002\000\036\003\uffad\005\uffad" +
    "\007\uffad\032\uffad\033\235\035\236\040\uffad\042\uffad\044" +
    "\uffad\045\uffad\054\uffad\057\uffad\060\uffad\063\uffad\001\002" +
    "\000\032\003\uffaf\005\uffaf\007\uffaf\032\uffaf\040\uffaf\042" +
    "\uffaf\044\uffaf\045\uffaf\054\uffaf\057\uffaf\060\uffaf\063\uffaf" +
    "\001\002\000\022\004\057\005\053\006\055\007\045\010" +
    "\054\044\052\050\060\061\056\001\002\000\004\046\245" +
    "\001\002\000\032\003\uffbf\005\uffbf\007\uffbf\032\uffbf\040" +
    "\uffbf\042\uffbf\044\uffbf\045\uffbf\054\uffbf\057\uffbf\060\uffbf" +
    "\063\uffbf\001\002\000\010\002\uffdd\003\uffdd\043\uffdd\001" +
    "\002\000\004\046\ufff3\001\002\000\004\046\251\001\002" +
    "\000\032\003\ufff2\005\ufff2\007\ufff2\032\ufff2\040\ufff2\042" +
    "\ufff2\044\ufff2\045\ufff2\054\ufff2\057\ufff2\060\ufff2\063\ufff2" +
    "\001\002\000\004\053\144\001\002\000\004\007\254\001" +
    "\002\000\004\005\266\001\002\000\004\047\256\001\002" +
    "\000\010\004\057\005\053\050\060\001\002\000\004\046" +
    "\263\001\002\000\004\052\261\001\002\000\010\004\057" +
    "\005\053\050\060\001\002\000\004\046\uff92\001\002\000" +
    "\010\004\057\005\053\050\060\001\002\000\004\051\265" +
    "\001\002\000\004\053\uff94\001\002\000\004\047\uff93\001" +
    "\002\000\032\003\uff95\005\uff95\007\uff95\032\uff95\040\uff95" +
    "\042\uff95\044\uff95\045\uff95\054\uff95\057\uff95\060\uff95\063" +
    "\uff95\001\002\000\026\003\ufff4\005\ufff4\007\ufff4\032\ufff4" +
    "\042\ufff4\044\ufff4\045\ufff4\057\ufff4\060\ufff4\063\ufff4\001" +
    "\002\000\026\003\273\005\031\007\030\032\032\042\036" +
    "\044\020\045\033\057\017\060\040\063\035\001\002\000" +
    "\004\054\274\001\002\000\006\046\uffef\053\uffed\001\002" +
    "\000\010\002\uffda\003\uffda\043\uffda\001\002\000\004\005" +
    "\303\001\002\000\006\003\uffe4\053\uffe4\001\002\000\004" +
    "\002\001\001\002\000\006\003\013\053\015\001\002\000" +
    "\010\002\uffe2\003\276\043\275\001\002\000\004\002\uffe3" +
    "\001\002\000\006\003\304\050\306\001\002\000\006\007" +
    "\uffe0\063\uffe0\001\002\000\006\003\013\053\015\001\002" +
    "\000\010\007\030\051\uffd6\063\035\001\002\000\004\051" +
    "\316\001\002\000\006\047\313\051\uffd7\001\002\000\004" +
    "\005\312\001\002\000\006\047\uffd9\051\uffd9\001\002\000" +
    "\006\007\030\063\035\001\002\000\004\005\315\001\002" +
    "\000\006\047\uffd8\051\uffd8\001\002\000\006\003\317\055" +
    "\320\001\002\000\006\003\uffde\053\uffde\001\002\000\006" +
    "\007\030\063\035\001\002\000\006\003\uffe1\053\uffe1\001" +
    "\002\000\010\002\uffe2\003\276\043\275\001\002\000\004" +
    "\002\uffe5\001\002\000\006\007\030\063\035\001\002\000" +
    "\006\003\uffdf\053\uffdf\001\002\000\006\003\013\053\015" +
    "\001\002\000\010\002\ufffd\003\ufffd\043\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\325\000\006\047\004\050\006\001\001\000\004\064" +
    "\325\001\001\000\004\034\276\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\041\013\001\001\000\004\073\267\001\001\000\002" +
    "\001\001\000\004\046\015\001\001\000\026\004\041\005" +
    "\022\021\026\025\025\037\023\042\021\051\040\052\020" +
    "\054\024\057\036\001\001\000\004\060\251\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\242" +
    "\001\001\000\004\017\231\001\001\000\016\002\227\007" +
    "\046\010\047\013\062\042\061\055\050\001\001\000\006" +
    "\067\150\070\151\001\001\000\002\001\001\000\004\032" +
    "\176\001\001\000\004\003\155\001\001\000\004\017\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\053" +
    "\144\001\001\000\020\002\045\007\046\010\047\013\062" +
    "\014\060\042\061\055\050\001\001\000\002\001\001\000" +
    "\004\016\130\001\001\000\002\001\001\000\004\011\114" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\002\075" +
    "\007\046\010\047\013\062\042\061\055\050\056\076\001" +
    "\001\000\002\001\001\000\010\007\073\010\047\013\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\064\001\001\000\004\013\070\001\001\000\002\001\001" +
    "\000\004\013\066\001\001\000\004\012\067\001\001\000" +
    "\002\001\001\000\004\012\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\002\101\007\046\010\047\013\062\042\061\055\050\001" +
    "\001\000\002\001\001\000\004\045\103\001\001\000\002" +
    "\001\001\000\022\002\105\007\046\010\047\013\062\042" +
    "\061\043\106\044\107\055\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\002\112\007\046\010\047\013\062\042\061\055\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\121\013\062\001\001\000\006\010\117" +
    "\013\062\001\001\000\004\011\120\001\001\000\002\001" +
    "\001\000\004\011\122\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\002\132\007\046\010\047" +
    "\013\062\042\061\055\050\001\001\000\002\001\001\000" +
    "\006\015\133\020\135\001\001\000\020\002\045\007\046" +
    "\010\047\013\062\014\137\042\061\055\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\007\141\010\047\013\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\046\145\001\001" +
    "\000\002\001\001\000\024\004\041\005\022\021\026\025" +
    "\025\042\021\051\040\052\020\054\024\057\036\001\001" +
    "\000\002\001\001\000\006\067\150\070\151\001\001\000" +
    "\002\001\001\000\004\053\152\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\066\173\001\001\000\002\001" +
    "\001\000\004\006\164\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\002\165\007\046\010\047\013\062\042\061" +
    "\055\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\171\001\001\000\016\002\172" +
    "\007\046\010\047\013\062\042\061\055\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\074\224\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\204\001\001" +
    "\000\004\075\222\001\001\000\004\027\207\001\001\000" +
    "\002\001\001\000\004\031\215\001\001\000\006\030\211" +
    "\046\210\001\001\000\024\004\041\005\022\021\026\025" +
    "\025\042\021\051\040\052\020\054\024\057\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\067\150\070" +
    "\151\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\030\223\046\210\001\001\000\002\001\001" +
    "\000\004\026\225\001\001\000\004\027\207\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\053\232\001\001\000\004\022\233\001\001\000\002\001" +
    "\001\000\004\017\237\001\001\000\004\053\236\001\001" +
    "\000\002\001\001\000\004\053\240\001\001\000\004\022" +
    "\241\001\001\000\002\001\001\000\016\002\243\007\046" +
    "\010\047\013\062\042\061\055\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\065\247" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\053" +
    "\266\001\001\000\004\061\254\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\007\257\010\047\013\062\062" +
    "\256\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\261\010\047\013\062\001\001\000\002\001\001\000" +
    "\010\007\263\010\047\013\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\046\270\001\001\000\026\004\041\005\022\021\026" +
    "\025\025\037\271\042\021\051\040\052\020\054\024\057" +
    "\036\001\001\000\002\001\001\000\006\067\150\070\151" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\071" +
    "\277\001\001\000\002\001\001\000\004\041\300\001\001" +
    "\000\004\034\301\001\001\000\002\001\001\000\004\040" +
    "\304\001\001\000\004\072\323\001\001\000\004\041\321" +
    "\001\001\000\010\035\307\036\306\057\310\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\057\313\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\057\320\001\001\000\002\001\001\000\004\034\322\001" +
    "\001\000\002\001\001\000\004\057\324\001\001\000\002" +
    "\001\001\000\004\041\326\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	Symbol next;
	public void report_error(String errorBody, Object info) {
		next = (Symbol)info;
		System.out.println("Next: " + next.value);
	}

	public void report_fatal_error(String errorBody, Object info) {
		next = (Symbol)info;
		System.out.println("Next: " + next.value);
		System.out.println("Unexpected Token");
	}

	public int error_sync_size(){
		return 1;
	}

	public void unrecovered_syntax_error(Symbol s){
		System.out.println("Unexpected token: " + next.value + " in line: " + next.left + "; column: " + next.right);
	}

	public void callError(int line, int column){
		if(next.sym == sym.leftParenthesis){
			printError(line,next.right - 1,"Missing function name");
		}else if(next.sym == sym.VariableName || next.sym == sym.Number || 
			next.sym == sym.STRING || next.sym == sym.BooleanValue){
			printError(line,next.right-1,"Missing '(' or ','");
		}else if(next.sym == sym.Delimeter || next.sym == sym.rightParenthesis){
			printError(line,column,"Syntax error in function parameter");
		}else if(next.sym == sym.EOL){
			printError(line,column,"Missing ')'");
		}
	}

	public void assignmentError(int line, int column){
		printError(line,column,"Syntax error un assigment");
	}

	public void missingCallOrTypeError(int line, int column){
		if(next.sym == sym.VariableName){
			printError(line,next.right - 1,"Syntax error in call or in variable type");		
		}else if(next.sym == sym.Assign ||next.sym == sym.MinusEqual ||next.sym == sym.PlusEqual ||
				next.sym == sym.DivEqual ||next.sym == sym.MultEqual){
			printError(line,next.right-1,"Syntax error in variable name");
		}else if(next.sym == sym.leftParenthesis){
			printError(line,column,"Missing for");
		}else if(next.sym == sym.Call || next.sym == sym.Type || next.sym == sym.ArrayType || 
				next.sym == sym.If ||next.sym == sym.For || next.sym == sym.While || next.sym == sym.Switch ||
				next.sym == sym.RightKey){
			printError(line,column,"Missing  '(' or '{'");
		}
	}

	public void structureError(int line, int column){
		if(next.sym == sym.leftParenthesis){
			printError(line,column,"Missing if/elseif or while or switch");	
		}else if(next.sym == sym.VariableName || next.sym == sym.Number || next.sym == sym.BooleanValue||
			next.sym == sym.STRING){
			printError(line,next.right-1,"Syntax error in comparison for structure or in function name");
		}else if(next.sym == sym.Equal || next.sym == sym.GreaterThan|| next.sym == sym.GreaterEqual||
			     next.sym == sym.LessThan || next.sym == sym.LessEqual ||next.sym == sym.NotEqual){
			printError(line,next.right-1,"Missing left value in comparison");
		}else if(next.sym == sym.And || next.sym == sym.Or || next.sym == sym.rightParenthesis){
			printError(line,next.right-1,"Missing right value in comparison");
		}else if(next.sym == sym.LeftKey){
			printError(line,column,"Missing ')' or else");
		}else if(next.sym == sym.Elseif || next.sym == sym.Else){
			printError(next.left+1,next.right,"Missing '}'");
		}
	}

	public void returnError(int line, int column){
		 if(sym.RightKey == next.sym){
			printError(next.left,column,"Syntax error in return");
		}else{
			printError(next.left-1,next.right,"Missing '}'");
		}
	}

	public void switchError(int line, int column){
		if(next.sym == sym.VariableName){
			printError(line,column,"Missing '('");
		}else if(next.sym == sym.rightParenthesis){
			printError(line,column,"Missing variable for switch");
		}else if(next.sym == sym.LeftKey){
			printError(line,column,"Missing ')'");
		}else if(next.sym == sym.Case){
			printError(line,column,"Missing '{'");
		}
	}

	public void caseHeaderError(int line, int column){
		if(next.sym == sym.Number || next.sym == sym.STRING || next.sym == sym.Default){
			printError(next.left+1,next.right-1,"Syntax error in case");
		}else if(next.sym == sym.TwoPoints){
			printError(next.left+1,next.right-1,"Missing case value");
		}else{
			printError(next.left+1,next.right-1,"Syntax error in case");
		}
	}

	public void caseEndingError(int line, int column){
		if(next.sym == sym.EOL){
			printError(line,next.right,"Syntax error in endcase");
		}else if(next.sym == sym.Case || next.sym == sym.RightKey){
			printError(line,next.right,"Syntax error in endcase");
		}
	}

	public void functionError(int line, int column, String word){
		if(word.equals("Function")){
			printError(line,next.right,"Syntax error in function name");	
		}else if(word.equals("BeforeType")){
			if(next.sym == sym.Type){
				printError(line,column,"Missing '(' or ',' or ':'");
			}else if(next.sym == sym.VariableName){
				printError(line,column,"Syntax error parameter types");
			}else if(next.sym == sym.Delimeter || next.sym == sym.rightParenthesis){
				printError(line,column,"Syntax error in parameters");
			}else if (next.sym == sym.TwoPoints) {
				printError(line,column,"Missing ')'");
			}		
		}else if(word.equals("Type")){
			printError(line,column,"Syntax error in return type");
		}
	}

	public void printError(int line, int column, String message){
		System.out.println("Syntax error in line: " + line + " Column: " + column + 
					"; "  + message);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico$actions {
  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // WhileForBody ::= LeftKey BODY error 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
				  		System.out.println("key2");
				  		parser.printError(eleft+1, eright+1, "Missing '}'");
				  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("WhileForBody",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // WhileForBody ::= LeftKey BODY RightKey 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("WhileForBody",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // WHILE ::= While ComparisonInParenthesis WhileForBody 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("WHILE",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // rangeFor ::= AddSub ThreePoints AddSub 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("rangeFor",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // declarationFor ::= Type VariableName 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declarationFor",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // paramsFor ::= leftParenthesis declarationFor Delimeter rangeFor EOL AddSub rightParenthesis 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("paramsFor",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // FOR ::= For paramsFor WhileForBody 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FOR",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // RelationalOperator ::= LessEqual 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("RelationalOperator",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // RelationalOperator ::= GreaterEqual 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("RelationalOperator",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // RelationalOperator ::= LessThan 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("RelationalOperator",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // RelationalOperator ::= GreaterThan 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("RelationalOperator",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // RelationalOperator ::= NotEqual 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("RelationalOperator",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // RelationalOperator ::= Equal 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("RelationalOperator",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // AndOr ::= Or 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AndOr",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // AndOr ::= And 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AndOr",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // MultipleComparison ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MultipleComparison",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // MultipleComparison ::= AndOr Comparison 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MultipleComparison",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Comparison ::= leftValue RelationalOperator leftValue MultipleComparison 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Comparison",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ComparisonInParenthesis ::= leftParenthesis Comparison rightParenthesis 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ComparisonInParenthesis",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ArithmeticOperation ::= leftParenthesis AddSub rightParenthesis 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ArithmeticOperation",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ArithmeticOperation ::= Number 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ArithmeticOperation",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ArithmeticOperation ::= VariableName 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ArithmeticOperation",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // MultipleMultDiv ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MultipleMultDiv",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // MultipleMultDiv ::= DivOP ArithmeticOperation MultipleMultDiv 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MultipleMultDiv",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // MultipleMultDiv ::= MultOP ArithmeticOperation MultipleMultDiv 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MultipleMultDiv",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // MultDiv ::= ArithmeticOperation MultipleMultDiv 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MultDiv",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // MultipleAddSub ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MultipleAddSub",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // MultipleAddSub ::= SubOP MultDiv MultipleAddSub 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MultipleAddSub",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // MultipleAddSub ::= AddOP MultDiv MultipleAddSub 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MultipleAddSub",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // AddSub ::= MultDiv MultipleAddSub 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AddSub",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ELSEIF ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ELSEIF",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ELSEIF ::= Else WhileForBody 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ELSEIF",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ELSEIF ::= Elseif ComparisonInParenthesis WhileForBody ELSEIF 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ELSEIF",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // IF ::= If ComparisonInParenthesis WhileForBody ELSEIF 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("IF",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CaseValues ::= Default 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CaseValues",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CaseValues ::= STRING 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CaseValues",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CaseValues ::= Number 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CaseValues",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CASE ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CASE",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CASE ::= error NT$9 CaseEnding 
            {
              String RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CASE",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$9 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

					System.out.println("CaseHeader");
					parser.caseHeaderError(eleft+1, eright+1);
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$9",59, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CASE ::= CASE CaseHeader CaseEnding 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CASE",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CaseEnding ::= BODY error 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
					System.out.println("Case ending");
					parser.caseEndingError(eleft+1, eright+1);
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CaseEnding",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CaseEnding ::= BODY Endcase EOL 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CaseEnding",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CaseHeader ::= Case CaseValues TwoPoints 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CaseHeader",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ComparisonSwitch ::= leftParenthesis VariableName rightParenthesis 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ComparisonSwitch",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SWITCH ::= Switch error NT$8 CASE RightKey 
            {
              String RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("SWITCH",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$8 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

				System.out.println("Switch");
				parser.switchError(eleft + 1, eright + 1);
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$8",58, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SWITCH ::= Switch ComparisonSwitch LeftKey CASE RightKey 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("SWITCH",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SingleAssignment ::= VariableName AssignmentOperator leftValue EOL 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("SingleAssignment",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Element ::= Element Delimeter leftValue 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Element",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Element ::= leftValue 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Element",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ArrayAssignment ::= LeftBracket Element RightBracket 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ArrayAssignment",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ArrayAssignment ::= Type LeftBracket AddSub RightBracket 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ArrayAssignment",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // VariableType ::= ArrayType 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VariableType",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // VariableType ::= Type 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VariableType",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // AssignmentOperator ::= DivEqual 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AssignmentOperator",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // AssignmentOperator ::= MultEqual 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AssignmentOperator",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // AssignmentOperator ::= MinusEqual 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AssignmentOperator",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // AssignmentOperator ::= PlusEqual 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AssignmentOperator",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // AssignmentOperator ::= Assign 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AssignmentOperator",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // leftValue ::= ArrayAssignment 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("leftValue",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // leftValue ::= CALL 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("leftValue",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // leftValue ::= STRING 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("leftValue",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // leftValue ::= BooleanValue 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("leftValue",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // leftValue ::= AddSub 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("leftValue",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Assignment ::= Assignment Delimeter VariableName 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Assignment",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Assignment ::= VariableName 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Assignment",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Assignment ::= Assignment Delimeter VariableName AssignmentOperator leftValue 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Assignment",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Assignment ::= VariableName AssignmentOperator leftValue 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Assignment",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Declaration ::= VariableType Assignment EOL 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Declaration",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // RETURN ::= Return leftValue EOL 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("RETURN",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ParamsOrEmpty ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ParamsOrEmpty",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ParamsOrEmpty ::= Params 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ParamsOrEmpty",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Params ::= Params Delimeter VariableType VariableName 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Params",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Params ::= VariableType VariableName 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Params",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FunctionBody ::= error NT$7 BODY RETURN RightKey 
            {
              String RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FunctionBody",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$7 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

				 	System.out.println("Fixing");
				 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$7",57, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FunctionBody ::= LeftKey BODY error 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
				 		System.out.println("return");
				 		parser.returnError(eleft+1,eright+1);
				 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FunctionBody",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FunctionBody ::= LeftKey BODY RETURN RightKey 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FunctionBody",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FunctionHeader ::= leftParenthesis ParamsOrEmpty rightParenthesis error 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
				   		System.out.println("Type");
			 			parser.functionError(eleft+1,eright+1,"Type");
				   	
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FunctionHeader",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FunctionHeader ::= error NT$6 VariableType 
            {
              String RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FunctionHeader",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$6 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

				   		System.out.println("BeforeType");
			 			parser.functionError(eleft+1,eright+1,"BeforeType");
				   	
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$6",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FunctionHeader ::= leftParenthesis ParamsOrEmpty rightParenthesis TwoPoints VariableType 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FunctionHeader",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FUNCTION ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FUNCTION",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FUNCTION ::= error NT$5 FunctionBody FUNCTION 
            {
              String RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FUNCTION",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$5 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

			 	System.out.println("Function");
			 	parser.functionError(eleft+1,eright+1,"Function");
			 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$5",55, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FUNCTION ::= Function VariableName FunctionHeader FunctionBody FUNCTION 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FUNCTION",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CallParamsOrEmpty ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CallParamsOrEmpty",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CallParamsOrEmpty ::= CallParams 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CallParamsOrEmpty",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CallParams ::= CallParams Delimeter leftValue 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CallParams",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CallParams ::= leftValue 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CallParams",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CallHeader ::= leftParenthesis CallParamsOrEmpty rightParenthesis 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CallHeader",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CALL ::= Call VariableName CallHeader EOL 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CALL",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ERROR ::= error NT$4 WhileForBody 
            {
              String RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ERROR",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$4 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

		  		System.out.println("While or For or if");
		  		parser.structureError(eleft+1, eright+1);
		  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$4",54, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ERROR ::= error NT$3 EOL 
            {
              String RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ERROR",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$3 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

		  		System.out.println("Missing Call or type");
		  		parser.missingCallOrTypeError(eleft + 1, eright +1);
		  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$3",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ERROR ::= VariableType error NT$2 EOL 
            {
              String RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ERROR",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$2 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

		  		System.out.println("Type error EOL");
		  		parser.assignmentError(eleft + 1, eright + 1);
		  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$2",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ERROR ::= Call error NT$1 EOL 
            {
              String RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ERROR",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$1 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

				System.out.println("Call error EOL");
				parser.callError(eleft + 1, eright + 1);
		  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$1",51, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BODY ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BODY",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // BODY ::= BODY WHILE 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BODY",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // BODY ::= BODY FOR 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BODY",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BODY ::= BODY SingleAssignment 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BODY",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BODY ::= BODY SWITCH 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BODY",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BODY ::= BODY IF 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BODY",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BODY ::= BODY CALL 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BODY",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BODY ::= BODY Declaration 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BODY",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BODY ::= BODY ERROR 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BODY",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // MAIN ::= error NT$0 FunctionBody 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MAIN",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

		 		System.out.println("Missing main");
		 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$0",50, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // MAIN ::= Main leftParenthesis rightParenthesis FunctionBody 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MAIN",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PROGRAM EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PROGRAM ::= MAIN FUNCTION 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PROGRAM",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

