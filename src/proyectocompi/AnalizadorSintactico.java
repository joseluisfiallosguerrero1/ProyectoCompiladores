
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Mar 30 16:46:18 CST 2018
//----------------------------------------------------

package proyectocompi;

import java.util.ArrayList;
import java_cup.runtime.*;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Mar 30 16:46:18 CST 2018
  */
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\163\000\002\045\004\000\002\002\004\000\002\044" +
    "\006\000\002\060\002\000\002\044\005\000\002\043\004" +
    "\000\002\043\004\000\002\043\004\000\002\043\004\000" +
    "\002\043\004\000\002\043\004\000\002\043\004\000\002" +
    "\043\004\000\002\043\002\000\002\061\002\000\002\051" +
    "\006\000\002\062\002\000\002\051\006\000\002\063\002" +
    "\000\002\051\005\000\002\064\002\000\002\051\005\000" +
    "\002\037\006\000\002\042\005\000\002\040\003\000\002" +
    "\040\005\000\002\041\003\000\002\041\002\000\002\031" +
    "\007\000\002\065\002\000\002\031\006\000\002\031\002" +
    "\000\002\035\007\000\002\066\002\000\002\035\005\000" +
    "\002\035\006\000\002\036\006\000\002\036\005\000\002" +
    "\067\002\000\002\036\007\000\002\032\004\000\002\032" +
    "\006\000\002\033\003\000\002\033\002\000\002\034\005" +
    "\000\002\005\005\000\002\003\005\000\002\003\007\000" +
    "\002\003\003\000\002\003\005\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\054\003\000" +
    "\002\054\003\000\002\052\006\000\002\052\005\000\002" +
    "\053\003\000\002\053\005\000\002\004\006\000\002\023" +
    "\007\000\002\070\002\000\002\023\007\000\002\030\005" +
    "\000\002\025\005\000\002\026\005\000\002\026\004\000" +
    "\002\024\005\000\002\071\002\000\002\024\005\000\002" +
    "\024\002\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\021\006\000\002\022\006\000\002\022\004" +
    "\000\002\022\002\000\002\007\004\000\002\011\005\000" +
    "\002\011\005\000\002\011\002\000\002\010\004\000\002" +
    "\012\005\000\002\012\005\000\002\012\002\000\002\013" +
    "\003\000\002\013\003\000\002\013\005\000\002\017\005" +
    "\000\002\014\006\000\002\020\004\000\002\020\002\000" +
    "\002\015\003\000\002\015\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\046\005\000\002\055\011" +
    "\000\002\056\004\000\002\057\005\000\002\047\005\000" +
    "\002\050\005\000\002\050\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\325\000\006\003\004\054\006\001\002\000\006\003" +
    "\ufffe\051\ufffe\001\002\000\010\002\uffe2\003\276\041\275" +
    "\001\002\000\004\046\011\001\002\000\004\002\010\001" +
    "\002\000\004\002\000\001\002\000\004\047\012\001\002" +
    "\000\006\003\013\051\015\001\002\000\026\003\uffdb\005" +
    "\uffdb\007\uffdb\032\uffdb\040\uffdb\042\uffdb\043\uffdb\055\uffdb" +
    "\056\uffdb\061\uffdb\001\002\000\010\002\uffff\003\uffff\041" +
    "\uffff\001\002\000\026\003\ufff4\005\ufff4\007\ufff4\032\ufff4" +
    "\040\ufff4\042\ufff4\043\ufff4\055\ufff4\056\ufff4\061\ufff4\001" +
    "\002\000\026\003\034\005\031\007\030\032\032\040\036" +
    "\042\020\043\033\055\017\056\040\061\035\001\002\000" +
    "\004\046\253\001\002\000\006\003\247\005\103\001\002" +
    "\000\032\003\ufff5\005\ufff5\007\ufff5\032\ufff5\036\ufff5\040" +
    "\ufff5\042\ufff5\043\ufff5\052\ufff5\055\ufff5\056\ufff5\061\ufff5" +
    "\001\002\000\032\003\ufffa\005\ufffa\007\ufffa\032\ufffa\036" +
    "\ufffa\040\ufffa\042\ufffa\043\ufffa\052\ufffa\055\ufffa\056\ufffa" +
    "\061\ufffa\001\002\000\032\003\ufffb\005\ufffb\007\ufffb\032" +
    "\ufffb\036\ufffb\040\ufffb\042\ufffb\043\ufffb\052\ufffb\055\ufffb" +
    "\056\ufffb\061\ufffb\001\002\000\004\052\246\001\002\000" +
    "\032\003\ufffc\005\ufffc\007\ufffc\032\ufffc\036\ufffc\040\ufffc" +
    "\042\ufffc\043\ufffc\052\ufffc\055\ufffc\056\ufffc\061\ufffc\001" +
    "\002\000\032\003\ufff8\005\ufff8\007\ufff8\032\ufff8\036\ufff8" +
    "\040\ufff8\042\ufff8\043\ufff8\052\ufff8\055\ufff8\056\ufff8\061" +
    "\ufff8\001\002\000\032\003\ufff9\005\ufff9\007\ufff9\032\ufff9" +
    "\036\ufff9\040\ufff9\042\ufff9\043\ufff9\052\ufff9\055\ufff9\056" +
    "\ufff9\061\ufff9\001\002\000\010\003\uffc5\005\uffc5\051\uffc5" +
    "\001\002\000\014\015\164\016\160\017\162\020\163\021" +
    "\161\001\002\000\004\046\044\001\002\000\022\004\057" +
    "\005\053\006\055\007\045\010\054\042\052\046\060\057" +
    "\056\001\002\000\014\002\uffdc\003\uffdc\041\uffdc\044\uffef" +
    "\051\uffed\001\002\000\010\003\uffc4\005\uffc4\051\uffc4\001" +
    "\002\000\006\003\176\046\200\001\002\000\006\003\155" +
    "\005\157\001\002\000\004\046\044\001\002\000\032\003" +
    "\ufff6\005\ufff6\007\ufff6\032\ufff6\036\ufff6\040\ufff6\042\ufff6" +
    "\043\ufff6\052\ufff6\055\ufff6\056\ufff6\061\ufff6\001\002\000" +
    "\032\003\ufff7\005\ufff7\007\ufff7\032\ufff7\036\ufff7\040\ufff7" +
    "\042\ufff7\043\ufff7\052\ufff7\055\ufff7\056\ufff7\061\ufff7\001" +
    "\002\000\004\051\144\001\002\000\022\004\057\005\053" +
    "\006\055\007\045\010\054\042\052\046\060\057\056\001" +
    "\002\000\004\057\141\001\002\000\016\024\124\025\130" +
    "\026\125\027\132\030\127\031\126\001\002\000\032\022" +
    "\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf" +
    "\031\uffcf\044\uffcf\045\uffcf\047\uffcf\060\uffcf\001\002\000" +
    "\040\013\117\014\116\022\uffa9\023\uffa9\024\uffa9\025\uffa9" +
    "\026\uffa9\027\uffa9\030\uffa9\031\uffa9\044\uffa9\045\uffa9\047" +
    "\uffa9\050\uffa9\060\uffa9\001\002\000\032\022\uffcb\023\uffcb" +
    "\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\044" +
    "\uffcb\045\uffcb\047\uffcb\060\uffcb\001\002\000\004\005\103" +
    "\001\002\000\044\011\uffa4\012\uffa4\013\uffa4\014\uffa4\022" +
    "\uffa4\023\uffa4\024\uffa4\025\uffa4\026\uffa4\027\uffa4\030\uffa4" +
    "\031\uffa4\044\uffa4\045\uffa4\047\uffa4\050\uffa4\060\uffa4\001" +
    "\002\000\032\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd" +
    "\027\uffcd\030\uffcd\031\uffcd\044\uffcd\045\uffcd\047\uffcd\060" +
    "\uffcd\001\002\000\032\022\uffce\023\uffce\024\uffce\025\uffce" +
    "\026\uffce\027\uffce\030\uffce\031\uffce\044\uffce\045\uffce\047" +
    "\uffce\060\uffce\001\002\000\022\004\057\005\053\006\055" +
    "\007\045\010\054\042\052\046\060\057\056\001\002\000" +
    "\044\011\uffa3\012\uffa3\013\uffa3\014\uffa3\022\uffa3\023\uffa3" +
    "\024\uffa3\025\uffa3\026\uffa3\027\uffa3\030\uffa3\031\uffa3\044" +
    "\uffa3\045\uffa3\047\uffa3\050\uffa3\060\uffa3\001\002\000\010" +
    "\004\057\005\053\046\060\001\002\000\004\047\073\001" +
    "\002\000\032\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc" +
    "\027\uffcc\030\uffcc\031\uffcc\044\uffcc\045\uffcc\047\uffcc\060" +
    "\uffcc\001\002\000\044\011\064\012\066\013\uffa5\014\uffa5" +
    "\022\uffa5\023\uffa5\024\uffa5\025\uffa5\026\uffa5\027\uffa5\030" +
    "\uffa5\031\uffa5\044\uffa5\045\uffa5\047\uffa5\050\uffa5\060\uffa5" +
    "\001\002\000\010\004\057\005\053\046\060\001\002\000" +
    "\040\013\uffa8\014\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8" +
    "\026\uffa8\027\uffa8\030\uffa8\031\uffa8\044\uffa8\045\uffa8\047" +
    "\uffa8\050\uffa8\060\uffa8\001\002\000\010\004\057\005\053" +
    "\046\060\001\002\000\044\011\064\012\066\013\uffa5\014" +
    "\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5\026\uffa5\027\uffa5" +
    "\030\uffa5\031\uffa5\044\uffa5\045\uffa5\047\uffa5\050\uffa5\060" +
    "\uffa5\001\002\000\040\013\uffa6\014\uffa6\022\uffa6\023\uffa6" +
    "\024\uffa6\025\uffa6\026\uffa6\027\uffa6\030\uffa6\031\uffa6\044" +
    "\uffa6\045\uffa6\047\uffa6\050\uffa6\060\uffa6\001\002\000\044" +
    "\011\064\012\066\013\uffa5\014\uffa5\022\uffa5\023\uffa5\024" +
    "\uffa5\025\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5\044\uffa5" +
    "\045\uffa5\047\uffa5\050\uffa5\060\uffa5\001\002\000\040\013" +
    "\uffa7\014\uffa7\022\uffa7\023\uffa7\024\uffa7\025\uffa7\026\uffa7" +
    "\027\uffa7\030\uffa7\031\uffa7\044\uffa7\045\uffa7\047\uffa7\050" +
    "\uffa7\060\uffa7\001\002\000\004\051\uffa1\001\002\000\004" +
    "\047\075\001\002\000\044\011\uffa2\012\uffa2\013\uffa2\014" +
    "\uffa2\022\uffa2\023\uffa2\024\uffa2\025\uffa2\026\uffa2\027\uffa2" +
    "\030\uffa2\031\uffa2\044\uffa2\045\uffa2\047\uffa2\050\uffa2\060" +
    "\uffa2\001\002\000\006\045\uffc1\060\uffc1\001\002\000\006" +
    "\045\101\060\100\001\002\000\032\022\uffc2\023\uffc2\024" +
    "\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\044\uffc2" +
    "\045\uffc2\047\uffc2\060\uffc2\001\002\000\022\004\057\005" +
    "\053\006\055\007\045\010\054\042\052\046\060\057\056" +
    "\001\002\000\006\045\uffc0\060\uffc0\001\002\000\004\046" +
    "\105\001\002\000\004\044\114\001\002\000\024\004\057" +
    "\005\053\006\055\007\045\010\054\042\052\046\060\047" +
    "\uffe6\057\056\001\002\000\006\045\uffe9\047\uffe9\001\002" +
    "\000\006\045\112\047\uffe7\001\002\000\004\047\111\001" +
    "\002\000\004\044\uffea\001\002\000\022\004\057\005\053" +
    "\006\055\007\045\010\054\042\052\046\060\057\056\001" +
    "\002\000\006\045\uffe8\047\uffe8\001\002\000\062\003\uffeb" +
    "\005\uffeb\007\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026" +
    "\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\036\uffeb\040\uffeb" +
    "\042\uffeb\043\uffeb\044\uffeb\045\uffeb\047\uffeb\052\uffeb\055" +
    "\uffeb\056\uffeb\060\uffeb\061\uffeb\001\002\000\034\022\uffac" +
    "\023\uffac\024\uffac\025\uffac\026\uffac\027\uffac\030\uffac\031" +
    "\uffac\044\uffac\045\uffac\047\uffac\050\uffac\060\uffac\001\002" +
    "\000\010\004\057\005\053\046\060\001\002\000\010\004" +
    "\057\005\053\046\060\001\002\000\040\013\117\014\116" +
    "\022\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9\030" +
    "\uffa9\031\uffa9\044\uffa9\045\uffa9\047\uffa9\050\uffa9\060\uffa9" +
    "\001\002\000\034\022\uffab\023\uffab\024\uffab\025\uffab\026" +
    "\uffab\027\uffab\030\uffab\031\uffab\044\uffab\045\uffab\047\uffab" +
    "\050\uffab\060\uffab\001\002\000\040\013\117\014\116\022" +
    "\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9" +
    "\031\uffa9\044\uffa9\045\uffa9\047\uffa9\050\uffa9\060\uffa9\001" +
    "\002\000\034\022\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa" +
    "\027\uffaa\030\uffaa\031\uffaa\044\uffaa\045\uffaa\047\uffaa\050" +
    "\uffaa\060\uffaa\001\002\000\022\004\uff9b\005\uff9b\006\uff9b" +
    "\007\uff9b\010\uff9b\042\uff9b\046\uff9b\057\uff9b\001\002\000" +
    "\022\004\uff99\005\uff99\006\uff99\007\uff99\010\uff99\042\uff99" +
    "\046\uff99\057\uff99\001\002\000\022\004\uff96\005\uff96\006" +
    "\uff96\007\uff96\010\uff96\042\uff96\046\uff96\057\uff96\001\002" +
    "\000\022\004\uff97\005\uff97\006\uff97\007\uff97\010\uff97\042" +
    "\uff97\046\uff97\057\uff97\001\002\000\022\004\uff9a\005\uff9a" +
    "\006\uff9a\007\uff9a\010\uff9a\042\uff9a\046\uff9a\057\uff9a\001" +
    "\002\000\022\004\057\005\053\006\055\007\045\010\054" +
    "\042\052\046\060\057\056\001\002\000\022\004\uff98\005" +
    "\uff98\006\uff98\007\uff98\010\uff98\042\uff98\046\uff98\057\uff98" +
    "\001\002\000\010\022\135\023\137\047\uff9e\001\002\000" +
    "\022\004\057\005\053\006\055\007\045\010\054\042\052" +
    "\046\060\057\056\001\002\000\022\004\uff9d\005\uff9d\006" +
    "\uff9d\007\uff9d\010\uff9d\042\uff9d\046\uff9d\057\uff9d\001\002" +
    "\000\004\047\uffa0\001\002\000\022\004\uff9c\005\uff9c\006" +
    "\uff9c\007\uff9c\010\uff9c\042\uff9c\046\uff9c\057\uff9c\001\002" +
    "\000\004\047\uff9f\001\002\000\010\004\057\005\053\046" +
    "\060\001\002\000\004\060\143\001\002\000\032\022\uffc3" +
    "\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031" +
    "\uffc3\044\uffc3\045\uffc3\047\uffc3\060\uffc3\001\002\000\026" +
    "\003\ufff4\005\ufff4\007\ufff4\032\ufff4\040\ufff4\042\ufff4\052" +
    "\ufff4\055\ufff4\056\ufff4\061\ufff4\001\002\000\032\003\uff91" +
    "\005\uff91\007\uff91\032\uff91\036\uff91\040\uff91\042\uff91\043" +
    "\uff91\052\uff91\055\uff91\056\uff91\061\uff91\001\002\000\026" +
    "\003\150\005\031\007\030\032\032\040\036\042\020\052" +
    "\147\055\017\056\040\061\035\001\002\000\036\003\uff90" +
    "\005\uff90\007\uff90\032\uff90\033\uff90\034\uff90\036\uff90\040" +
    "\uff90\042\uff90\043\uff90\052\uff90\055\uff90\056\uff90\061\uff90" +
    "\001\002\000\042\003\uff8f\005\uff8f\007\uff8f\032\uff8f\033" +
    "\uff8f\034\uff8f\036\uff8f\040\uff8f\042\uff8f\043\uff8f\044\uffef" +
    "\051\uffed\052\uff8f\055\uff8f\056\uff8f\061\uff8f\001\002\000" +
    "\004\044\154\001\002\000\004\051\144\001\002\000\032" +
    "\003\uffec\005\uffec\007\uffec\032\uffec\036\uffec\040\uffec\042" +
    "\uffec\043\uffec\052\uffec\055\uffec\056\uffec\061\uffec\001\002" +
    "\000\032\003\uffee\005\uffee\007\uffee\032\uffee\036\uffee\040" +
    "\uffee\042\uffee\043\uffee\052\uffee\055\uffee\056\uffee\061\uffee" +
    "\001\002\000\004\044\ufff1\001\002\000\006\044\167\045" +
    "\170\001\002\000\020\015\164\016\160\017\162\020\163" +
    "\021\161\044\uffd1\045\uffd1\001\002\000\022\004\uffc9\005" +
    "\uffc9\006\uffc9\007\uffc9\010\uffc9\042\uffc9\046\uffc9\057\uffc9" +
    "\001\002\000\022\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010" +
    "\uffc6\042\uffc6\046\uffc6\057\uffc6\001\002\000\022\004\uffc8" +
    "\005\uffc8\006\uffc8\007\uffc8\010\uffc8\042\uffc8\046\uffc8\057" +
    "\uffc8\001\002\000\022\004\uffc7\005\uffc7\006\uffc7\007\uffc7" +
    "\010\uffc7\042\uffc7\046\uffc7\057\uffc7\001\002\000\022\004" +
    "\uffca\005\uffca\006\uffca\007\uffca\010\uffca\042\uffca\046\uffca" +
    "\057\uffca\001\002\000\022\004\057\005\053\006\055\007" +
    "\045\010\054\042\052\046\060\057\056\001\002\000\006" +
    "\044\uffd3\045\uffd3\001\002\000\032\003\uffd4\005\uffd4\007" +
    "\uffd4\032\uffd4\036\uffd4\040\uffd4\042\uffd4\043\uffd4\052\uffd4" +
    "\055\uffd4\056\uffd4\061\uffd4\001\002\000\004\005\171\001" +
    "\002\000\020\015\164\016\160\017\162\020\163\021\161" +
    "\044\uffd0\045\uffd0\001\002\000\022\004\057\005\053\006" +
    "\055\007\045\010\054\042\052\046\060\057\056\001\002" +
    "\000\006\044\uffd2\045\uffd2\001\002\000\004\044\175\001" +
    "\002\000\032\003\ufff0\005\ufff0\007\ufff0\032\ufff0\036\ufff0" +
    "\040\ufff0\042\ufff0\043\ufff0\052\ufff0\055\ufff0\056\ufff0\061" +
    "\ufff0\001\002\000\010\003\uffbd\035\uffbd\052\uffbd\001\002" +
    "\000\004\051\203\001\002\000\004\005\201\001\002\000" +
    "\004\047\202\001\002\000\004\051\uffbb\001\002\000\010" +
    "\003\204\035\uffb4\052\uffb4\001\002\000\026\003\uffb6\005" +
    "\uffb6\007\uffb6\032\uffb6\036\uffb6\040\uffb6\042\uffb6\055\uffb6" +
    "\056\uffb6\061\uffb6\001\002\000\006\035\207\052\206\001" +
    "\002\000\032\003\uffbe\005\uffbe\007\uffbe\032\uffbe\036\uffbe" +
    "\040\uffbe\042\uffbe\043\uffbe\052\uffbe\055\uffbe\056\uffbe\061" +
    "\uffbe\001\002\000\010\004\221\010\220\037\217\001\002" +
    "\000\026\003\ufff4\005\ufff4\007\ufff4\032\ufff4\036\ufff4\040" +
    "\ufff4\042\ufff4\055\ufff4\056\ufff4\061\ufff4\001\002\000\026" +
    "\003\214\005\031\007\030\032\032\036\213\040\036\042" +
    "\020\055\017\056\040\061\035\001\002\000\006\035\uffb7" +
    "\052\uffb7\001\002\000\004\044\215\001\002\000\012\035" +
    "\uffb8\044\uffef\051\uffed\052\uffb8\001\002\000\006\035\uffb9" +
    "\052\uffb9\001\002\000\004\053\222\001\002\000\004\053" +
    "\uffb1\001\002\000\004\053\uffb2\001\002\000\004\053\uffb3" +
    "\001\002\000\026\003\uffba\005\uffba\007\uffba\032\uffba\036" +
    "\uffba\040\uffba\042\uffba\055\uffba\056\uffba\061\uffba\001\002" +
    "\000\026\003\ufff4\005\ufff4\007\ufff4\032\ufff4\036\ufff4\040" +
    "\ufff4\042\ufff4\055\ufff4\056\ufff4\061\ufff4\001\002\000\006" +
    "\035\uffb5\052\uffb5\001\002\000\010\003\204\035\uffb4\052" +
    "\uffb4\001\002\000\006\035\207\052\227\001\002\000\032" +
    "\003\uffbc\005\uffbc\007\uffbc\032\uffbc\036\uffbc\040\uffbc\042" +
    "\uffbc\043\uffbc\052\uffbc\055\uffbc\056\uffbc\061\uffbc\001\002" +
    "\000\004\044\231\001\002\000\004\052\uffd5\001\002\000" +
    "\004\051\144\001\002\000\036\003\uffad\005\uffad\007\uffad" +
    "\032\uffad\033\235\034\236\036\uffad\040\uffad\042\uffad\043" +
    "\uffad\052\uffad\055\uffad\056\uffad\061\uffad\001\002\000\032" +
    "\003\uffb0\005\uffb0\007\uffb0\032\uffb0\036\uffb0\040\uffb0\042" +
    "\uffb0\043\uffb0\052\uffb0\055\uffb0\056\uffb0\061\uffb0\001\002" +
    "\000\004\046\044\001\002\000\004\051\144\001\002\000" +
    "\032\003\uffae\005\uffae\007\uffae\032\uffae\036\uffae\040\uffae" +
    "\042\uffae\043\uffae\052\uffae\055\uffae\056\uffae\061\uffae\001" +
    "\002\000\004\051\144\001\002\000\036\003\uffad\005\uffad" +
    "\007\uffad\032\uffad\033\235\034\236\036\uffad\040\uffad\042" +
    "\uffad\043\uffad\052\uffad\055\uffad\056\uffad\061\uffad\001\002" +
    "\000\032\003\uffaf\005\uffaf\007\uffaf\032\uffaf\036\uffaf\040" +
    "\uffaf\042\uffaf\043\uffaf\052\uffaf\055\uffaf\056\uffaf\061\uffaf" +
    "\001\002\000\022\004\057\005\053\006\055\007\045\010" +
    "\054\042\052\046\060\057\056\001\002\000\004\044\245" +
    "\001\002\000\032\003\uffbf\005\uffbf\007\uffbf\032\uffbf\036" +
    "\uffbf\040\uffbf\042\uffbf\043\uffbf\052\uffbf\055\uffbf\056\uffbf" +
    "\061\uffbf\001\002\000\010\002\uffdd\003\uffdd\041\uffdd\001" +
    "\002\000\004\044\ufff3\001\002\000\004\044\251\001\002" +
    "\000\032\003\ufff2\005\ufff2\007\ufff2\032\ufff2\036\ufff2\040" +
    "\ufff2\042\ufff2\043\ufff2\052\ufff2\055\ufff2\056\ufff2\061\ufff2" +
    "\001\002\000\004\051\144\001\002\000\004\007\254\001" +
    "\002\000\004\005\266\001\002\000\004\045\256\001\002" +
    "\000\010\004\057\005\053\046\060\001\002\000\004\044" +
    "\263\001\002\000\004\050\261\001\002\000\010\004\057" +
    "\005\053\046\060\001\002\000\004\044\uff92\001\002\000" +
    "\010\004\057\005\053\046\060\001\002\000\004\047\265" +
    "\001\002\000\004\051\uff94\001\002\000\004\045\uff93\001" +
    "\002\000\032\003\uff95\005\uff95\007\uff95\032\uff95\036\uff95" +
    "\040\uff95\042\uff95\043\uff95\052\uff95\055\uff95\056\uff95\061" +
    "\uff95\001\002\000\026\003\ufff4\005\ufff4\007\ufff4\032\ufff4" +
    "\040\ufff4\042\ufff4\043\ufff4\055\ufff4\056\ufff4\061\ufff4\001" +
    "\002\000\026\003\273\005\031\007\030\032\032\040\036" +
    "\042\020\043\033\055\017\056\040\061\035\001\002\000" +
    "\004\052\274\001\002\000\006\044\uffef\051\uffed\001\002" +
    "\000\010\002\uffda\003\uffda\041\uffda\001\002\000\004\005" +
    "\303\001\002\000\006\003\uffe4\051\uffe4\001\002\000\004" +
    "\002\001\001\002\000\006\003\013\051\015\001\002\000" +
    "\010\002\uffe2\003\276\041\275\001\002\000\004\002\uffe3" +
    "\001\002\000\006\003\304\046\306\001\002\000\006\007" +
    "\uffe0\061\uffe0\001\002\000\006\003\013\051\015\001\002" +
    "\000\010\007\030\047\uffd6\061\035\001\002\000\004\047" +
    "\316\001\002\000\006\045\313\047\uffd7\001\002\000\004" +
    "\005\312\001\002\000\006\045\uffd9\047\uffd9\001\002\000" +
    "\006\007\030\061\035\001\002\000\004\005\315\001\002" +
    "\000\006\045\uffd8\047\uffd8\001\002\000\006\003\317\053" +
    "\320\001\002\000\006\003\uffde\051\uffde\001\002\000\006" +
    "\007\030\061\035\001\002\000\006\003\uffe1\051\uffe1\001" +
    "\002\000\010\002\uffe2\003\276\041\275\001\002\000\004" +
    "\002\uffe5\001\002\000\006\007\030\061\035\001\002\000" +
    "\006\003\uffdf\051\uffdf\001\002\000\006\003\013\051\015" +
    "\001\002\000\010\002\ufffd\003\ufffd\041\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\325\000\006\044\004\045\006\001\001\000\004\060" +
    "\325\001\001\000\004\031\276\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\036\013\001\001\000\004\067\267\001\001\000\002" +
    "\001\001\000\004\043\015\001\001\000\026\004\041\005" +
    "\022\021\026\023\025\034\023\037\021\046\040\047\020" +
    "\051\024\054\036\001\001\000\004\055\251\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\242" +
    "\001\001\000\004\017\231\001\001\000\016\002\227\007" +
    "\046\010\047\013\062\037\061\052\050\001\001\000\006" +
    "\063\150\064\151\001\001\000\002\001\001\000\004\030" +
    "\176\001\001\000\004\003\155\001\001\000\004\017\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\050" +
    "\144\001\001\000\020\002\045\007\046\010\047\013\062" +
    "\014\060\037\061\052\050\001\001\000\002\001\001\000" +
    "\004\016\130\001\001\000\002\001\001\000\004\011\114" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\002\075" +
    "\007\046\010\047\013\062\037\061\052\050\053\076\001" +
    "\001\000\002\001\001\000\010\007\073\010\047\013\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\064\001\001\000\004\013\070\001\001\000\002\001\001" +
    "\000\004\013\066\001\001\000\004\012\067\001\001\000" +
    "\002\001\001\000\004\012\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\002\101\007\046\010\047\013\062\037\061\052\050\001" +
    "\001\000\002\001\001\000\004\042\103\001\001\000\002" +
    "\001\001\000\022\002\105\007\046\010\047\013\062\037" +
    "\061\040\106\041\107\052\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\002\112\007\046\010\047\013\062\037\061\052\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\121\013\062\001\001\000\006\010\117" +
    "\013\062\001\001\000\004\011\120\001\001\000\002\001" +
    "\001\000\004\011\122\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\002\132\007\046\010\047" +
    "\013\062\037\061\052\050\001\001\000\002\001\001\000" +
    "\006\015\133\020\135\001\001\000\020\002\045\007\046" +
    "\010\047\013\062\014\137\037\061\052\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\007\141\010\047\013\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\043\145\001\001" +
    "\000\002\001\001\000\024\004\041\005\022\021\026\023" +
    "\025\037\021\046\040\047\020\051\024\054\036\001\001" +
    "\000\002\001\001\000\006\063\150\064\151\001\001\000" +
    "\002\001\001\000\004\050\152\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\062\173\001\001\000\002\001" +
    "\001\000\004\006\164\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\002\165\007\046\010\047\013\062\037\061" +
    "\052\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\171\001\001\000\016\002\172" +
    "\007\046\010\047\013\062\037\061\052\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\070\224\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\204\001\001" +
    "\000\004\071\222\001\001\000\004\025\207\001\001\000" +
    "\002\001\001\000\004\027\215\001\001\000\006\026\211" +
    "\043\210\001\001\000\024\004\041\005\022\021\026\023" +
    "\025\037\021\046\040\047\020\051\024\054\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\063\150\064" +
    "\151\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\026\223\043\210\001\001\000\002\001\001" +
    "\000\004\024\225\001\001\000\004\025\207\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\050\232\001\001\000\004\022\233\001\001\000\002\001" +
    "\001\000\004\017\237\001\001\000\004\050\236\001\001" +
    "\000\002\001\001\000\004\050\240\001\001\000\004\022" +
    "\241\001\001\000\002\001\001\000\016\002\243\007\046" +
    "\010\047\013\062\037\061\052\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\061\247" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\050" +
    "\266\001\001\000\004\056\254\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\007\257\010\047\013\062\057" +
    "\256\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\261\010\047\013\062\001\001\000\002\001\001\000" +
    "\010\007\263\010\047\013\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\043\270\001\001\000\026\004\041\005\022\021\026" +
    "\023\025\034\271\037\021\046\040\047\020\051\024\054" +
    "\036\001\001\000\002\001\001\000\006\063\150\064\151" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\065" +
    "\277\001\001\000\002\001\001\000\004\036\300\001\001" +
    "\000\004\031\301\001\001\000\002\001\001\000\004\035" +
    "\304\001\001\000\004\066\323\001\001\000\004\036\321" +
    "\001\001\000\010\032\307\033\306\054\310\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\054\313\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\054\320\001\001\000\002\001\001\000\004\031\322\001" +
    "\001\000\002\001\001\000\004\054\324\001\001\000\002" +
    "\001\001\000\004\036\326\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	MyTree tree = new MyTree();
	Symbol next;
	TreeNode node = new TreeNode();
	ArrayList<String> functionNames = new ArrayList();
	ArrayList<TreeNode> operations = new ArrayList();
	ArrayList<TreeNode> body = new ArrayList();
	ArrayList<TreeNode> arrayElements = new ArrayList();
	ArrayList<TreeNode> params = new ArrayList();
	ArrayList<TreeNode> cases = new ArrayList();
	ArrayList<TreeNode> comparisons = new ArrayList();
	ArrayList<TreeNode> ifs = new ArrayList();

	public void report_error(String errorBody, Object info) {
		next = (Symbol)info;
		System.out.println("Next: " + next.value);
	}

	public void report_fatal_error(String errorBody, Object info) {
		next = (Symbol)info;
		System.out.println("Next: " + next.value);
		System.out.println("Unexpected Token");
	}

	public int error_sync_size(){
		return 1;
	}

	public void unrecovered_syntax_error(Symbol s){
		System.out.println("Unexpected token: " + next.value + " in line: " + next.left + "; column: " + next.right);
	}

	public void callError(int line, int column){
		if(next.sym == sym.leftParenthesis){
			printError(line,next.right - 1,"Missing function name");
		}else if(next.sym == sym.VariableName || next.sym == sym.Number || 
			next.sym == sym.STRING || next.sym == sym.BooleanValue){
			printError(line,next.right-1,"Missing '(' or ','");
		}else if(next.sym == sym.Delimeter || next.sym == sym.rightParenthesis){
			printError(line,column,"Syntax error in function parameter");
		}else if(next.sym == sym.EOL){
			printError(line,column,"Missing ')'");
		}
	}

	public void assignmentError(int line, int column){
		printError(line,column,"Syntax error un assigment");
	}

	public void missingCallOrTypeError(int line, int column){
		if(next.sym == sym.VariableName){
			printError(line,next.right - 1,"Syntax error in call or in variable type");		
		}else if(next.sym == sym.Assign ||next.sym == sym.MinusEqual ||next.sym == sym.PlusEqual ||
				next.sym == sym.DivEqual ||next.sym == sym.MultEqual){
			printError(line,next.right-1,"Syntax error in variable name");
		}else if(next.sym == sym.leftParenthesis){
			printError(line,column,"Missing for");
		}else if(next.sym == sym.Call || next.sym == sym.Type || next.sym == sym.ArrayType || 
				next.sym == sym.If ||next.sym == sym.For || next.sym == sym.While || next.sym == sym.Switch ||
				next.sym == sym.RightKey){
			printError(line,column,"Missing  '(' or '{'");
		}
	}

	public void structureError(int line, int column){
		if(next.sym == sym.leftParenthesis){
			printError(line,column,"Missing if/elseif or while or switch");	
		}else if(next.sym == sym.VariableName || next.sym == sym.Number || next.sym == sym.BooleanValue||
			next.sym == sym.STRING){
			printError(line,next.right-1,"Syntax error in comparison for structure or in function name");
		}else if(next.sym == sym.Equal || next.sym == sym.GreaterThan|| next.sym == sym.GreaterEqual||
			     next.sym == sym.LessThan || next.sym == sym.LessEqual ||next.sym == sym.NotEqual){
			printError(line,next.right-1,"Missing left value in comparison");
		}else if(next.sym == sym.And || next.sym == sym.Or || next.sym == sym.rightParenthesis){
			printError(line,next.right-1,"Missing right value in comparison");
		}else if(next.sym == sym.LeftKey){
			printError(line,column,"Missing ')' or else");
		}else if(next.sym == sym.Elseif || next.sym == sym.Else){
			printError(next.left+1,next.right,"Missing '}'");
		}
	}

	public void returnError(int line, int column){
		 if(sym.RightKey == next.sym){
			printError(next.left,column,"Syntax error in return");
		}else{
			printError(next.left-1,next.right,"Missing '}'");
		}
	}

	public void switchError(int line, int column){
		if(next.sym == sym.VariableName){
			printError(line,column,"Missing '('");
		}else if(next.sym == sym.rightParenthesis){
			printError(line,column,"Missing variable for switch");
		}else if(next.sym == sym.LeftKey){
			printError(line,column,"Missing ')'");
		}else if(next.sym == sym.Case){
			printError(line,column,"Missing '{'");
		}
	}

	public void caseHeaderError(int line, int column){
		if(next.sym == sym.Number || next.sym == sym.STRING || next.sym == sym.Default){
			printError(next.left+1,next.right-1,"Syntax error in case");
		}else if(next.sym == sym.TwoPoints){
			printError(next.left+1,next.right-1,"Missing case value");
		}else{
			printError(next.left+1,next.right-1,"Syntax error in case");
		}
	}

	public void caseEndingError(int line, int column){
		if(next.sym == sym.EOL){
			printError(line,next.right,"Syntax error in endcase");
		}else if(next.sym == sym.Case || next.sym == sym.RightKey){
			printError(line,next.right,"Syntax error in endcase");
		}
	}

	public void functionError(int line, int column, String word){
		if(word.equals("Function")){
			printError(line,next.right,"Syntax error in function name");	
		}else if(word.equals("BeforeType")){
			if(next.sym == sym.Type){
				printError(line,column,"Missing '(' or ',' or ':'");
			}else if(next.sym == sym.VariableName){
				printError(line,column,"Syntax error parameter types");
			}else if(next.sym == sym.Delimeter || next.sym == sym.rightParenthesis){
				printError(line,column,"Syntax error in parameters");
			}else if (next.sym == sym.TwoPoints) {
				printError(line,column,"Missing ')'");
			}		
		}else if(word.equals("Type")){
			printError(line,column,"Syntax error in return type");
		}
	}

	public void addMultipleNodes(TreeNode node, ArrayList<TreeNode> list,boolean reverse){
		if(reverse){
			for(int i = list.size()-1; i >=0; i--){
				addNodeToTree(node,list.get(i));
			}
		}else{
			for(int i = 0; i < list.size(); i++){
				addNodeToTree(node,list.get(i));
			}
		}
	}
	public void addNodeToTree(TreeNode parent, TreeNode node){
		node.setParent(parent);
		parent.addSon(node);
	}

	public void printError(int line, int column, String message){
		System.out.println("Syntax error in line: " + line + " Column: " + column + 
					"; "  + message);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico$actions {
  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // WhileForBody ::= LeftKey BODY error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
				  		System.out.println("key2");
				  		parser.printError(eleft+1, eright+1, "Missing '}'");
				  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("WhileForBody",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // WhileForBody ::= LeftKey BODY RightKey 
            {
              Object RESULT =null;
		
						TreeNode body = new TreeNode("Body", null);
						parser.addMultipleNodes(body,parser.body,false);
						parser.body = new ArrayList();
						RESULT = body;
				  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("WhileForBody",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // WHILE ::= While ComparisonInParenthesis WhileForBody 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("WHILE",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // rangeFor ::= AddSub ThreePoints AddSub 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("rangeFor",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // declarationFor ::= Type VariableName 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declarationFor",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // paramsFor ::= leftParenthesis declarationFor Delimeter rangeFor EOL AddSub rightParenthesis 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("paramsFor",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // FOR ::= For paramsFor WhileForBody 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FOR",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // RelationalOperator ::= LessEqual 
            {
              Object RESULT =null;
		RESULT = new TreeNode("<=",null);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("RelationalOperator",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // RelationalOperator ::= GreaterEqual 
            {
              Object RESULT =null;
		RESULT = new TreeNode(">=",null);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("RelationalOperator",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // RelationalOperator ::= LessThan 
            {
              Object RESULT =null;
		RESULT = new TreeNode("<",null);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("RelationalOperator",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // RelationalOperator ::= GreaterThan 
            {
              Object RESULT =null;
		RESULT = new TreeNode(">",null);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("RelationalOperator",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // RelationalOperator ::= NotEqual 
            {
              Object RESULT =null;
		RESULT = new TreeNode("!=",null);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("RelationalOperator",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // RelationalOperator ::= Equal 
            {
              Object RESULT =null;
		RESULT = new TreeNode("==",null);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("RelationalOperator",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // AndOr ::= Or 
            {
              Object RESULT =null;
		RESULT = parser.params.add(new TreeNode("OR", null));
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AndOr",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // AndOr ::= And 
            {
              Object RESULT =null;
		RESULT = parser.params.add(new TreeNode("AND", null));
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AndOr",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // MultipleComparison ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MultipleComparison",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // MultipleComparison ::= AndOr Comparison 
            {
              Object RESULT =null;
		int AOleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int AOright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object AO = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
							RESULT = AO;
					   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MultipleComparison",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Comparison ::= leftValue RelationalOperator leftValue MultipleComparison 
            {
              Object RESULT =null;
		int LVleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int LVright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object LV = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object operator = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int RVleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int RVright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object RV = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
						TreeNode comparison = new TreeNode("Comparison",null);
						TreeNode leftVal = new TreeNode("LeftValue", null);
						TreeNode rightVal = new TreeNode("RightValue", null);
						parser.addNodeToTree(comparison,leftVal);
						parser.addNodeToTree(comparison,(TreeNode)operator);
						parser.addNodeToTree(comparison,rightVal);
						parser.addNodeToTree(leftVal,(TreeNode)LV);
						parser.addNodeToTree(rightVal,(TreeNode)RV);
						parser.comparisons.add(comparison);
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Comparison",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ComparisonInParenthesis ::= leftParenthesis Comparison rightParenthesis 
            {
              Object RESULT =null;
		
									TreeNode condition = new TreeNode("Conditions", null);
									int contador = -1;
									if(parser.params.size()>0){
										contador = 0;
									}
									for(int i = parser.comparisons.size()-1; i >= 0; i--){
										parser.addNodeToTree(condition,parser.comparisons.get(i));
										if(contador>-1 && contador<parser.params.size()){
											parser.addNodeToTree(condition,parser.params.get(contador));
											contador++;
										}
									}
									parser.params = new ArrayList();
									parser.comparisons = new ArrayList();
									RESULT = condition;
							
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ComparisonInParenthesis",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ArithmeticOperation ::= leftParenthesis AddSub rightParenthesis 
            {
              Object RESULT =null;
		int ASleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int ASright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object AS = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                        	TreeNode parenthesis = new TreeNode("Parenthesis", null);
                        	parser.addNodeToTree(parenthesis,(TreeNode)AS);
                        	RESULT = parenthesis;
                        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ArithmeticOperation",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ArithmeticOperation ::= Number 
            {
              Object RESULT =null;
		int numberleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object number = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                        	TreeNode idNode = new TreeNode("number", null);
							TreeNode nameNode = new TreeNode(number.toString(),null);
							parser.addNodeToTree(idNode,nameNode);
                        	RESULT = idNode;
						
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ArithmeticOperation",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ArithmeticOperation ::= VariableName 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
							TreeNode idNode = new TreeNode("id", null);
							TreeNode nameNode = new TreeNode(name.toString(),null);
							parser.addNodeToTree(idNode,nameNode);  
							RESULT = idNode;
						
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ArithmeticOperation",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // MultipleMultDiv ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MultipleMultDiv",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // MultipleMultDiv ::= DivOP ArithmeticOperation MultipleMultDiv 
            {
              Object RESULT =null;
		int AOPleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int AOPright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object AOP = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
						parser.operations.add((TreeNode)AOP);
						parser.operations.add(new TreeNode("/",null));
					
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MultipleMultDiv",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // MultipleMultDiv ::= MultOP ArithmeticOperation MultipleMultDiv 
            {
              Object RESULT =null;
		int AOPleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int AOPright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object AOP = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
						parser.operations.add((TreeNode)AOP);
						parser.operations.add(new TreeNode("*",null));
					
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MultipleMultDiv",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // MultDiv ::= ArithmeticOperation MultipleMultDiv 
            {
              Object RESULT =null;
		int AOPleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int AOPright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object AOP = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				parser.operations.add((TreeNode)AOP);
				TreeNode multDiv = new TreeNode("MultDiv", null);
				parser.addMultipleNodes(multDiv,parser.operations,true);
				RESULT = multDiv;
				parser.operations = new ArrayList();
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MultDiv",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // MultipleAddSub ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MultipleAddSub",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // MultipleAddSub ::= SubOP MultDiv MultipleAddSub 
            {
              Object RESULT =null;
		int MDleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int MDright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object MD = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                   		parser.operations.add((TreeNode)MD);
                   		parser.operations.add(new TreeNode("-",null));
                   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MultipleAddSub",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // MultipleAddSub ::= AddOP MultDiv MultipleAddSub 
            {
              Object RESULT =null;
		int MDleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int MDright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object MD = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int MASleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int MASright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object MAS = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                   		parser.operations.add((TreeNode)MD);
                   		parser.operations.add(new TreeNode("+",null));
                   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MultipleAddSub",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // AddSub ::= MultDiv MultipleAddSub 
            {
              Object RESULT =null;
		int MDleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int MDright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object MD = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int MASleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int MASright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object MAS = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
		   		parser.operations.add((TreeNode)MD);
				TreeNode AddSub = new TreeNode("ArithmeticOperation", null);
				parser.addMultipleNodes(AddSub,parser.operations,true);
				RESULT = AddSub;
				parser.operations = new ArrayList();
		   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AddSub",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ELSEIF ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ELSEIF",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ELSEIF ::= Else WhileForBody 
            {
              Object RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
           		TreeNode elseNode = new TreeNode("Else",null);
           		parser.addNodeToTree(elseNode,(TreeNode)body);
           		parser.ifs.add(elseNode);
           
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ELSEIF",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ELSEIF ::= Elseif ComparisonInParenthesis WhileForBody ELSEIF 
            {
              Object RESULT =null;
		int CPleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int CPright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object CP = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
				TreeNode elseif = new TreeNode("ElseIf", null);
				parser.addNodeToTree(elseif,(TreeNode)CP);
				parser.addNodeToTree(elseif,(TreeNode)body);
           		parser.ifs.add(elseif);
	       
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ELSEIF",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // IF ::= If ComparisonInParenthesis WhileForBody ELSEIF 
            {
              Object RESULT =null;
		int CPleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int CPright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object CP = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
			TreeNode ifNode = new TreeNode("If", null);
			parser.addNodeToTree(ifNode,(TreeNode)CP);
			parser.addNodeToTree(ifNode,(TreeNode)body);
			parser.addMultipleNodes(ifNode,parser.ifs,true);
			parser.ifs = new ArrayList();
			RESULT =ifNode;
	   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("IF",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CaseValues ::= Default 
            {
              Object RESULT =null;
		int defleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int defright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object def = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = new TreeNode(def.toString(), null);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CaseValues",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CaseValues ::= STRING 
            {
              Object RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object string = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = new TreeNode(string.toString(), null);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CaseValues",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CaseValues ::= Number 
            {
              Object RESULT =null;
		int numberleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object number = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = new TreeNode(number.toString(), null);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CaseValues",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CASE ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CASE",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CASE ::= error NT$9 CaseEnding 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CASE",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$9 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

					System.out.println("CaseHeader");
					parser.caseHeaderError(eleft+1, eright+1);
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$9",55, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CASE ::= CASE CaseHeader CaseEnding 
            {
              Object RESULT =null;
		int headerleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int headerright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object header = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int endingleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int endingright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ending = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
				TreeNode node = new TreeNode("Case",null);
				parser.addNodeToTree(node,(TreeNode)header);
				parser.addNodeToTree(node,(TreeNode)ending);
				parser.cases.add(node);
		 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CASE",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CaseEnding ::= BODY error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
					System.out.println("Case ending");
					parser.caseEndingError(eleft+1, eright+1);
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CaseEnding",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CaseEnding ::= BODY Endcase EOL 
            {
              Object RESULT =null;
		
					TreeNode body = new TreeNode("Body", null);
					parser.addMultipleNodes(body,parser.body,false);
					RESULT = body;
					parser.body = new ArrayList();
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CaseEnding",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CaseHeader ::= Case CaseValues TwoPoints 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
					TreeNode node = new TreeNode("Value", null);
					parser.addNodeToTree(node,(TreeNode)value);
					RESULT = node;
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CaseHeader",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ComparisonSwitch ::= leftParenthesis VariableName rightParenthesis 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
							TreeNode node = new TreeNode("switchVariable",null);
							TreeNode nameNode = new TreeNode(name.toString(),null);
							parser.addNodeToTree(node,nameNode);
							RESULT = node;
					 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ComparisonSwitch",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SWITCH ::= Switch error NT$8 CASE RightKey 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("SWITCH",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$8 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

				System.out.println("Switch");
				parser.switchError(eleft + 1, eright + 1);
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$8",54, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SWITCH ::= Switch ComparisonSwitch LeftKey CASE RightKey 
            {
              Object RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object variable = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		
				TreeNode node = new TreeNode("Switch",null);
				parser.addNodeToTree(node, (TreeNode)variable);
				parser.addMultipleNodes(node,parser.cases,false);
				RESULT = node;
				parser.cases = new ArrayList();
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("SWITCH",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SingleAssignment ::= VariableName AssignmentOperator leftValue EOL 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object operator = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int LVleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int LVright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object LV = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
					 		TreeNode node = new TreeNode("Assignment",null);
					 		TreeNode id = new TreeNode("id", null);
					 		TreeNode value = new TreeNode("value", null);
					 		TreeNode nameNode = new TreeNode(name.toString(), null);
					 		TreeNode operatorNode = new TreeNode(operator.toString(), null);
					 		parser.addNodeToTree(node,id);
					 		parser.addNodeToTree(node,operatorNode);
					 		parser.addNodeToTree(node,value);
					 		parser.addNodeToTree(id,nameNode);
					 		parser.addNodeToTree(value,(TreeNode)LV);
					 		RESULT = node;
					 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("SingleAssignment",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Element ::= Element Delimeter leftValue 
            {
              Object RESULT =null;
		int LVleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int LVright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object LV = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
            	parser.arrayElements.add((TreeNode)LV);
            
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Element",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Element ::= leftValue 
            {
              Object RESULT =null;
		int LVleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int LVright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object LV = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
				parser.arrayElements.add((TreeNode)LV);
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Element",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ArrayAssignment ::= LeftBracket Element RightBracket 
            {
              Object RESULT =null;
		
                    	TreeNode node = new TreeNode("ArrayAssignment",null);
                    	TreeNode node2 = new TreeNode("Elements",null);
                    	parser.addNodeToTree(node,node2);
                    	parser.addMultipleNodes(node2,parser.arrayElements,false);
                    	RESULT = node;
                    	parser.arrayElements = new ArrayList();
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ArrayAssignment",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ArrayAssignment ::= Type LeftBracket AddSub RightBracket 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object size = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
						TreeNode node = new TreeNode("ArrayAssignment",null);
						TreeNode typeNode = new TreeNode("ArrayType",null);
						TreeNode sizeNode = new TreeNode("ArraySize",null);
						TreeNode node1 = new TreeNode(type.toString(),null);
						TreeNode node2 = (TreeNode)size;
						parser.addNodeToTree(node,typeNode);
						parser.addNodeToTree(node,sizeNode);
						parser.addNodeToTree(typeNode,node1);
						parser.addNodeToTree(sizeNode,node2);
						RESULT = node;
					
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ArrayAssignment",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // VariableType ::= ArrayType 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = new TreeNode(t.toString(),null);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VariableType",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // VariableType ::= Type 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = new TreeNode(t.toString(),null);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VariableType",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // AssignmentOperator ::= DivEqual 
            {
              Object RESULT =null;
		RESULT = new TreeNode("/=",null);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AssignmentOperator",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // AssignmentOperator ::= MultEqual 
            {
              Object RESULT =null;
		RESULT = new TreeNode("*=",null);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AssignmentOperator",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // AssignmentOperator ::= MinusEqual 
            {
              Object RESULT =null;
		RESULT = new TreeNode("-=",null);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AssignmentOperator",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // AssignmentOperator ::= PlusEqual 
            {
              Object RESULT =null;
		RESULT = new TreeNode("+=",null);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AssignmentOperator",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // AssignmentOperator ::= Assign 
            {
              Object RESULT =null;
		RESULT = new TreeNode(":=",null);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AssignmentOperator",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // leftValue ::= ArrayAssignment 
            {
              Object RESULT =null;
		int AAleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int AAright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object AA = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = AA;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("leftValue",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // leftValue ::= CALL 
            {
              Object RESULT =null;
		int Cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = C;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("leftValue",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // leftValue ::= STRING 
            {
              Object RESULT =null;
		int wordleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int wordright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object word = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
              		TreeNode Svalue = new TreeNode("String",null);
              		TreeNode value = new TreeNode(word.toString(),null); 
              		parser.addNodeToTree(Svalue,value);
              		RESULT = Svalue;
              
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("leftValue",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // leftValue ::= BooleanValue 
            {
              Object RESULT =null;
		int Booleanleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int Booleanright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object Boolean = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
              		TreeNode Bvalue = new TreeNode("Bolean",null);
              		TreeNode value = new TreeNode(Boolean.toString(),null); 
              		parser.addNodeToTree(Bvalue,value);
              		RESULT = Bvalue;
              
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("leftValue",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // leftValue ::= AddSub 
            {
              Object RESULT =null;
		int ASleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int ASright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object AS = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
					RESULT = AS;
			  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("leftValue",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Assignment ::= Assignment Delimeter VariableName 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Assignment",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Assignment ::= VariableName 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Assignment",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Assignment ::= Assignment Delimeter VariableName AssignmentOperator leftValue 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Assignment",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Assignment ::= VariableName AssignmentOperator leftValue 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object operator = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int leftValleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int leftValright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object leftVal = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
					TreeNode assignment = new TreeNode("Assignment",null);
					TreeNode VName = new TreeNode("id",null);
					TreeNode value = new TreeNode("value",null);
					TreeNode nameNode = new TreeNode(name.toString(),null);
					parser.addNodeToTree(assignment,VName);
					parser.addNodeToTree(assignment,(TreeNode)operator);
					parser.addNodeToTree(assignment,value);
					parser.addNodeToTree(VName,nameNode);
					parser.addNodeToTree(value,(TreeNode)leftVal);
					RESULT = assignment;
			   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Assignment",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Declaration ::= VariableType Assignment EOL 
            {
              Object RESULT =null;
		int VTypeleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int VTyperight = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object VType = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int Aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
					TreeNode declaration = new TreeNode("Declaration",null);
					TreeNode type = new TreeNode("Type",null);
					TreeNode typeNode = new TreeNode(VType.toString(),null);
					parser.addNodeToTree(declaration,type);
					parser.addNodeToTree(declaration,(TreeNode)A);
					parser.addNodeToTree(type,typeNode);
					RESULT = declaration;
				
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Declaration",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // RETURN ::= Return leftValue EOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("RETURN",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ParamsOrEmpty ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ParamsOrEmpty",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ParamsOrEmpty ::= Params 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ParamsOrEmpty",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Params ::= Params Delimeter VariableType VariableName 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Params",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Params ::= VariableType VariableName 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Params",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FunctionBody ::= error NT$7 BODY RETURN RightKey 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FunctionBody",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$7 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

				 	System.out.println("Fixing");
				 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$7",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FunctionBody ::= LeftKey BODY error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
				 		System.out.println("return");
				 		parser.returnError(eleft+1,eright+1);
				 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FunctionBody",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FunctionBody ::= LeftKey BODY RETURN RightKey 
            {
              Object RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FunctionBody",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FunctionHeader ::= leftParenthesis ParamsOrEmpty rightParenthesis error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
				   		System.out.println("Type");
			 			parser.functionError(eleft+1,eright+1,"Type");
				   	
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FunctionHeader",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FunctionHeader ::= error NT$6 VariableType 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FunctionHeader",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$6 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

				   		System.out.println("BeforeType");
			 			parser.functionError(eleft+1,eright+1,"BeforeType");
				   	
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$6",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FunctionHeader ::= leftParenthesis ParamsOrEmpty rightParenthesis TwoPoints VariableType 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FunctionHeader",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FUNCTION ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FUNCTION",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FUNCTION ::= error NT$5 FunctionBody FUNCTION 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FUNCTION",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$5 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

			 	System.out.println("Function");
			 	parser.functionError(eleft+1,eright+1,"Function");
			 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$5",51, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FUNCTION ::= Function VariableName FunctionHeader FunctionBody FUNCTION 
            {
              Object RESULT =null;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object functionName = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int Fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int Fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object F = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
					parser.functionNames.add(functionName.toString());
			 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FUNCTION",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CallParamsOrEmpty ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CallParamsOrEmpty",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CallParamsOrEmpty ::= CallParams 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CallParamsOrEmpty",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CallParams ::= CallParams Delimeter leftValue 
            {
              Object RESULT =null;
		int LVleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int LVright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object LV = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		parser.params.add((TreeNode)LV);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CallParams",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CallParams ::= leftValue 
            {
              Object RESULT =null;
		int LVleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int LVright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object LV = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		parser.params.add((TreeNode)LV);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CallParams",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CallHeader ::= leftParenthesis CallParamsOrEmpty rightParenthesis 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CallHeader",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CALL ::= Call VariableName CallHeader EOL 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
		 		TreeNode node = new TreeNode("Call",null);
		 		TreeNode node2 = new TreeNode("FunctionName",null);
		 		TreeNode node3 = new TreeNode("FunctionParams",null);
		 		TreeNode nameNode = new TreeNode(name.toString(),null);
		 		parser.addNodeToTree(node,node2);
		 		parser.addNodeToTree(node2,nameNode);

		 		if(parser.params.size() > 0){
		 			parser.addNodeToTree(node,node3);
		 			parser.addMultipleNodes(node3,parser.params,false);
		 		}
		 		RESULT = node;
		 		parser.params = new ArrayList();
		 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CALL",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ERROR ::= error NT$4 WhileForBody 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ERROR",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$4 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

		  		System.out.println("While or For or if");
		  		parser.structureError(eleft+1, eright+1);
		  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$4",50, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ERROR ::= error NT$3 EOL 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ERROR",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$3 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

		  		System.out.println("Missing Call or type");
		  		parser.missingCallOrTypeError(eleft + 1, eright +1);
		  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$3",49, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ERROR ::= VariableType error NT$2 EOL 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ERROR",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$2 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

		  		System.out.println("Type error EOL");
		  		parser.assignmentError(eleft + 1, eright + 1);
		  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$2",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ERROR ::= Call error NT$1 EOL 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ERROR",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$1 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

				System.out.println("Call error EOL");
				parser.callError(eleft + 1, eright + 1);
		  
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$1",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BODY ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BODY",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // BODY ::= BODY WHILE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BODY",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // BODY ::= BODY FOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BODY",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BODY ::= BODY SingleAssignment 
            {
              Object RESULT =null;
		int SAleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int SAright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object SA = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		parser.body.add((TreeNode)SA);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BODY",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BODY ::= BODY SWITCH 
            {
              Object RESULT =null;
		int Sleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int Sright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object S = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		parser.body.add((TreeNode)S);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BODY",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BODY ::= BODY IF 
            {
              Object RESULT =null;
		int Ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object I = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		parser.body.add((TreeNode)I);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BODY",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BODY ::= BODY CALL 
            {
              Object RESULT =null;
		int Cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		parser.body.add((TreeNode)C);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BODY",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BODY ::= BODY Declaration 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		parser.body.add((TreeNode)D);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BODY",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BODY ::= BODY ERROR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BODY",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // MAIN ::= error NT$0 FunctionBody 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MAIN",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

		 		System.out.println("Missing main");
		 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$0",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // MAIN ::= Main leftParenthesis rightParenthesis FunctionBody 
            {
              Object RESULT =null;
		
				TreeNode node = new TreeNode("Main",null);
				parser.addMultipleNodes(node,parser.body,false);
				RESULT = node;
		 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MAIN",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PROGRAM EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PROGRAM ::= MAIN FUNCTION 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
					DefaultTreeModel model = new DefaultTreeModel(new DefaultMutableTreeNode());
					parser.tree = new MyTree(new TreeNode("Program", null));
					parser.node = (TreeNode)m;
					parser.addNodeToTree(parser.tree.root, parser.node);

					for(int i = 0; i < parser.functionNames.size(); i++){
						parser.addNodeToTree(parser.tree.root, new TreeNode(parser.functionNames.get(i),parser.tree.root));
					}

					parser.tree.showTree(null,parser.tree.root,model,(DefaultMutableTreeNode)model.getRoot());
					parser.tree.tree.setVisible(true);
			
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PROGRAM",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

