
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Mar 10 16:01:56 CST 2018
//----------------------------------------------------

package proyectocompi;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Mar 10 16:01:56 CST 2018
  */
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\105\000\002\037\004\000\002\002\004\000\002\036" +
    "\010\000\002\035\005\000\002\035\005\000\002\035\004" +
    "\000\002\035\004\000\002\035\005\000\002\035\002\000" +
    "\002\031\007\000\002\032\004\000\002\033\004\000\002" +
    "\033\002\000\002\034\003\000\002\034\002\000\002\024" +
    "\016\000\002\024\002\000\002\025\005\000\002\026\004" +
    "\000\002\026\002\000\002\027\003\000\002\027\002\000" +
    "\002\030\005\000\002\030\002\000\002\006\004\000\002" +
    "\003\006\000\002\003\004\000\002\004\005\000\002\005" +
    "\004\000\002\005\002\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\021\017\000\002\022\011\000\002\022" +
    "\002\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\017\012\000\002\020\011\000\002\020\004\000" +
    "\002\020\002\000\002\010\005\000\002\010\005\000\002" +
    "\010\003\000\002\011\005\000\002\011\005\000\002\011" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\005" +
    "\000\002\013\006\000\002\014\004\000\002\014\002\000" +
    "\002\015\003\000\002\015\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\217\000\004\056\005\001\002\000\006\002\ufff1\043" +
    "\174\001\002\000\004\050\010\001\002\000\004\002\007" +
    "\001\002\000\004\002\000\001\002\000\004\051\011\001" +
    "\002\000\004\053\012\001\002\000\016\005\021\007\014" +
    "\032\015\042\013\044\017\054\ufff9\001\002\000\004\050" +
    "\150\001\002\000\004\005\141\001\002\000\004\050\102" +
    "\001\002\000\004\046\100\001\002\000\004\005\067\001" +
    "\002\000\004\046\065\001\002\000\014\015\037\016\034" +
    "\017\033\020\036\021\035\001\002\000\004\054\032\001" +
    "\002\000\030\005\021\007\014\032\015\033\ufff9\034\ufff9" +
    "\035\ufff9\040\ufff9\042\013\044\017\045\ufff9\054\ufff9\001" +
    "\002\000\030\005\021\007\014\032\015\033\ufff9\034\ufff9" +
    "\035\ufff9\040\ufff9\042\013\044\017\045\ufff9\054\ufff9\001" +
    "\002\000\004\046\026\001\002\000\030\005\021\007\014" +
    "\032\015\033\ufff9\034\ufff9\035\ufff9\040\ufff9\042\013\044" +
    "\017\045\ufff9\054\ufff9\001\002\000\016\033\ufffd\034\ufffd" +
    "\035\ufffd\040\ufffd\045\ufffd\054\ufffd\001\002\000\016\033" +
    "\ufffb\034\ufffb\035\ufffb\040\ufffb\045\ufffb\054\ufffb\001\002" +
    "\000\016\033\ufffc\034\ufffc\035\ufffc\040\ufffc\045\ufffc\054" +
    "\ufffc\001\002\000\006\002\uffff\043\uffff\001\002\000\016" +
    "\004\uffdd\005\uffdd\006\uffdd\010\uffdd\044\uffdd\050\uffdd\001" +
    "\002\000\016\004\uffde\005\uffde\006\uffde\010\uffde\044\uffde" +
    "\050\uffde\001\002\000\016\004\uffdb\005\uffdb\006\uffdb\010" +
    "\uffdb\044\uffdb\050\uffdb\001\002\000\016\004\uffdc\005\uffdc" +
    "\006\uffdc\010\uffdc\044\uffdc\050\uffdc\001\002\000\016\004" +
    "\uffdf\005\uffdf\006\uffdf\010\uffdf\044\uffdf\050\uffdf\001\002" +
    "\000\016\004\047\005\044\006\046\010\045\044\017\050" +
    "\050\001\002\000\004\046\uffe6\001\002\000\034\013\056" +
    "\014\054\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027" +
    "\uffe3\030\uffe3\031\uffe3\046\uffe3\047\uffe3\051\uffe3\001\002" +
    "\000\042\011\060\012\061\013\uffce\014\uffce\022\uffce\023" +
    "\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce" +
    "\046\uffce\047\uffce\051\uffce\055\uffce\001\002\000\042\011" +
    "\uffca\012\uffca\013\uffca\014\uffca\022\uffca\023\uffca\024\uffca" +
    "\025\uffca\026\uffca\027\uffca\030\uffca\031\uffca\046\uffca\047" +
    "\uffca\051\uffca\055\uffca\001\002\000\030\022\uffe1\023\uffe1" +
    "\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\046" +
    "\uffe1\047\uffe1\051\uffe1\001\002\000\030\022\uffe2\023\uffe2" +
    "\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\046" +
    "\uffe2\047\uffe2\051\uffe2\001\002\000\042\011\uffc9\012\uffc9" +
    "\013\uffc9\014\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026" +
    "\uffc9\027\uffc9\030\uffc9\031\uffc9\046\uffc9\047\uffc9\051\uffc9" +
    "\055\uffc9\001\002\000\010\004\047\005\044\050\050\001" +
    "\002\000\030\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0" +
    "\027\uffe0\030\uffe0\031\uffe0\046\uffe0\047\uffe0\051\uffe0\001" +
    "\002\000\042\011\uffcb\012\uffcb\013\uffcb\014\uffcb\022\uffcb" +
    "\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031" +
    "\uffcb\046\uffcb\047\uffcb\051\uffcb\055\uffcb\001\002\000\010" +
    "\013\056\014\054\051\055\001\002\000\010\004\047\005" +
    "\044\050\050\001\002\000\042\011\uffc8\012\uffc8\013\uffc8" +
    "\014\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027" +
    "\uffc8\030\uffc8\031\uffc8\046\uffc8\047\uffc8\051\uffc8\055\uffc8" +
    "\001\002\000\010\004\047\005\044\050\050\001\002\000" +
    "\042\011\060\012\061\013\uffd0\014\uffd0\022\uffd0\023\uffd0" +
    "\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\046" +
    "\uffd0\047\uffd0\051\uffd0\055\uffd0\001\002\000\010\004\047" +
    "\005\044\050\050\001\002\000\010\004\047\005\044\050" +
    "\050\001\002\000\042\011\uffcc\012\uffcc\013\uffcc\014\uffcc" +
    "\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030" +
    "\uffcc\031\uffcc\046\uffcc\047\uffcc\051\uffcc\055\uffcc\001\002" +
    "\000\042\011\uffcd\012\uffcd\013\uffcd\014\uffcd\022\uffcd\023" +
    "\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd" +
    "\046\uffcd\047\uffcd\051\uffcd\055\uffcd\001\002\000\042\011" +
    "\060\012\061\013\uffcf\014\uffcf\022\uffcf\023\uffcf\024\uffcf" +
    "\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\046\uffcf\047" +
    "\uffcf\051\uffcf\055\uffcf\001\002\000\030\005\021\007\014" +
    "\032\015\033\ufff9\034\ufff9\035\ufff9\040\ufff9\042\013\044" +
    "\017\045\ufff9\054\ufff9\001\002\000\016\033\ufffe\034\ufffe" +
    "\035\ufffe\040\ufffe\045\ufffe\054\ufffe\001\002\000\004\050" +
    "\070\001\002\000\020\004\047\005\044\006\046\010\045" +
    "\044\017\050\050\051\ufff3\001\002\000\006\047\076\051" +
    "\ufff5\001\002\000\004\051\ufff4\001\002\000\004\051\074" +
    "\001\002\000\030\022\ufff8\023\ufff8\024\ufff8\025\ufff8\026" +
    "\ufff8\027\ufff8\030\ufff8\031\ufff8\046\ufff8\047\ufff8\051\ufff8" +
    "\001\002\000\004\051\ufff7\001\002\000\016\004\047\005" +
    "\044\006\046\010\045\044\017\050\050\001\002\000\004" +
    "\051\ufff6\001\002\000\030\005\021\007\014\032\015\033" +
    "\ufff9\034\ufff9\035\ufff9\040\ufff9\042\013\044\017\045\ufff9" +
    "\054\ufff9\001\002\000\016\033\ufffa\034\ufffa\035\ufffa\040" +
    "\ufffa\045\ufffa\054\ufffa\001\002\000\016\004\047\005\044" +
    "\006\046\010\045\044\017\050\050\001\002\000\016\024" +
    "\123\025\127\026\124\027\131\030\126\031\125\001\002" +
    "\000\004\051\105\001\002\000\004\036\106\001\002\000" +
    "\022\005\021\007\014\032\015\033\ufff9\034\ufff9\035\ufff9" +
    "\042\013\044\017\001\002\000\010\033\110\034\uffd1\035" +
    "\112\001\002\000\004\050\115\001\002\000\004\034\114" +
    "\001\002\000\016\005\021\007\014\032\015\034\ufff9\042" +
    "\013\044\017\001\002\000\004\034\uffd2\001\002\000\030" +
    "\005\uffd4\007\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\040" +
    "\uffd4\042\uffd4\044\uffd4\045\uffd4\054\uffd4\001\002\000\016" +
    "\004\047\005\044\006\046\010\045\044\017\050\050\001" +
    "\002\000\004\051\117\001\002\000\004\036\120\001\002" +
    "\000\022\005\021\007\014\032\015\033\ufff9\034\ufff9\035" +
    "\ufff9\042\013\044\017\001\002\000\010\033\110\034\uffd1" +
    "\035\112\001\002\000\004\034\uffd3\001\002\000\016\004" +
    "\uffc2\005\uffc2\006\uffc2\010\uffc2\044\uffc2\050\uffc2\001\002" +
    "\000\016\004\uffc0\005\uffc0\006\uffc0\010\uffc0\044\uffc0\050" +
    "\uffc0\001\002\000\016\004\uffbd\005\uffbd\006\uffbd\010\uffbd" +
    "\044\uffbd\050\uffbd\001\002\000\016\004\uffbe\005\uffbe\006" +
    "\uffbe\010\uffbe\044\uffbe\050\uffbe\001\002\000\016\004\uffc1" +
    "\005\uffc1\006\uffc1\010\uffc1\044\uffc1\050\uffc1\001\002\000" +
    "\016\004\047\005\044\006\046\010\045\044\017\050\050" +
    "\001\002\000\016\004\uffbf\005\uffbf\006\uffbf\010\uffbf\044" +
    "\uffbf\050\uffbf\001\002\000\010\022\134\023\136\051\uffc5" +
    "\001\002\000\016\004\047\005\044\006\046\010\045\044" +
    "\017\050\050\001\002\000\016\004\uffc4\005\uffc4\006\uffc4" +
    "\010\uffc4\044\uffc4\050\uffc4\001\002\000\004\051\uffc7\001" +
    "\002\000\016\004\uffc3\005\uffc3\006\uffc3\010\uffc3\044\uffc3" +
    "\050\uffc3\001\002\000\004\051\uffc6\001\002\000\004\046" +
    "\uffe9\001\002\000\020\015\037\016\034\017\033\020\036" +
    "\021\035\046\uffe4\047\143\001\002\000\004\046\uffe7\001" +
    "\002\000\004\005\141\001\002\000\016\004\047\005\044" +
    "\006\046\010\045\044\017\050\050\001\002\000\006\046" +
    "\uffe4\047\143\001\002\000\004\046\uffe8\001\002\000\004" +
    "\046\uffe5\001\002\000\004\005\151\001\002\000\004\051" +
    "\152\001\002\000\004\053\153\001\002\000\004\037\uffd8" +
    "\001\002\000\004\037\155\001\002\000\016\004\047\005" +
    "\044\006\160\010\157\041\161\050\050\001\002\000\010" +
    "\013\056\014\054\055\uffd7\001\002\000\004\055\uffd5\001" +
    "\002\000\004\055\uffd6\001\002\000\004\055\167\001\002" +
    "\000\004\055\163\001\002\000\016\005\021\007\014\032" +
    "\015\040\ufff9\042\013\044\017\001\002\000\004\040\165" +
    "\001\002\000\004\046\166\001\002\000\004\037\uffd9\001" +
    "\002\000\016\005\021\007\014\032\015\040\ufff9\042\013" +
    "\044\017\001\002\000\004\040\171\001\002\000\004\046" +
    "\172\001\002\000\004\054\173\001\002\000\030\005\uffda" +
    "\007\uffda\032\uffda\033\uffda\034\uffda\035\uffda\040\uffda\042" +
    "\uffda\044\uffda\045\uffda\054\uffda\001\002\000\004\005\176" +
    "\001\002\000\004\002\001\001\002\000\004\050\177\001" +
    "\002\000\006\007\200\051\uffec\001\002\000\004\005\216" +
    "\001\002\000\004\051\203\001\002\000\004\051\uffed\001" +
    "\002\000\004\055\204\001\002\000\004\007\205\001\002" +
    "\000\004\053\206\001\002\000\020\005\021\007\014\032" +
    "\015\042\013\044\017\045\ufff9\054\ufff9\001\002\000\006" +
    "\045\210\054\uffea\001\002\000\016\004\047\005\044\006" +
    "\046\010\045\044\017\050\050\001\002\000\004\054\212" +
    "\001\002\000\006\002\ufff1\043\174\001\002\000\004\002" +
    "\ufff2\001\002\000\004\046\215\001\002\000\004\054\uffeb" +
    "\001\002\000\006\047\217\051\uffee\001\002\000\004\007" +
    "\200\001\002\000\004\051\ufff0\001\002\000\004\051\uffef" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\217\000\006\036\003\037\005\001\001\000\004\024" +
    "\174\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\004" +
    "\015\006\017\017\022\021\023\031\024\035\021\001\001" +
    "\000\002\001\001\000\004\003\137\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\037\001\001\000\002\001\001\000\016\004" +
    "\015\006\017\017\022\021\023\031\024\035\030\001\001" +
    "\000\016\004\015\006\017\017\022\021\023\031\024\035" +
    "\027\001\001\000\002\001\001\000\016\004\015\006\017" +
    "\017\022\021\023\031\024\035\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\002\040\010\041" +
    "\011\042\012\051\031\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
    "\052\011\042\012\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\063\012\051\001" +
    "\001\000\002\001\001\000\006\011\056\012\051\001\001" +
    "\000\002\001\001\000\004\012\062\001\001\000\004\012" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\004\015\006\017\017\022\021\023\031" +
    "\024\035\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\002\070\010\041\011\042\012\051\031\050\032" +
    "\071\034\072\001\001\000\004\033\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\002\070\010\041\011\042\012\051\031\050" +
    "\032\076\001\001\000\002\001\001\000\016\004\015\006" +
    "\017\017\022\021\023\031\024\035\100\001\001\000\002" +
    "\001\001\000\016\002\102\010\041\011\042\012\051\013" +
    "\103\031\050\001\001\000\004\016\127\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\004\015\006\017\017" +
    "\022\021\023\031\024\035\106\001\001\000\004\020\110" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\004" +
    "\015\006\017\017\022\021\023\031\024\035\112\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\002\102\010" +
    "\041\011\042\012\051\013\115\031\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\004\015\006\017\017" +
    "\022\021\023\031\024\035\120\001\001\000\004\020\121" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\002\131\010\041\011\042\012\051\031\050\001" +
    "\001\000\002\001\001\000\006\014\134\015\132\001\001" +
    "\000\016\002\102\010\041\011\042\012\051\013\136\031" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\141\007\143\001\001\000\002\001\001\000\004\003\146" +
    "\001\001\000\014\002\144\010\041\011\042\012\051\031" +
    "\050\001\001\000\004\005\145\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\153\001\001\000\002\001\001" +
    "\000\012\010\155\011\042\012\051\023\161\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\004\015\006\017\017" +
    "\022\021\023\031\024\035\163\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\004\015\006" +
    "\017\017\022\021\023\031\024\035\167\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\025\201\027\200\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\004\015\006\017\017" +
    "\022\021\023\031\024\035\206\001\001\000\004\030\210" +
    "\001\001\000\014\002\213\010\041\011\042\012\051\031" +
    "\050\001\001\000\002\001\001\000\004\024\212\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\217\001\001\000\004\025\220\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}





}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico$actions {
  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // RelationalOperator ::= LessEqual 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("RelationalOperator",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // RelationalOperator ::= GreaterEqual 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("RelationalOperator",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // RelationalOperator ::= LessThan 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("RelationalOperator",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // RelationalOperator ::= GreaterThan 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("RelationalOperator",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // RelationalOperator ::= NotEqual 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("RelationalOperator",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // RelationalOperator ::= Equal 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("RelationalOperator",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // AndOr ::= Or 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AndOr",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // AndOr ::= And 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AndOr",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // MultipleComparison ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MultipleComparison",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // MultipleComparison ::= AndOr Comparison 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MultipleComparison",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Comparison ::= leftValue RelationalOperator leftValue MultipleComparison 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Comparison",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ArithmeticOperation ::= leftParenthesis AddSub rightParenthesis 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ArithmeticOperation",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ArithmeticOperation ::= Number 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ArithmeticOperation",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ArithmeticOperation ::= VariableName 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ArithmeticOperation",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // MultDiv ::= ArithmeticOperation 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MultDiv",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // MultDiv ::= MultDiv DivOP ArithmeticOperation 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MultDiv",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // MultDiv ::= MultDiv MultOP ArithmeticOperation 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MultDiv",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // AddSub ::= MultDiv 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AddSub",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // AddSub ::= AddSub SubOP MultDiv 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AddSub",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // AddSub ::= AddSub AddOP MultDiv 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AddSub",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ELSEIF ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ELSEIF",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ELSEIF ::= Else BODY 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ELSEIF",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ELSEIF ::= Elseif leftParenthesis Comparison rightParenthesis Then BODY ELSEIF 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ELSEIF",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // IF ::= If leftParenthesis Comparison rightParenthesis Then BODY ELSEIF Endif 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("IF",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CaseValues ::= STRING 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CaseValues",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CaseValues ::= BooleanValue 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CaseValues",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CaseValues ::= AddSub 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CaseValues",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CASE ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CASE",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CASE ::= CASE Case CaseValues TwoPoints BODY Endcase EOL 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CASE",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SWITCH ::= Switch leftParenthesis VariableName rightParenthesis LeftKey CASE Case Default TwoPoints BODY Endcase EOL RightKey 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("SWITCH",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-12)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // AssignmentOperator ::= DivEqual 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AssignmentOperator",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // AssignmentOperator ::= MultEqual 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AssignmentOperator",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // AssignmentOperator ::= MinusEqual 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AssignmentOperator",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // AssignmentOperator ::= PlusEqual 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AssignmentOperator",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // AssignmentOperator ::= Assign 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AssignmentOperator",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // leftValue ::= CALL 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("leftValue",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // leftValue ::= STRING 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("leftValue",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // leftValue ::= BooleanValue 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("leftValue",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // leftValue ::= AddSub 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("leftValue",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // MultipleAssignment ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MultipleAssignment",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // MultipleAssignment ::= Delimeter Assignment 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MultipleAssignment",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SingleAssignment ::= VariableName AssignmentOperator leftValue 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("SingleAssignment",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Assignment ::= VariableName MultipleAssignment 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Assignment",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Assignment ::= VariableName AssignmentOperator leftValue MultipleAssignment 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Assignment",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Declaration ::= Type Assignment 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Declaration",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // RETURN ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("RETURN",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // RETURN ::= Return leftValue EOL 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("RETURN",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ParamsOrEmpty ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ParamsOrEmpty",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ParamsOrEmpty ::= Params 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ParamsOrEmpty",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // MultipleParams ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MultipleParams",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // MultipleParams ::= Delimeter Params 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MultipleParams",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Params ::= Type VariableName MultipleParams 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Params",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FUNCTION ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FUNCTION",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FUNCTION ::= Function VariableName leftParenthesis ParamsOrEmpty rightParenthesis TwoPoints Type LeftKey BODY RETURN RightKey FUNCTION 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FUNCTION",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CallParamsOrEmpty ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CallParamsOrEmpty",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CallParamsOrEmpty ::= CallParams 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CallParamsOrEmpty",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CallMultipleParams ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CallMultipleParams",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CallMultipleParams ::= Delimeter CallParams 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CallMultipleParams",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CallParams ::= leftValue CallMultipleParams 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CallParams",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CALL ::= Call VariableName leftParenthesis CallParamsOrEmpty rightParenthesis 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CALL",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BODY ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BODY",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BODY ::= SingleAssignment EOL BODY 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BODY",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BODY ::= SWITCH BODY 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BODY",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BODY ::= IF BODY 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BODY",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BODY ::= CALL EOL BODY 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BODY",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BODY ::= Declaration EOL BODY 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BODY",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // MAIN ::= Main leftParenthesis rightParenthesis LeftKey BODY RightKey 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MAIN",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PROGRAM EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PROGRAM ::= MAIN FUNCTION 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PROGRAM",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

