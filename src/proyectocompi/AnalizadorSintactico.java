
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Mar 18 11:47:01 CST 2018
//----------------------------------------------------

package proyectocompi;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Mar 18 11:47:01 CST 2018
  */
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\122\000\002\037\004\000\002\002\004\000\002\036" +
    "\010\000\002\042\002\000\002\036\011\000\002\043\002" +
    "\000\002\036\011\000\002\044\002\000\002\036\011\000" +
    "\002\045\002\000\002\036\011\000\002\036\010\000\002" +
    "\035\005\000\002\035\005\000\002\035\004\000\002\035" +
    "\004\000\002\035\005\000\002\035\004\000\002\035\004" +
    "\000\002\035\002\000\002\031\007\000\002\032\004\000" +
    "\002\033\004\000\002\033\002\000\002\034\003\000\002" +
    "\034\002\000\002\024\016\000\002\024\002\000\002\025" +
    "\005\000\002\026\004\000\002\026\002\000\002\027\003" +
    "\000\002\027\002\000\002\030\005\000\002\030\002\000" +
    "\002\006\004\000\002\003\006\000\002\003\004\000\002" +
    "\004\005\000\002\005\004\000\002\005\002\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\021\017\000\002" +
    "\022\011\000\002\022\002\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\017\012\000\002\020\011" +
    "\000\002\020\004\000\002\020\002\000\002\010\005\000" +
    "\002\010\005\000\002\010\003\000\002\011\005\000\002" +
    "\011\005\000\002\011\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\005\000\002\013\006\000\002\014\004" +
    "\000\002\014\002\000\002\015\003\000\002\015\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\040" +
    "\020\000\002\041\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\277\000\006\003\004\056\006\001\002\000\004\050" +
    "\ufffe\001\002\000\006\002\uffe6\043\246\001\002\000\006" +
    "\003\011\050\012\001\002\000\004\002\010\001\002\000" +
    "\004\002\000\001\002\000\004\051\ufffc\001\002\000\006" +
    "\003\013\051\014\001\002\000\004\053\ufffa\001\002\000" +
    "\006\003\015\053\016\001\002\000\022\005\ufff8\007\ufff8" +
    "\032\ufff8\042\ufff8\044\ufff8\054\ufff8\057\ufff8\060\ufff8\001" +
    "\002\000\024\003\uffee\005\030\007\017\032\023\042\020" +
    "\044\026\054\uffee\057\033\060\022\001\002\000\004\005" +
    "\223\001\002\000\004\050\176\001\002\000\036\003\uffee" +
    "\005\030\007\017\032\023\033\uffee\034\uffee\035\uffee\040" +
    "\uffee\042\020\044\026\045\uffee\054\uffee\057\033\060\022" +
    "\001\002\000\004\050\167\001\002\000\004\050\131\001" +
    "\002\000\036\003\uffee\005\030\007\017\032\023\033\uffee" +
    "\034\uffee\035\uffee\040\uffee\042\020\044\026\045\uffee\054" +
    "\uffee\057\033\060\022\001\002\000\004\046\126\001\002" +
    "\000\004\005\115\001\002\000\004\046\113\001\002\000" +
    "\014\015\104\016\101\017\100\020\103\021\102\001\002" +
    "\000\006\003\077\054\076\001\002\000\036\003\uffee\005" +
    "\030\007\017\032\023\033\uffee\034\uffee\035\uffee\040\uffee" +
    "\042\020\044\026\045\uffee\054\uffee\057\033\060\022\001" +
    "\002\000\004\050\041\001\002\000\036\003\uffee\005\030" +
    "\007\017\032\023\033\uffee\034\uffee\035\uffee\040\uffee\042" +
    "\020\044\026\045\uffee\054\uffee\057\033\060\022\001\002" +
    "\000\004\046\036\001\002\000\036\003\uffee\005\030\007" +
    "\017\032\023\033\uffee\034\uffee\035\uffee\040\uffee\042\020" +
    "\044\026\045\uffee\054\uffee\057\033\060\022\001\002\000" +
    "\020\003\ufff4\033\ufff4\034\ufff4\035\ufff4\040\ufff4\045\ufff4" +
    "\054\ufff4\001\002\000\020\003\ufff2\033\ufff2\034\ufff2\035" +
    "\ufff2\040\ufff2\045\ufff2\054\ufff2\001\002\000\004\007\042" +
    "\001\002\000\004\005\043\001\002\000\004\047\044\001" +
    "\002\000\010\004\047\005\051\050\052\001\002\000\044" +
    "\011\uffc0\012\uffc0\013\uffc0\014\uffc0\022\uffc0\023\uffc0\024" +
    "\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0\046\uffc0" +
    "\047\uffc0\051\uffc0\052\uffc0\055\uffc0\001\002\000\044\011" +
    "\060\012\061\013\uffc3\014\uffc3\022\uffc3\023\uffc3\024\uffc3" +
    "\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\046\uffc3\047" +
    "\uffc3\051\uffc3\052\uffc3\055\uffc3\001\002\000\044\011\uffbe" +
    "\012\uffbe\013\uffbe\014\uffbe\022\uffbe\023\uffbe\024\uffbe\025" +
    "\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\046\uffbe\047\uffbe" +
    "\051\uffbe\052\uffbe\055\uffbe\001\002\000\010\013\056\014" +
    "\054\052\065\001\002\000\044\011\uffbf\012\uffbf\013\uffbf" +
    "\014\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027" +
    "\uffbf\030\uffbf\031\uffbf\046\uffbf\047\uffbf\051\uffbf\052\uffbf" +
    "\055\uffbf\001\002\000\010\004\047\005\051\050\052\001" +
    "\002\000\010\013\056\014\054\051\055\001\002\000\010" +
    "\004\047\005\051\050\052\001\002\000\044\011\uffbd\012" +
    "\uffbd\013\uffbd\014\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd" +
    "\026\uffbd\027\uffbd\030\uffbd\031\uffbd\046\uffbd\047\uffbd\051" +
    "\uffbd\052\uffbd\055\uffbd\001\002\000\010\004\047\005\051" +
    "\050\052\001\002\000\044\011\060\012\061\013\uffc5\014" +
    "\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5" +
    "\030\uffc5\031\uffc5\046\uffc5\047\uffc5\051\uffc5\052\uffc5\055" +
    "\uffc5\001\002\000\010\004\047\005\051\050\052\001\002" +
    "\000\010\004\047\005\051\050\052\001\002\000\044\011" +
    "\uffc1\012\uffc1\013\uffc1\014\uffc1\022\uffc1\023\uffc1\024\uffc1" +
    "\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\046\uffc1\047" +
    "\uffc1\051\uffc1\052\uffc1\055\uffc1\001\002\000\044\011\uffc2" +
    "\012\uffc2\013\uffc2\014\uffc2\022\uffc2\023\uffc2\024\uffc2\025" +
    "\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\046\uffc2\047\uffc2" +
    "\051\uffc2\052\uffc2\055\uffc2\001\002\000\044\011\060\012" +
    "\061\013\uffc4\014\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4" +
    "\026\uffc4\027\uffc4\030\uffc4\031\uffc4\046\uffc4\047\uffc4\051" +
    "\uffc4\052\uffc4\055\uffc4\001\002\000\010\004\047\005\051" +
    "\050\052\001\002\000\010\013\056\014\054\047\067\001" +
    "\002\000\010\004\047\005\051\050\052\001\002\000\010" +
    "\013\056\014\054\051\071\001\002\000\004\053\072\001" +
    "\002\000\022\005\030\007\017\032\023\042\020\044\026" +
    "\054\uffee\057\033\060\022\001\002\000\004\054\074\001" +
    "\002\000\036\003\uffb1\005\uffb1\007\uffb1\032\uffb1\033\uffb1" +
    "\034\uffb1\035\uffb1\040\uffb1\042\uffb1\044\uffb1\045\uffb1\054" +
    "\uffb1\057\uffb1\060\uffb1\001\002\000\020\003\ufff3\033\ufff3" +
    "\034\ufff3\035\ufff3\040\ufff3\045\ufff3\054\ufff3\001\002\000" +
    "\006\002\uffff\043\uffff\001\002\000\006\002\ufff6\043\ufff6" +
    "\001\002\000\016\004\uffd2\005\uffd2\006\uffd2\010\uffd2\044" +
    "\uffd2\050\uffd2\001\002\000\016\004\uffd3\005\uffd3\006\uffd3" +
    "\010\uffd3\044\uffd3\050\uffd3\001\002\000\016\004\uffd0\005" +
    "\uffd0\006\uffd0\010\uffd0\044\uffd0\050\uffd0\001\002\000\016" +
    "\004\uffd1\005\uffd1\006\uffd1\010\uffd1\044\uffd1\050\uffd1\001" +
    "\002\000\016\004\uffd4\005\uffd4\006\uffd4\010\uffd4\044\uffd4" +
    "\050\uffd4\001\002\000\016\004\047\005\051\006\111\010" +
    "\110\044\026\050\052\001\002\000\004\046\uffdb\001\002" +
    "\000\034\013\056\014\054\022\uffd8\023\uffd8\024\uffd8\025" +
    "\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\046\uffd8\047\uffd8" +
    "\051\uffd8\001\002\000\030\022\uffd6\023\uffd6\024\uffd6\025" +
    "\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\046\uffd6\047\uffd6" +
    "\051\uffd6\001\002\000\030\022\uffd7\023\uffd7\024\uffd7\025" +
    "\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\046\uffd7\047\uffd7" +
    "\051\uffd7\001\002\000\030\022\uffd5\023\uffd5\024\uffd5\025" +
    "\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\046\uffd5\047\uffd5" +
    "\051\uffd5\001\002\000\036\003\uffee\005\030\007\017\032" +
    "\023\033\uffee\034\uffee\035\uffee\040\uffee\042\020\044\026" +
    "\045\uffee\054\uffee\057\033\060\022\001\002\000\020\003" +
    "\ufff5\033\ufff5\034\ufff5\035\ufff5\040\ufff5\045\ufff5\054\ufff5" +
    "\001\002\000\004\050\116\001\002\000\020\004\047\005" +
    "\051\006\111\010\110\044\026\050\052\051\uffe8\001\002" +
    "\000\006\047\124\051\uffea\001\002\000\004\051\uffe9\001" +
    "\002\000\004\051\122\001\002\000\030\022\uffed\023\uffed" +
    "\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed\031\uffed\046" +
    "\uffed\047\uffed\051\uffed\001\002\000\004\051\uffec\001\002" +
    "\000\016\004\047\005\051\006\111\010\110\044\026\050" +
    "\052\001\002\000\004\051\uffeb\001\002\000\036\003\uffee" +
    "\005\030\007\017\032\023\033\uffee\034\uffee\035\uffee\040" +
    "\uffee\042\020\044\026\045\uffee\054\uffee\057\033\060\022" +
    "\001\002\000\020\003\ufff1\033\ufff1\034\ufff1\035\ufff1\040" +
    "\ufff1\045\ufff1\054\ufff1\001\002\000\020\003\ufff0\033\ufff0" +
    "\034\ufff0\035\ufff0\040\ufff0\045\ufff0\054\ufff0\001\002\000" +
    "\016\004\047\005\051\006\111\010\110\044\026\050\052" +
    "\001\002\000\016\024\152\025\156\026\153\027\160\030" +
    "\155\031\154\001\002\000\004\051\134\001\002\000\004" +
    "\036\135\001\002\000\026\005\030\007\017\032\023\033" +
    "\uffee\034\uffee\035\uffee\042\020\044\026\057\033\060\022" +
    "\001\002\000\010\033\137\034\uffc6\035\141\001\002\000" +
    "\004\050\144\001\002\000\004\034\143\001\002\000\022" +
    "\005\030\007\017\032\023\034\uffee\042\020\044\026\057" +
    "\033\060\022\001\002\000\004\034\uffc7\001\002\000\036" +
    "\003\uffc9\005\uffc9\007\uffc9\032\uffc9\033\uffc9\034\uffc9\035" +
    "\uffc9\040\uffc9\042\uffc9\044\uffc9\045\uffc9\054\uffc9\057\uffc9" +
    "\060\uffc9\001\002\000\016\004\047\005\051\006\111\010" +
    "\110\044\026\050\052\001\002\000\004\051\146\001\002" +
    "\000\004\036\147\001\002\000\026\005\030\007\017\032" +
    "\023\033\uffee\034\uffee\035\uffee\042\020\044\026\057\033" +
    "\060\022\001\002\000\010\033\137\034\uffc6\035\141\001" +
    "\002\000\004\034\uffc8\001\002\000\016\004\uffb7\005\uffb7" +
    "\006\uffb7\010\uffb7\044\uffb7\050\uffb7\001\002\000\016\004" +
    "\uffb5\005\uffb5\006\uffb5\010\uffb5\044\uffb5\050\uffb5\001\002" +
    "\000\016\004\uffb2\005\uffb2\006\uffb2\010\uffb2\044\uffb2\050" +
    "\uffb2\001\002\000\016\004\uffb3\005\uffb3\006\uffb3\010\uffb3" +
    "\044\uffb3\050\uffb3\001\002\000\016\004\uffb6\005\uffb6\006" +
    "\uffb6\010\uffb6\044\uffb6\050\uffb6\001\002\000\016\004\047" +
    "\005\051\006\111\010\110\044\026\050\052\001\002\000" +
    "\016\004\uffb4\005\uffb4\006\uffb4\010\uffb4\044\uffb4\050\uffb4" +
    "\001\002\000\010\022\163\023\165\051\uffba\001\002\000" +
    "\016\004\047\005\051\006\111\010\110\044\026\050\052" +
    "\001\002\000\016\004\uffb9\005\uffb9\006\uffb9\010\uffb9\044" +
    "\uffb9\050\uffb9\001\002\000\004\051\uffbc\001\002\000\016" +
    "\004\uffb8\005\uffb8\006\uffb8\010\uffb8\044\uffb8\050\uffb8\001" +
    "\002\000\004\051\uffbb\001\002\000\016\004\047\005\051" +
    "\006\111\010\110\044\026\050\052\001\002\000\004\051" +
    "\171\001\002\000\004\053\172\001\002\000\022\005\030" +
    "\007\017\032\023\042\020\044\026\054\uffee\057\033\060" +
    "\022\001\002\000\004\054\174\001\002\000\036\003\uffb0" +
    "\005\uffb0\007\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\040" +
    "\uffb0\042\uffb0\044\uffb0\045\uffb0\054\uffb0\057\uffb0\060\uffb0" +
    "\001\002\000\020\003\uffef\033\uffef\034\uffef\035\uffef\040" +
    "\uffef\045\uffef\054\uffef\001\002\000\004\005\177\001\002" +
    "\000\004\051\200\001\002\000\004\053\201\001\002\000" +
    "\004\037\uffcd\001\002\000\004\037\203\001\002\000\016" +
    "\004\047\005\051\006\206\010\205\041\207\050\052\001" +
    "\002\000\010\013\056\014\054\055\uffcc\001\002\000\004" +
    "\055\uffca\001\002\000\004\055\uffcb\001\002\000\004\055" +
    "\215\001\002\000\004\055\211\001\002\000\022\005\030" +
    "\007\017\032\023\040\uffee\042\020\044\026\057\033\060" +
    "\022\001\002\000\004\040\213\001\002\000\004\046\214" +
    "\001\002\000\004\037\uffce\001\002\000\022\005\030\007" +
    "\017\032\023\040\uffee\042\020\044\026\057\033\060\022" +
    "\001\002\000\004\040\217\001\002\000\004\046\220\001" +
    "\002\000\004\054\221\001\002\000\036\003\uffcf\005\uffcf" +
    "\007\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\040\uffcf\042" +
    "\uffcf\044\uffcf\045\uffcf\054\uffcf\057\uffcf\060\uffcf\001\002" +
    "\000\004\046\uffde\001\002\000\020\015\104\016\101\017" +
    "\100\020\103\021\102\046\uffd9\047\225\001\002\000\004" +
    "\046\uffdc\001\002\000\004\005\223\001\002\000\016\004" +
    "\047\005\051\006\111\010\110\044\026\050\052\001\002" +
    "\000\006\046\uffd9\047\225\001\002\000\004\046\uffdd\001" +
    "\002\000\004\046\uffda\001\002\000\022\005\030\007\017" +
    "\032\023\042\020\044\026\054\uffee\057\033\060\022\001" +
    "\002\000\004\054\234\001\002\000\006\002\ufff7\043\ufff7" +
    "\001\002\000\004\053\236\001\002\000\022\005\030\007" +
    "\017\032\023\042\020\044\026\054\uffee\057\033\060\022" +
    "\001\002\000\004\054\240\001\002\000\006\002\ufff9\043" +
    "\ufff9\001\002\000\004\051\242\001\002\000\004\053\243" +
    "\001\002\000\022\005\030\007\017\032\023\042\020\044" +
    "\026\054\uffee\057\033\060\022\001\002\000\004\054\245" +
    "\001\002\000\006\002\ufffb\043\ufffb\001\002\000\004\005" +
    "\250\001\002\000\004\002\001\001\002\000\004\050\251" +
    "\001\002\000\006\007\252\051\uffe1\001\002\000\004\005" +
    "\270\001\002\000\004\051\255\001\002\000\004\051\uffe2" +
    "\001\002\000\004\055\256\001\002\000\004\007\257\001" +
    "\002\000\004\053\260\001\002\000\024\005\030\007\017" +
    "\032\023\042\020\044\026\045\uffee\054\uffee\057\033\060" +
    "\022\001\002\000\006\045\262\054\uffdf\001\002\000\016" +
    "\004\047\005\051\006\111\010\110\044\026\050\052\001" +
    "\002\000\004\054\264\001\002\000\006\002\uffe6\043\246" +
    "\001\002\000\004\002\uffe7\001\002\000\004\046\267\001" +
    "\002\000\004\054\uffe0\001\002\000\006\047\271\051\uffe3" +
    "\001\002\000\004\007\252\001\002\000\004\051\uffe5\001" +
    "\002\000\004\051\uffe4\001\002\000\004\050\275\001\002" +
    "\000\004\051\276\001\002\000\004\053\277\001\002\000" +
    "\022\005\030\007\017\032\023\042\020\044\026\054\uffee" +
    "\057\033\060\022\001\002\000\004\054\301\001\002\000" +
    "\006\002\ufffd\043\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\277\000\006\036\004\037\006\001\001\000\004\042" +
    "\273\001\001\000\004\024\246\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\043\240\001" +
    "\001\000\002\001\001\000\004\044\234\001\001\000\002" +
    "\001\001\000\004\045\231\001\001\000\022\004\024\006" +
    "\026\017\031\021\033\031\034\035\030\040\023\041\020" +
    "\001\001\000\004\003\221\001\001\000\002\001\001\000" +
    "\022\004\024\006\026\017\031\021\033\031\034\035\174" +
    "\040\023\041\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\004\024\006\026\017\031\021\033\031\034" +
    "\035\127\040\023\041\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\104\001\001" +
    "\000\002\001\001\000\022\004\024\006\026\017\031\021" +
    "\033\031\034\035\074\040\023\041\020\001\001\000\002" +
    "\001\001\000\022\004\024\006\026\017\031\021\033\031" +
    "\034\035\037\040\023\041\020\001\001\000\002\001\001" +
    "\000\022\004\024\006\026\017\031\021\033\031\034\035" +
    "\036\040\023\041\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\010\047\011\045\012\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\010\052\011\045\012\044" +
    "\001\001\000\002\001\001\000\006\011\063\012\044\001" +
    "\001\000\002\001\001\000\006\011\056\012\044\001\001" +
    "\000\002\001\001\000\004\012\062\001\001\000\004\012" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\010\065\011\045\012\044\001\001\000" +
    "\002\001\001\000\010\010\067\011\045\012\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\004\024\006" +
    "\026\017\031\021\033\031\034\035\072\040\023\041\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\002\105\010\106\011\045\012\044" +
    "\031\111\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\004\024\006\026\017\031\021\033\031\034\035\113\040" +
    "\023\041\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\002\116\010\106\011\045\012\044\031\111\032" +
    "\117\034\120\001\001\000\004\033\122\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\002\116\010\106\011\045\012\044\031\111" +
    "\032\124\001\001\000\002\001\001\000\022\004\024\006" +
    "\026\017\031\021\033\031\034\035\126\040\023\041\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\002" +
    "\131\010\106\011\045\012\044\013\132\031\111\001\001" +
    "\000\004\016\156\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\004\024\006\026\017\031\021\033\031\034" +
    "\035\135\040\023\041\020\001\001\000\004\020\137\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\004\024" +
    "\006\026\017\031\021\033\031\034\035\141\040\023\041" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\002\131\010\106\011\045\012\044\013\144\031\111\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\004\024" +
    "\006\026\017\031\021\033\031\034\035\147\040\023\041" +
    "\020\001\001\000\004\020\150\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\002\160\010\106" +
    "\011\045\012\044\031\111\001\001\000\002\001\001\000" +
    "\006\014\163\015\161\001\001\000\016\002\131\010\106" +
    "\011\045\012\044\013\165\031\111\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\002\131\010\106\011\045\012\044\013\167\031" +
    "\111\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\004\024\006\026\017\031\021\033\031\034\035\172\040" +
    "\023\041\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\201\001\001\000\002\001\001" +
    "\000\012\010\203\011\045\012\044\023\207\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\004\024\006\026\017" +
    "\031\021\033\031\034\035\211\040\023\041\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\004\024\006\026\017\031\021\033\031\034\035\215" +
    "\040\023\041\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\223\007\225\001\001\000\002\001\001\000" +
    "\004\003\230\001\001\000\014\002\226\010\106\011\045" +
    "\012\044\031\111\001\001\000\004\005\227\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\004\024\006\026" +
    "\017\031\021\033\031\034\035\232\040\023\041\020\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\004\024\006\026\017\031\021\033\031\034\035" +
    "\236\040\023\041\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\004" +
    "\024\006\026\017\031\021\033\031\034\035\243\040\023" +
    "\041\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\025\253\027\252\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\004\024\006\026\017\031\021" +
    "\033\031\034\035\260\040\023\041\020\001\001\000\004" +
    "\030\262\001\001\000\014\002\265\010\106\011\045\012" +
    "\044\031\111\001\001\000\002\001\001\000\004\024\264" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\271\001\001\000\004\025\272\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\004\024\006\026" +
    "\017\031\021\033\031\034\035\277\040\023\041\020\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public void report_error(String errorBody, Object info) {
		
	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico$actions {
  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // WHILE ::= While leftParenthesis Comparison rightParenthesis LeftKey BODY RightKey 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("WHILE",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // FOR ::= For leftParenthesis Type VariableName Delimeter AddSub ThreePoints AddSub Delimeter AddSub rightParenthesis LeftKey BODY RightKey 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FOR",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-13)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // RelationalOperator ::= LessEqual 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("RelationalOperator",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // RelationalOperator ::= GreaterEqual 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("RelationalOperator",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // RelationalOperator ::= LessThan 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("RelationalOperator",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // RelationalOperator ::= GreaterThan 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("RelationalOperator",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // RelationalOperator ::= NotEqual 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("RelationalOperator",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // RelationalOperator ::= Equal 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("RelationalOperator",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // AndOr ::= Or 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AndOr",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // AndOr ::= And 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AndOr",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // MultipleComparison ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MultipleComparison",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // MultipleComparison ::= AndOr Comparison 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MultipleComparison",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Comparison ::= leftValue RelationalOperator leftValue MultipleComparison 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Comparison",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ArithmeticOperation ::= leftParenthesis AddSub rightParenthesis 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ArithmeticOperation",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ArithmeticOperation ::= Number 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ArithmeticOperation",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ArithmeticOperation ::= VariableName 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ArithmeticOperation",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // MultDiv ::= ArithmeticOperation 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MultDiv",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // MultDiv ::= MultDiv DivOP ArithmeticOperation 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MultDiv",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // MultDiv ::= MultDiv MultOP ArithmeticOperation 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MultDiv",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // AddSub ::= MultDiv 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AddSub",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // AddSub ::= AddSub SubOP MultDiv 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AddSub",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // AddSub ::= AddSub AddOP MultDiv 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AddSub",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ELSEIF ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ELSEIF",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ELSEIF ::= Else BODY 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ELSEIF",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ELSEIF ::= Elseif leftParenthesis Comparison rightParenthesis Then BODY ELSEIF 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ELSEIF",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // IF ::= If leftParenthesis Comparison rightParenthesis Then BODY ELSEIF Endif 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("IF",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CaseValues ::= STRING 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CaseValues",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CaseValues ::= BooleanValue 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CaseValues",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CaseValues ::= AddSub 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CaseValues",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CASE ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CASE",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CASE ::= CASE Case CaseValues TwoPoints BODY Endcase EOL 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CASE",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SWITCH ::= Switch leftParenthesis VariableName rightParenthesis LeftKey CASE Case Default TwoPoints BODY Endcase EOL RightKey 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("SWITCH",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-12)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // AssignmentOperator ::= DivEqual 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AssignmentOperator",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // AssignmentOperator ::= MultEqual 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AssignmentOperator",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // AssignmentOperator ::= MinusEqual 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AssignmentOperator",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // AssignmentOperator ::= PlusEqual 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AssignmentOperator",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // AssignmentOperator ::= Assign 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("AssignmentOperator",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // leftValue ::= CALL 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("leftValue",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // leftValue ::= STRING 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("leftValue",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // leftValue ::= BooleanValue 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("leftValue",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // leftValue ::= AddSub 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("leftValue",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // MultipleAssignment ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MultipleAssignment",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // MultipleAssignment ::= Delimeter Assignment 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MultipleAssignment",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SingleAssignment ::= VariableName AssignmentOperator leftValue 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("SingleAssignment",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Assignment ::= VariableName MultipleAssignment 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Assignment",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Assignment ::= VariableName AssignmentOperator leftValue MultipleAssignment 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Assignment",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Declaration ::= Type Assignment 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Declaration",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // RETURN ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("RETURN",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // RETURN ::= Return leftValue EOL 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("RETURN",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ParamsOrEmpty ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ParamsOrEmpty",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ParamsOrEmpty ::= Params 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ParamsOrEmpty",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // MultipleParams ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MultipleParams",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // MultipleParams ::= Delimeter Params 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MultipleParams",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Params ::= Type VariableName MultipleParams 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Params",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FUNCTION ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FUNCTION",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FUNCTION ::= Function VariableName leftParenthesis ParamsOrEmpty rightParenthesis TwoPoints Type LeftKey BODY RETURN RightKey FUNCTION 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FUNCTION",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CallParamsOrEmpty ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CallParamsOrEmpty",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CallParamsOrEmpty ::= CallParams 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CallParamsOrEmpty",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CallMultipleParams ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CallMultipleParams",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CallMultipleParams ::= Delimeter CallParams 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CallMultipleParams",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CallParams ::= leftValue CallMultipleParams 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CallParams",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CALL ::= Call VariableName leftParenthesis CallParamsOrEmpty rightParenthesis 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CALL",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // BODY ::= 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BODY",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // BODY ::= WHILE BODY 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BODY",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // BODY ::= FOR BODY 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BODY",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // BODY ::= SingleAssignment EOL BODY 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BODY",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // BODY ::= SWITCH BODY 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BODY",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // BODY ::= IF BODY 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BODY",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BODY ::= CALL EOL BODY 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BODY",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // BODY ::= Declaration EOL BODY 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BODY",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // MAIN ::= Main leftParenthesis rightParenthesis LeftKey BODY error 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
		 		System.out.println("Error sintactico en la linea " + (eleft+1) + "; columna " + (eright+1) + ". Token } ausente");
		 	
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MAIN",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MAIN ::= Main leftParenthesis rightParenthesis error NT$3 BODY RightKey 
            {
              String RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MAIN",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$3 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

		 		System.out.println("Error sintactico en la linea " + (eleft+1) + "; columna " + (eright+1) + ". Token { ausente");
		 	
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$3",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MAIN ::= Main leftParenthesis error NT$2 LeftKey BODY RightKey 
            {
              String RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MAIN",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$2 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

		 		System.out.println("Error sintactico en la linea " + (eleft+1) + "; columna " + (eright+1) + ". Token ) ausente");
		 	
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$2",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // MAIN ::= Main error NT$1 rightParenthesis LeftKey BODY RightKey 
            {
              String RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MAIN",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$1 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

		 		System.out.println("Error sintactico en la linea " + (eleft+1) + "; columna " + (eright+1) + ". Token ( ausente");
		 	
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$1",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // MAIN ::= error NT$0 leftParenthesis rightParenthesis LeftKey BODY RightKey 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MAIN",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

		 		System.out.println("Error sintactico en la linea " + (eleft+1) + "; columna " + (eright+1) + ". Token Main ausente");
		 	
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$0",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // MAIN ::= Main leftParenthesis rightParenthesis LeftKey BODY RightKey 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MAIN",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PROGRAM EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PROGRAM ::= MAIN FUNCTION 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PROGRAM",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

