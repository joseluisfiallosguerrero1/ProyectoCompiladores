/* The following code was generated by JFlex 1.6.1 */

package proyectocompi;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/proyectocompi/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int STRING = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\23\1\24\1\46\1\46\1\46\22\0\1\23\1\42\3\0"+
    "\1\5\1\0\1\22\1\32\1\33\1\37\1\37\1\34\1\37\1\0"+
    "\1\4\12\44\1\43\1\25\1\41\1\40\1\41\2\0\32\45\1\26"+
    "\1\0\1\27\3\0\1\2\1\36\1\1\1\13\1\12\1\14\1\45"+
    "\1\21\1\10\2\45\1\3\1\35\1\16\1\17\2\45\1\7\1\20"+
    "\1\11\1\15\1\45\1\6\3\45\1\30\1\0\1\31\7\0\1\46"+
    "\44\0\1\45\12\0\1\45\4\0\1\45\5\0\27\45\1\0\37\45"+
    "\1\0\u01ca\45\4\0\14\45\16\0\5\45\7\0\1\45\1\0\1\45"+
    "\201\0\5\45\1\0\2\45\2\0\4\45\1\0\1\45\6\0\1\45"+
    "\1\0\3\45\1\0\1\45\1\0\24\45\1\0\123\45\1\0\213\45"+
    "\10\0\246\45\1\0\46\45\2\0\1\45\7\0\47\45\110\0\33\45"+
    "\5\0\3\45\55\0\53\45\25\0\12\44\4\0\2\45\1\0\143\45"+
    "\1\0\1\45\17\0\2\45\7\0\2\45\12\44\3\45\2\0\1\45"+
    "\20\0\1\45\1\0\36\45\35\0\131\45\13\0\1\45\16\0\12\44"+
    "\41\45\11\0\2\45\4\0\1\45\5\0\26\45\4\0\1\45\11\0"+
    "\1\45\3\0\1\45\27\0\31\45\107\0\23\45\121\0\66\45\3\0"+
    "\1\45\22\0\1\45\7\0\12\45\4\0\12\44\1\0\20\45\4\0"+
    "\10\45\2\0\2\45\2\0\26\45\1\0\7\45\1\0\1\45\3\0"+
    "\4\45\3\0\1\45\20\0\1\45\15\0\2\45\1\0\3\45\4\0"+
    "\12\44\2\45\23\0\6\45\4\0\2\45\2\0\26\45\1\0\7\45"+
    "\1\0\2\45\1\0\2\45\1\0\2\45\37\0\4\45\1\0\1\45"+
    "\7\0\12\44\2\0\3\45\20\0\11\45\1\0\3\45\1\0\26\45"+
    "\1\0\7\45\1\0\2\45\1\0\5\45\3\0\1\45\22\0\1\45"+
    "\17\0\2\45\4\0\12\44\25\0\10\45\2\0\2\45\2\0\26\45"+
    "\1\0\7\45\1\0\2\45\1\0\5\45\3\0\1\45\36\0\2\45"+
    "\1\0\3\45\4\0\12\44\1\0\1\45\21\0\1\45\1\0\6\45"+
    "\3\0\3\45\1\0\4\45\3\0\2\45\1\0\1\45\1\0\2\45"+
    "\3\0\2\45\3\0\3\45\3\0\14\45\26\0\1\45\25\0\12\44"+
    "\25\0\10\45\1\0\3\45\1\0\27\45\1\0\20\45\3\0\1\45"+
    "\32\0\2\45\6\0\2\45\4\0\12\44\25\0\10\45\1\0\3\45"+
    "\1\0\27\45\1\0\12\45\1\0\5\45\3\0\1\45\40\0\1\45"+
    "\1\0\2\45\4\0\12\44\1\0\2\45\22\0\10\45\1\0\3\45"+
    "\1\0\51\45\2\0\1\45\20\0\1\45\21\0\2\45\4\0\12\44"+
    "\12\0\6\45\5\0\22\45\3\0\30\45\1\0\11\45\1\0\1\45"+
    "\2\0\7\45\37\0\12\44\21\0\60\45\1\0\2\45\14\0\7\45"+
    "\11\0\12\44\47\0\2\45\1\0\1\45\2\0\2\45\1\0\1\45"+
    "\2\0\1\45\6\0\4\45\1\0\7\45\1\0\3\45\1\0\1\45"+
    "\1\0\1\45\2\0\2\45\1\0\4\45\1\0\2\45\11\0\1\45"+
    "\2\0\5\45\1\0\1\45\11\0\12\44\2\0\4\45\40\0\1\45"+
    "\37\0\12\44\26\0\10\45\1\0\44\45\33\0\5\45\163\0\53\45"+
    "\24\0\1\45\12\44\6\0\6\45\4\0\4\45\3\0\1\45\3\0"+
    "\2\45\7\0\3\45\4\0\15\45\14\0\1\45\1\0\12\44\6\0"+
    "\46\45\1\0\1\45\5\0\1\45\2\0\53\45\1\0\u014d\45\1\0"+
    "\4\45\2\0\7\45\1\0\1\45\1\0\4\45\2\0\51\45\1\0"+
    "\4\45\2\0\41\45\1\0\4\45\2\0\7\45\1\0\1\45\1\0"+
    "\4\45\2\0\17\45\1\0\71\45\1\0\4\45\2\0\103\45\45\0"+
    "\20\45\20\0\125\45\14\0\u026c\45\2\0\21\45\1\0\32\45\5\0"+
    "\113\45\6\0\10\45\7\0\15\45\1\0\4\45\16\0\22\45\16\0"+
    "\22\45\16\0\15\45\1\0\3\45\17\0\64\45\43\0\1\45\4\0"+
    "\1\45\3\0\12\44\46\0\12\44\6\0\130\45\10\0\51\45\1\0"+
    "\1\45\5\0\106\45\12\0\37\45\47\0\12\44\36\45\2\0\5\45"+
    "\13\0\54\45\25\0\7\45\10\0\12\44\46\0\27\45\11\0\65\45"+
    "\53\0\12\44\6\0\12\44\15\0\1\45\135\0\57\45\21\0\7\45"+
    "\4\0\12\44\51\0\36\45\15\0\2\45\12\44\54\45\32\0\44\45"+
    "\34\0\12\44\3\0\3\45\12\44\44\45\153\0\4\45\1\0\4\45"+
    "\3\0\2\45\11\0\300\45\100\0\u0116\45\2\0\6\45\2\0\46\45"+
    "\2\0\6\45\2\0\10\45\1\0\1\45\1\0\1\45\1\0\1\45"+
    "\1\0\37\45\2\0\65\45\1\0\7\45\1\0\1\45\3\0\3\45"+
    "\1\0\7\45\3\0\4\45\2\0\6\45\4\0\15\45\5\0\3\45"+
    "\1\0\7\45\53\0\1\46\1\46\107\0\1\45\15\0\1\45\20\0"+
    "\15\45\145\0\1\45\4\0\1\45\2\0\12\45\1\0\1\45\3\0"+
    "\5\45\6\0\1\45\1\0\1\45\1\0\1\45\1\0\4\45\1\0"+
    "\13\45\2\0\4\45\5\0\5\45\4\0\1\45\64\0\2\45\u0a7b\0"+
    "\57\45\1\0\57\45\1\0\205\45\6\0\4\45\3\0\2\45\14\0"+
    "\46\45\1\0\1\45\5\0\1\45\2\0\70\45\7\0\1\45\20\0"+
    "\27\45\11\0\7\45\1\0\7\45\1\0\7\45\1\0\7\45\1\0"+
    "\7\45\1\0\7\45\1\0\7\45\1\0\7\45\120\0\1\45\u01d5\0"+
    "\2\45\52\0\5\45\5\0\2\45\4\0\126\45\6\0\3\45\1\0"+
    "\132\45\1\0\4\45\5\0\51\45\3\0\136\45\21\0\33\45\65\0"+
    "\20\45\u0200\0\u19b6\45\112\0\u51cd\45\63\0\u048d\45\103\0\56\45\2\0"+
    "\u010d\45\3\0\20\45\12\44\2\45\24\0\57\45\20\0\37\45\2\0"+
    "\106\45\61\0\11\45\2\0\147\45\2\0\4\45\1\0\36\45\2\0"+
    "\2\45\105\0\13\45\1\0\3\45\1\0\4\45\1\0\27\45\35\0"+
    "\64\45\16\0\62\45\34\0\12\44\30\0\6\45\3\0\1\45\4\0"+
    "\12\44\34\45\12\0\27\45\31\0\35\45\7\0\57\45\34\0\1\45"+
    "\12\44\6\0\5\45\1\0\12\45\12\44\5\45\1\0\51\45\27\0"+
    "\3\45\1\0\10\45\4\0\12\44\6\0\27\45\3\0\1\45\3\0"+
    "\62\45\1\0\1\45\3\0\2\45\2\0\5\45\2\0\1\45\1\0"+
    "\1\45\30\0\3\45\2\0\13\45\7\0\3\45\14\0\6\45\2\0"+
    "\6\45\2\0\6\45\11\0\7\45\1\0\7\45\1\0\53\45\1\0"+
    "\4\45\4\0\2\45\132\0\43\45\15\0\12\44\6\0\u2ba4\45\14\0"+
    "\27\45\4\0\61\45\u2104\0\u016e\45\2\0\152\45\46\0\7\45\14\0"+
    "\5\45\5\0\1\45\1\0\12\45\1\0\15\45\1\0\5\45\1\0"+
    "\1\45\1\0\2\45\1\0\2\45\1\0\154\45\41\0\u016b\45\22\0"+
    "\100\45\2\0\66\45\50\0\14\45\164\0\5\45\1\0\207\45\23\0"+
    "\12\44\7\0\32\45\6\0\32\45\13\0\131\45\3\0\6\45\2\0"+
    "\6\45\2\0\6\45\2\0\3\45\43\0\14\45\1\0\32\45\1\0"+
    "\23\45\1\0\2\45\1\0\17\45\2\0\16\45\42\0\173\45\u0185\0"+
    "\35\45\3\0\61\45\57\0\40\45\20\0\21\45\1\0\10\45\6\0"+
    "\46\45\12\0\36\45\2\0\44\45\4\0\10\45\60\0\236\45\2\0"+
    "\12\44\126\0\50\45\10\0\64\45\234\0\u0137\45\11\0\26\45\12\0"+
    "\10\45\230\0\6\45\2\0\1\45\1\0\54\45\1\0\2\45\3\0"+
    "\1\45\2\0\27\45\12\0\27\45\11\0\37\45\141\0\26\45\12\0"+
    "\32\45\106\0\70\45\6\0\2\45\100\0\1\45\17\0\4\45\1\0"+
    "\3\45\1\0\33\45\54\0\35\45\3\0\35\45\43\0\10\45\1\0"+
    "\34\45\33\0\66\45\12\0\26\45\12\0\23\45\15\0\22\45\156\0"+
    "\111\45\u03ba\0\65\45\56\0\12\44\23\0\55\45\40\0\31\45\7\0"+
    "\12\44\11\0\44\45\17\0\12\44\20\0\43\45\3\0\1\45\14\0"+
    "\60\45\16\0\4\45\13\0\12\44\1\45\45\0\22\45\1\0\31\45"+
    "\204\0\57\45\21\0\12\44\13\0\10\45\2\0\2\45\2\0\26\45"+
    "\1\0\7\45\1\0\2\45\1\0\5\45\3\0\1\45\37\0\5\45"+
    "\u011e\0\60\45\24\0\2\45\1\0\1\45\10\0\12\44\246\0\57\45"+
    "\121\0\60\45\24\0\1\45\13\0\12\44\46\0\53\45\25\0\12\44"+
    "\u01d6\0\100\45\12\44\25\0\1\45\u01c0\0\71\45\u0507\0\u0399\45\u0c67\0"+
    "\u042f\45\u33d1\0\u0239\45\7\0\37\45\1\0\12\44\146\0\36\45\22\0"+
    "\60\45\20\0\4\45\14\0\12\44\11\0\25\45\5\0\23\45\u0370\0"+
    "\105\45\13\0\1\45\102\0\15\45\u4060\0\2\45\u0bfe\0\153\45\5\0"+
    "\15\45\3\0\11\45\7\0\12\45\u1766\0\125\45\1\0\107\45\1\0"+
    "\2\45\2\0\1\45\2\0\2\45\2\0\4\45\1\0\14\45\1\0"+
    "\1\45\1\0\7\45\1\0\101\45\1\0\4\45\2\0\10\45\1\0"+
    "\7\45\1\0\34\45\1\0\4\45\1\0\5\45\1\0\1\45\3\0"+
    "\7\45\1\0\u0154\45\2\0\31\45\1\0\31\45\1\0\37\45\1\0"+
    "\31\45\1\0\37\45\1\0\31\45\1\0\37\45\1\0\31\45\1\0"+
    "\37\45\1\0\31\45\1\0\10\45\2\0\62\44\u1000\0\305\45\u053b\0"+
    "\4\45\1\0\33\45\1\0\2\45\1\0\1\45\2\0\1\45\1\0"+
    "\12\45\1\0\4\45\1\0\1\45\1\0\1\45\6\0\1\45\4\0"+
    "\1\45\1\0\1\45\1\0\1\45\1\0\3\45\1\0\2\45\1\0"+
    "\1\45\2\0\1\45\1\0\1\45\1\0\1\45\1\0\1\45\1\0"+
    "\1\45\1\0\2\45\1\0\1\45\2\0\4\45\1\0\7\45\1\0"+
    "\4\45\1\0\4\45\1\0\1\45\1\0\12\45\1\0\21\45\5\0"+
    "\3\45\1\0\5\45\1\0\21\45\u1144\0\ua6d7\45\51\0\u1035\45\13\0"+
    "\336\45\u3fe2\0\u021e\45\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05f0\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\2\0\1\2\2\3\1\4\7\3\1\5\1\1"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\2\3\1\4\1\2\1\16\1\2\1\17\1\20\2\21"+
    "\1\22\1\23\2\3\1\24\1\25\3\3\1\26\11\3"+
    "\1\16\1\27\7\3\1\30\4\3\1\31\3\3\1\32"+
    "\1\33\2\3\1\34\1\3\1\35\5\3\1\36\1\3"+
    "\1\37\1\40\3\3\1\41\4\3\1\42\1\43\3\3"+
    "\1\44\1\3\1\45\1\46\1\3\1\47";

  private static int [] zzUnpackAction() {
    int [] result = new int[106];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\47\0\116\0\165\0\234\0\303\0\352\0\u0111"+
    "\0\u0138\0\u015f\0\u0186\0\u01ad\0\u01d4\0\u01fb\0\165\0\u0222"+
    "\0\165\0\165\0\165\0\165\0\165\0\165\0\165\0\165"+
    "\0\u0249\0\u0270\0\u0297\0\u02be\0\u02be\0\u0297\0\u02e5\0\165"+
    "\0\165\0\u030c\0\165\0\165\0\u0333\0\u035a\0\165\0\165"+
    "\0\u0381\0\u03a8\0\u03cf\0\303\0\u03f6\0\u041d\0\u0444\0\u046b"+
    "\0\u0492\0\u04b9\0\u04e0\0\u0507\0\u052e\0\165\0\165\0\u0555"+
    "\0\u057c\0\u05a3\0\u05ca\0\u05f1\0\u0618\0\u063f\0\303\0\u0666"+
    "\0\u068d\0\u06b4\0\u06db\0\303\0\u0702\0\u0729\0\u0750\0\303"+
    "\0\303\0\u0777\0\u079e\0\303\0\u07c5\0\u07ec\0\u0813\0\u083a"+
    "\0\u0861\0\u0888\0\u08af\0\303\0\u08d6\0\303\0\303\0\u08fd"+
    "\0\u0924\0\u094b\0\303\0\u0972\0\u0999\0\u09c0\0\u09e7\0\303"+
    "\0\303\0\u0a0e\0\u0a35\0\u0a5c\0\303\0\u0a83\0\303\0\303"+
    "\0\u0aaa\0\303";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[106];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\2\6\1\7\1\4\1\10\1\11\1\12"+
    "\1\6\1\13\1\14\1\15\3\6\1\16\1\6\1\17"+
    "\2\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\34\1\36"+
    "\1\37\1\6\1\40\5\41\1\42\16\41\1\40\21\41"+
    "\1\40\22\43\1\44\1\43\1\40\21\43\1\40\50\0"+
    "\1\6\1\45\1\6\2\0\13\6\1\46\13\0\2\6"+
    "\5\0\2\6\2\0\3\6\2\0\14\6\13\0\2\6"+
    "\5\0\2\6\6\0\1\47\32\0\1\50\7\0\3\6"+
    "\2\0\1\6\1\51\11\6\1\52\13\0\2\6\5\0"+
    "\2\6\2\0\3\6\2\0\4\6\1\53\7\6\13\0"+
    "\2\6\5\0\2\6\2\0\3\6\2\0\6\6\1\54"+
    "\1\6\1\55\3\6\13\0\2\6\5\0\2\6\2\0"+
    "\2\6\1\56\2\0\10\6\1\57\3\6\13\0\2\6"+
    "\5\0\2\6\2\0\3\6\2\0\4\6\1\60\7\6"+
    "\13\0\2\6\5\0\2\6\2\0\3\6\2\0\7\6"+
    "\1\61\1\6\1\62\2\6\13\0\2\6\5\0\2\6"+
    "\2\0\3\6\2\0\1\63\13\6\13\0\2\6\5\0"+
    "\2\6\24\0\2\20\23\0\1\6\1\64\1\6\2\0"+
    "\14\6\13\0\2\6\5\0\2\6\2\0\3\6\2\0"+
    "\11\6\1\65\2\6\13\0\2\6\5\0\2\6\41\0"+
    "\1\50\46\0\1\66\52\0\1\37\6\0\1\67\43\0"+
    "\2\6\1\70\2\0\12\6\1\71\1\6\13\0\2\6"+
    "\5\0\2\6\2\0\1\6\1\72\1\6\2\0\14\6"+
    "\13\0\2\6\5\0\2\6\2\0\3\6\2\0\2\6"+
    "\1\73\11\6\13\0\2\6\5\0\2\6\2\0\3\6"+
    "\2\0\2\6\1\74\11\6\13\0\2\6\5\0\2\6"+
    "\2\0\1\6\1\75\1\6\2\0\3\6\1\76\10\6"+
    "\13\0\2\6\5\0\2\6\2\0\3\6\2\0\3\6"+
    "\1\77\10\6\13\0\2\6\5\0\2\6\2\0\3\6"+
    "\2\0\12\6\1\100\1\6\13\0\2\6\5\0\2\6"+
    "\2\0\3\6\2\0\5\6\1\101\6\6\13\0\2\6"+
    "\5\0\2\6\2\0\3\6\2\0\6\6\1\102\5\6"+
    "\13\0\2\6\5\0\2\6\2\0\3\6\2\0\10\6"+
    "\1\103\3\6\13\0\2\6\5\0\2\6\2\0\3\6"+
    "\2\0\1\6\1\104\12\6\13\0\2\6\5\0\2\6"+
    "\2\0\3\6\2\0\2\6\1\105\11\6\13\0\2\6"+
    "\5\0\2\6\2\0\3\6\2\0\2\6\1\106\11\6"+
    "\13\0\2\6\5\0\2\6\2\0\3\6\2\0\11\6"+
    "\1\107\2\6\13\0\2\6\5\0\2\6\2\0\2\6"+
    "\1\110\2\0\14\6\13\0\2\6\5\0\2\6\2\0"+
    "\3\6\2\0\4\6\1\111\7\6\13\0\2\6\5\0"+
    "\2\6\2\0\3\6\2\0\1\6\1\77\12\6\13\0"+
    "\2\6\5\0\2\6\2\0\3\6\2\0\3\6\1\112"+
    "\10\6\13\0\2\6\5\0\2\6\2\0\2\6\1\113"+
    "\2\0\14\6\13\0\2\6\5\0\2\6\2\0\3\6"+
    "\2\0\5\6\1\114\6\6\13\0\2\6\5\0\2\6"+
    "\2\0\3\6\2\0\7\6\1\115\4\6\13\0\2\6"+
    "\5\0\2\6\2\0\3\6\2\0\4\6\1\116\7\6"+
    "\13\0\2\6\5\0\2\6\2\0\1\117\2\6\2\0"+
    "\2\6\1\120\11\6\13\0\2\6\5\0\2\6\2\0"+
    "\1\6\1\121\1\6\2\0\14\6\13\0\2\6\5\0"+
    "\2\6\2\0\1\122\2\6\2\0\14\6\13\0\2\6"+
    "\5\0\2\6\2\0\3\6\2\0\3\6\1\123\10\6"+
    "\13\0\2\6\5\0\2\6\2\0\3\6\2\0\10\6"+
    "\1\124\3\6\13\0\2\6\5\0\2\6\2\0\2\6"+
    "\1\125\2\0\14\6\13\0\2\6\5\0\2\6\2\0"+
    "\3\6\2\0\4\6\1\126\7\6\13\0\2\6\5\0"+
    "\2\6\2\0\3\6\2\0\4\6\1\127\7\6\13\0"+
    "\2\6\5\0\2\6\2\0\3\6\2\0\1\6\1\130"+
    "\12\6\13\0\2\6\5\0\2\6\2\0\3\6\2\0"+
    "\2\6\1\131\11\6\13\0\2\6\5\0\2\6\2\0"+
    "\1\6\1\132\1\6\2\0\14\6\13\0\2\6\5\0"+
    "\2\6\2\0\3\6\2\0\6\6\1\133\5\6\13\0"+
    "\2\6\5\0\2\6\2\0\3\6\2\0\7\6\1\134"+
    "\4\6\13\0\2\6\5\0\2\6\2\0\3\6\2\0"+
    "\3\6\1\135\10\6\13\0\2\6\5\0\2\6\2\0"+
    "\1\136\2\6\2\0\14\6\13\0\2\6\5\0\2\6"+
    "\2\0\3\6\2\0\4\6\1\137\7\6\13\0\2\6"+
    "\5\0\2\6\2\0\3\6\2\0\10\6\1\140\3\6"+
    "\13\0\2\6\5\0\2\6\2\0\3\6\2\0\6\6"+
    "\1\141\5\6\13\0\2\6\5\0\2\6\2\0\3\6"+
    "\2\0\12\6\1\142\1\6\13\0\2\6\5\0\2\6"+
    "\2\0\2\6\1\143\2\0\14\6\13\0\2\6\5\0"+
    "\2\6\2\0\3\6\2\0\2\6\1\144\11\6\13\0"+
    "\2\6\5\0\2\6\2\0\3\6\2\0\13\6\1\145"+
    "\13\0\2\6\5\0\2\6\2\0\1\6\1\146\1\6"+
    "\2\0\14\6\13\0\2\6\5\0\2\6\2\0\3\6"+
    "\2\0\4\6\1\147\7\6\13\0\2\6\5\0\2\6"+
    "\2\0\3\6\2\0\3\6\1\150\10\6\13\0\2\6"+
    "\5\0\2\6\2\0\3\6\2\0\11\6\1\151\2\6"+
    "\13\0\2\6\5\0\2\6\2\0\3\6\2\0\10\6"+
    "\1\77\3\6\13\0\2\6\5\0\2\6\2\0\3\6"+
    "\2\0\10\6\1\152\3\6\13\0\2\6\5\0\2\6"+
    "\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2769];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\2\0\1\11\12\1\1\11\1\1\10\11\7\1"+
    "\2\11\1\1\2\11\2\1\2\11\15\1\2\11\63\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[106];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  public boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	String comment = "";
	String string = "";


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2456) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            }
          case 40: break;
          case 2: 
            { System.out.println("Error en la linea: " + (yyline + 1) + " columna " + (yycolumn+1) + " Character Not Found: " + yytext());
            }
          case 41: break;
          case 3: 
            { System.out.println("VariableName "+ yytext());
            }
          case 42: break;
          case 4: 
            { System.out.println("ArOP "+ yytext());
            }
          case 43: break;
          case 5: 
            { System.out.println("Apostrophe "+ yytext());
					string = "";
					yybegin(STRING);
            }
          case 44: break;
          case 6: 
            { System.out.println("Endline " + yytext());
            }
          case 45: break;
          case 7: 
            { System.out.println("leftBrack "+ yytext());
            }
          case 46: break;
          case 8: 
            { System.out.println("rightBrack "+ yytext());
            }
          case 47: break;
          case 9: 
            { System.out.println("leftKkey "+ yytext());
            }
          case 48: break;
          case 10: 
            { System.out.println("rightKey "+ yytext());
            }
          case 49: break;
          case 11: 
            { System.out.println("leftPar "+ yytext());
            }
          case 50: break;
          case 12: 
            { System.out.println("rightPar "+ yytext());
            }
          case 51: break;
          case 13: 
            { System.out.println("Delimeter "+ yytext());
            }
          case 52: break;
          case 14: 
            { System.out.println("RelOP "+ yytext());
            }
          case 53: break;
          case 15: 
            { System.out.println("Number " + yytext());
            }
          case 54: break;
          case 16: 
            { System.out.print(yytext());
            }
          case 55: break;
          case 17: 
            { comment+=yytext();
            }
          case 56: break;
          case 18: 
            { string+=yytext();
            }
          case 57: break;
          case 19: 
            { System.out.println("String: " + string);
					System.out.println("Apostrophe: " + yytext());
					yybegin(YYINITIAL);
            }
          case 58: break;
          case 20: 
            { System.out.println("Inicio de Comentario: " + yytext());
				yybegin(COMMENT);
            }
          case 59: break;
          case 21: 
            { System.out.println("AsOP "+ yytext());
            }
          case 60: break;
          case 22: 
            { System.out.println("If "+ yytext());
            }
          case 61: break;
          case 23: 
            { System.out.println("Comentario: " + comment);
				System.out.println("Fin de comentario: " + yytext());
				comment = "";
				yybegin(YYINITIAL);
            }
          case 62: break;
          case 24: 
            { System.out.println("Type "+ yytext());
            }
          case 63: break;
          case 25: 
            { System.out.println("For "+ yytext());
            }
          case 64: break;
          case 26: 
            { System.out.println("Call: " + yytext());
            }
          case 65: break;
          case 27: 
            { System.out.println("Case "+ yytext());
            }
          case 66: break;
          case 28: 
            { System.out.println("Read: " + yytext());
            }
          case 67: break;
          case 29: 
            { System.out.println("Else "+ yytext());
            }
          case 68: break;
          case 30: 
            { System.out.println("Main "+ yytext());
            }
          case 69: break;
          case 31: 
            { System.out.println("Write: " + yytext());
            }
          case 70: break;
          case 32: 
            { System.out.println("While " + yytext());
            }
          case 71: break;
          case 33: 
            { System.out.println("EndIf "+ yytext());
            }
          case 72: break;
          case 34: 
            { System.out.println("Return "+ yytext());
            }
          case 73: break;
          case 35: 
            { System.out.println("ElseIf "+ yytext());
            }
          case 74: break;
          case 36: 
            { System.out.println("Switch "+ yytext());
            }
          case 75: break;
          case 37: 
            { System.out.println("Endcase: " + yytext());
            }
          case 76: break;
          case 38: 
            { System.out.println("Default: " + yytext());
            }
          case 77: break;
          case 39: 
            { System.out.println("Function: " + yytext());
            }
          case 78: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
      System.out.println("Aqui");
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
