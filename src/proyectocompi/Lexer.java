/* The following code was generated by JFlex 1.6.1 */

package proyectocompi;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/proyectocompi/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int STRING = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\23\1\24\1\47\1\47\1\47\22\0\1\23\1\43\3\0"+
    "\1\15\1\0\1\22\1\32\1\33\1\40\1\40\1\34\1\40\1\0"+
    "\1\14\12\45\1\44\1\25\1\42\1\41\1\42\2\0\32\46\1\26"+
    "\1\0\1\27\3\0\1\6\1\36\1\13\1\20\1\4\1\5\1\37"+
    "\1\11\1\17\2\46\1\7\1\35\1\12\1\21\2\46\1\2\1\10"+
    "\1\1\1\3\1\46\1\16\3\46\1\30\1\0\1\31\7\0\1\47"+
    "\44\0\1\46\12\0\1\46\4\0\1\46\5\0\27\46\1\0\37\46"+
    "\1\0\u01ca\46\4\0\14\46\16\0\5\46\7\0\1\46\1\0\1\46"+
    "\201\0\5\46\1\0\2\46\2\0\4\46\1\0\1\46\6\0\1\46"+
    "\1\0\3\46\1\0\1\46\1\0\24\46\1\0\123\46\1\0\213\46"+
    "\10\0\246\46\1\0\46\46\2\0\1\46\7\0\47\46\110\0\33\46"+
    "\5\0\3\46\55\0\53\46\25\0\12\45\4\0\2\46\1\0\143\46"+
    "\1\0\1\46\17\0\2\46\7\0\2\46\12\45\3\46\2\0\1\46"+
    "\20\0\1\46\1\0\36\46\35\0\131\46\13\0\1\46\16\0\12\45"+
    "\41\46\11\0\2\46\4\0\1\46\5\0\26\46\4\0\1\46\11\0"+
    "\1\46\3\0\1\46\27\0\31\46\107\0\23\46\121\0\66\46\3\0"+
    "\1\46\22\0\1\46\7\0\12\46\4\0\12\45\1\0\20\46\4\0"+
    "\10\46\2\0\2\46\2\0\26\46\1\0\7\46\1\0\1\46\3\0"+
    "\4\46\3\0\1\46\20\0\1\46\15\0\2\46\1\0\3\46\4\0"+
    "\12\45\2\46\23\0\6\46\4\0\2\46\2\0\26\46\1\0\7\46"+
    "\1\0\2\46\1\0\2\46\1\0\2\46\37\0\4\46\1\0\1\46"+
    "\7\0\12\45\2\0\3\46\20\0\11\46\1\0\3\46\1\0\26\46"+
    "\1\0\7\46\1\0\2\46\1\0\5\46\3\0\1\46\22\0\1\46"+
    "\17\0\2\46\4\0\12\45\25\0\10\46\2\0\2\46\2\0\26\46"+
    "\1\0\7\46\1\0\2\46\1\0\5\46\3\0\1\46\36\0\2\46"+
    "\1\0\3\46\4\0\12\45\1\0\1\46\21\0\1\46\1\0\6\46"+
    "\3\0\3\46\1\0\4\46\3\0\2\46\1\0\1\46\1\0\2\46"+
    "\3\0\2\46\3\0\3\46\3\0\14\46\26\0\1\46\25\0\12\45"+
    "\25\0\10\46\1\0\3\46\1\0\27\46\1\0\20\46\3\0\1\46"+
    "\32\0\2\46\6\0\2\46\4\0\12\45\25\0\10\46\1\0\3\46"+
    "\1\0\27\46\1\0\12\46\1\0\5\46\3\0\1\46\40\0\1\46"+
    "\1\0\2\46\4\0\12\45\1\0\2\46\22\0\10\46\1\0\3\46"+
    "\1\0\51\46\2\0\1\46\20\0\1\46\21\0\2\46\4\0\12\45"+
    "\12\0\6\46\5\0\22\46\3\0\30\46\1\0\11\46\1\0\1\46"+
    "\2\0\7\46\37\0\12\45\21\0\60\46\1\0\2\46\14\0\7\46"+
    "\11\0\12\45\47\0\2\46\1\0\1\46\2\0\2\46\1\0\1\46"+
    "\2\0\1\46\6\0\4\46\1\0\7\46\1\0\3\46\1\0\1\46"+
    "\1\0\1\46\2\0\2\46\1\0\4\46\1\0\2\46\11\0\1\46"+
    "\2\0\5\46\1\0\1\46\11\0\12\45\2\0\4\46\40\0\1\46"+
    "\37\0\12\45\26\0\10\46\1\0\44\46\33\0\5\46\163\0\53\46"+
    "\24\0\1\46\12\45\6\0\6\46\4\0\4\46\3\0\1\46\3\0"+
    "\2\46\7\0\3\46\4\0\15\46\14\0\1\46\1\0\12\45\6\0"+
    "\46\46\1\0\1\46\5\0\1\46\2\0\53\46\1\0\u014d\46\1\0"+
    "\4\46\2\0\7\46\1\0\1\46\1\0\4\46\2\0\51\46\1\0"+
    "\4\46\2\0\41\46\1\0\4\46\2\0\7\46\1\0\1\46\1\0"+
    "\4\46\2\0\17\46\1\0\71\46\1\0\4\46\2\0\103\46\45\0"+
    "\20\46\20\0\125\46\14\0\u026c\46\2\0\21\46\1\0\32\46\5\0"+
    "\113\46\6\0\10\46\7\0\15\46\1\0\4\46\16\0\22\46\16\0"+
    "\22\46\16\0\15\46\1\0\3\46\17\0\64\46\43\0\1\46\4\0"+
    "\1\46\3\0\12\45\46\0\12\45\6\0\130\46\10\0\51\46\1\0"+
    "\1\46\5\0\106\46\12\0\37\46\47\0\12\45\36\46\2\0\5\46"+
    "\13\0\54\46\25\0\7\46\10\0\12\45\46\0\27\46\11\0\65\46"+
    "\53\0\12\45\6\0\12\45\15\0\1\46\135\0\57\46\21\0\7\46"+
    "\4\0\12\45\51\0\36\46\15\0\2\46\12\45\54\46\32\0\44\46"+
    "\34\0\12\45\3\0\3\46\12\45\44\46\153\0\4\46\1\0\4\46"+
    "\3\0\2\46\11\0\300\46\100\0\u0116\46\2\0\6\46\2\0\46\46"+
    "\2\0\6\46\2\0\10\46\1\0\1\46\1\0\1\46\1\0\1\46"+
    "\1\0\37\46\2\0\65\46\1\0\7\46\1\0\1\46\3\0\3\46"+
    "\1\0\7\46\3\0\4\46\2\0\6\46\4\0\15\46\5\0\3\46"+
    "\1\0\7\46\53\0\1\47\1\47\107\0\1\46\15\0\1\46\20\0"+
    "\15\46\145\0\1\46\4\0\1\46\2\0\12\46\1\0\1\46\3\0"+
    "\5\46\6\0\1\46\1\0\1\46\1\0\1\46\1\0\4\46\1\0"+
    "\13\46\2\0\4\46\5\0\5\46\4\0\1\46\64\0\2\46\u0a7b\0"+
    "\57\46\1\0\57\46\1\0\205\46\6\0\4\46\3\0\2\46\14\0"+
    "\46\46\1\0\1\46\5\0\1\46\2\0\70\46\7\0\1\46\20\0"+
    "\27\46\11\0\7\46\1\0\7\46\1\0\7\46\1\0\7\46\1\0"+
    "\7\46\1\0\7\46\1\0\7\46\1\0\7\46\120\0\1\46\u01d5\0"+
    "\2\46\52\0\5\46\5\0\2\46\4\0\126\46\6\0\3\46\1\0"+
    "\132\46\1\0\4\46\5\0\51\46\3\0\136\46\21\0\33\46\65\0"+
    "\20\46\u0200\0\u19b6\46\112\0\u51cd\46\63\0\u048d\46\103\0\56\46\2\0"+
    "\u010d\46\3\0\20\46\12\45\2\46\24\0\57\46\20\0\37\46\2\0"+
    "\106\46\61\0\11\46\2\0\147\46\2\0\4\46\1\0\36\46\2\0"+
    "\2\46\105\0\13\46\1\0\3\46\1\0\4\46\1\0\27\46\35\0"+
    "\64\46\16\0\62\46\34\0\12\45\30\0\6\46\3\0\1\46\4\0"+
    "\12\45\34\46\12\0\27\46\31\0\35\46\7\0\57\46\34\0\1\46"+
    "\12\45\6\0\5\46\1\0\12\46\12\45\5\46\1\0\51\46\27\0"+
    "\3\46\1\0\10\46\4\0\12\45\6\0\27\46\3\0\1\46\3\0"+
    "\62\46\1\0\1\46\3\0\2\46\2\0\5\46\2\0\1\46\1\0"+
    "\1\46\30\0\3\46\2\0\13\46\7\0\3\46\14\0\6\46\2\0"+
    "\6\46\2\0\6\46\11\0\7\46\1\0\7\46\1\0\53\46\1\0"+
    "\4\46\4\0\2\46\132\0\43\46\15\0\12\45\6\0\u2ba4\46\14\0"+
    "\27\46\4\0\61\46\u2104\0\u016e\46\2\0\152\46\46\0\7\46\14\0"+
    "\5\46\5\0\1\46\1\0\12\46\1\0\15\46\1\0\5\46\1\0"+
    "\1\46\1\0\2\46\1\0\2\46\1\0\154\46\41\0\u016b\46\22\0"+
    "\100\46\2\0\66\46\50\0\14\46\164\0\5\46\1\0\207\46\23\0"+
    "\12\45\7\0\32\46\6\0\32\46\13\0\131\46\3\0\6\46\2\0"+
    "\6\46\2\0\6\46\2\0\3\46\43\0\14\46\1\0\32\46\1\0"+
    "\23\46\1\0\2\46\1\0\17\46\2\0\16\46\42\0\173\46\u0185\0"+
    "\35\46\3\0\61\46\57\0\40\46\20\0\21\46\1\0\10\46\6\0"+
    "\46\46\12\0\36\46\2\0\44\46\4\0\10\46\60\0\236\46\2\0"+
    "\12\45\126\0\50\46\10\0\64\46\234\0\u0137\46\11\0\26\46\12\0"+
    "\10\46\230\0\6\46\2\0\1\46\1\0\54\46\1\0\2\46\3\0"+
    "\1\46\2\0\27\46\12\0\27\46\11\0\37\46\141\0\26\46\12\0"+
    "\32\46\106\0\70\46\6\0\2\46\100\0\1\46\17\0\4\46\1\0"+
    "\3\46\1\0\33\46\54\0\35\46\3\0\35\46\43\0\10\46\1\0"+
    "\34\46\33\0\66\46\12\0\26\46\12\0\23\46\15\0\22\46\156\0"+
    "\111\46\u03ba\0\65\46\56\0\12\45\23\0\55\46\40\0\31\46\7\0"+
    "\12\45\11\0\44\46\17\0\12\45\20\0\43\46\3\0\1\46\14\0"+
    "\60\46\16\0\4\46\13\0\12\45\1\46\45\0\22\46\1\0\31\46"+
    "\204\0\57\46\21\0\12\45\13\0\10\46\2\0\2\46\2\0\26\46"+
    "\1\0\7\46\1\0\2\46\1\0\5\46\3\0\1\46\37\0\5\46"+
    "\u011e\0\60\46\24\0\2\46\1\0\1\46\10\0\12\45\246\0\57\46"+
    "\121\0\60\46\24\0\1\46\13\0\12\45\46\0\53\46\25\0\12\45"+
    "\u01d6\0\100\46\12\45\25\0\1\46\u01c0\0\71\46\u0507\0\u0399\46\u0c67\0"+
    "\u042f\46\u33d1\0\u0239\46\7\0\37\46\1\0\12\45\146\0\36\46\22\0"+
    "\60\46\20\0\4\46\14\0\12\45\11\0\25\46\5\0\23\46\u0370\0"+
    "\105\46\13\0\1\46\102\0\15\46\u4060\0\2\46\u0bfe\0\153\46\5\0"+
    "\15\46\3\0\11\46\7\0\12\46\u1766\0\125\46\1\0\107\46\1\0"+
    "\2\46\2\0\1\46\2\0\2\46\2\0\4\46\1\0\14\46\1\0"+
    "\1\46\1\0\7\46\1\0\101\46\1\0\4\46\2\0\10\46\1\0"+
    "\7\46\1\0\34\46\1\0\4\46\1\0\5\46\1\0\1\46\3\0"+
    "\7\46\1\0\u0154\46\2\0\31\46\1\0\31\46\1\0\37\46\1\0"+
    "\31\46\1\0\37\46\1\0\31\46\1\0\37\46\1\0\31\46\1\0"+
    "\37\46\1\0\31\46\1\0\10\46\2\0\62\45\u1000\0\305\46\u053b\0"+
    "\4\46\1\0\33\46\1\0\2\46\1\0\1\46\2\0\1\46\1\0"+
    "\12\46\1\0\4\46\1\0\1\46\1\0\1\46\6\0\1\46\4\0"+
    "\1\46\1\0\1\46\1\0\1\46\1\0\3\46\1\0\2\46\1\0"+
    "\1\46\2\0\1\46\1\0\1\46\1\0\1\46\1\0\1\46\1\0"+
    "\1\46\1\0\2\46\1\0\1\46\2\0\4\46\1\0\7\46\1\0"+
    "\4\46\1\0\4\46\1\0\1\46\1\0\12\46\1\0\21\46\5\0"+
    "\3\46\1\0\5\46\1\0\21\46\u1144\0\ua6d7\46\51\0\u1035\46\13\0"+
    "\336\46\u3fe2\0\u021e\46\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05f0\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\7\2\1\3\3\2\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\2\2"+
    "\1\3\1\1\1\16\1\1\1\17\1\20\2\21\1\22"+
    "\1\23\14\2\1\24\1\25\2\2\1\26\4\2\1\16"+
    "\1\27\10\2\1\30\7\2\1\31\3\2\1\32\1\33"+
    "\1\2\1\34\1\35\5\2\1\36\1\37\3\2\1\40"+
    "\4\2\1\41\3\2\1\42\1\43\2\2\1\44\1\45"+
    "\2\2\1\46\2\2\1\47\1\2\1\50\1\51";

  private static int [] zzUnpackAction() {
    int [] result = new int[119];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\50\0\120\0\170\0\240\0\310\0\360\0\u0118"+
    "\0\u0140\0\u0168\0\u0190\0\u01b8\0\u01e0\0\u0208\0\u0230\0\170"+
    "\0\u0258\0\170\0\170\0\170\0\170\0\170\0\170\0\170"+
    "\0\170\0\u0280\0\u02a8\0\u02d0\0\u02f8\0\u02f8\0\u02d0\0\u0320"+
    "\0\170\0\170\0\u0348\0\170\0\170\0\u0370\0\u0398\0\u03c0"+
    "\0\u03e8\0\u0410\0\u0438\0\u0460\0\u0488\0\u04b0\0\u04d8\0\u0500"+
    "\0\u0528\0\170\0\170\0\u0550\0\u0578\0\360\0\u05a0\0\u05c8"+
    "\0\u05f0\0\u0618\0\170\0\170\0\u0640\0\u0668\0\u0690\0\u06b8"+
    "\0\u06e0\0\u0708\0\u0730\0\u0758\0\360\0\u0780\0\u07a8\0\u07d0"+
    "\0\u07f8\0\u0820\0\u0848\0\u0870\0\360\0\u0898\0\u08c0\0\u08e8"+
    "\0\360\0\360\0\u0910\0\360\0\u0938\0\u0960\0\u0988\0\u09b0"+
    "\0\u09d8\0\u0a00\0\360\0\360\0\u0a28\0\u0a50\0\u0a78\0\360"+
    "\0\u0aa0\0\u0ac8\0\u0af0\0\u0b18\0\360\0\u0b40\0\u0b68\0\u0b90"+
    "\0\360\0\360\0\u0bb8\0\u0be0\0\360\0\360\0\u0c08\0\u0c30"+
    "\0\360\0\u0c58\0\u0c80\0\360\0\u0ca8\0\360\0\360";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[119];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\2\7\1\12"+
    "\2\7\1\13\1\14\1\4\1\15\1\16\1\17\1\7"+
    "\1\20\2\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\7\1\34\1\35\1\36"+
    "\1\35\1\37\1\40\1\7\1\41\15\42\1\43\6\42"+
    "\1\41\22\42\1\41\22\44\1\45\1\44\1\41\22\44"+
    "\1\41\51\0\1\7\1\46\6\7\1\47\2\7\2\0"+
    "\4\7\13\0\3\7\5\0\2\7\2\0\3\7\1\50"+
    "\7\7\2\0\4\7\13\0\3\7\5\0\2\7\2\0"+
    "\13\7\2\0\4\7\13\0\3\7\5\0\2\7\2\0"+
    "\6\7\1\51\2\7\1\52\1\7\2\0\4\7\13\0"+
    "\3\7\5\0\2\7\2\0\2\7\1\53\2\7\1\54"+
    "\5\7\2\0\3\7\1\55\13\0\3\7\5\0\2\7"+
    "\2\0\1\56\12\7\2\0\1\57\3\7\13\0\3\7"+
    "\5\0\2\7\2\0\5\7\1\60\2\7\1\61\2\7"+
    "\2\0\4\7\13\0\3\7\5\0\2\7\16\0\1\62"+
    "\23\0\1\63\7\0\1\7\1\64\6\7\1\65\2\7"+
    "\2\0\4\7\13\0\3\7\5\0\2\7\2\0\4\7"+
    "\1\66\4\7\1\67\1\7\2\0\4\7\13\0\3\7"+
    "\5\0\2\7\2\0\3\7\1\70\7\7\2\0\4\7"+
    "\13\0\3\7\5\0\2\7\24\0\2\21\24\0\5\7"+
    "\1\71\5\7\2\0\4\7\13\0\3\7\5\0\2\7"+
    "\2\0\13\7\2\0\3\7\1\72\13\0\3\7\5\0"+
    "\2\7\42\0\1\63\47\0\1\73\53\0\1\40\16\0"+
    "\1\74\34\0\2\7\1\75\10\7\2\0\4\7\13\0"+
    "\3\7\5\0\2\7\2\0\3\7\1\76\7\7\2\0"+
    "\4\7\13\0\3\7\5\0\2\7\2\0\1\77\4\7"+
    "\1\100\5\7\2\0\4\7\13\0\3\7\5\0\2\7"+
    "\2\0\7\7\1\101\3\7\2\0\4\7\13\0\3\7"+
    "\5\0\2\7\2\0\13\7\2\0\2\7\1\102\1\7"+
    "\13\0\3\7\5\0\2\7\2\0\11\7\1\103\1\7"+
    "\2\0\4\7\13\0\3\7\5\0\2\7\2\0\6\7"+
    "\1\104\4\7\2\0\4\7\13\0\3\7\5\0\2\7"+
    "\2\0\1\7\1\105\11\7\2\0\4\7\13\0\3\7"+
    "\5\0\2\7\2\0\1\7\1\106\11\7\2\0\4\7"+
    "\13\0\3\7\5\0\2\7\2\0\13\7\2\0\1\7"+
    "\1\107\2\7\13\0\3\7\5\0\2\7\2\0\6\7"+
    "\1\110\1\111\3\7\2\0\4\7\13\0\3\7\5\0"+
    "\2\7\2\0\5\7\1\112\5\7\2\0\4\7\13\0"+
    "\3\7\5\0\2\7\2\0\13\7\2\0\1\7\1\113"+
    "\2\7\13\0\3\7\5\0\2\7\2\0\13\7\2\0"+
    "\1\7\1\114\2\7\13\0\3\7\5\0\2\7\2\0"+
    "\1\115\12\7\2\0\4\7\13\0\3\7\5\0\2\7"+
    "\2\0\4\7\1\116\6\7\2\0\4\7\13\0\3\7"+
    "\5\0\2\7\2\0\13\7\2\0\1\7\1\117\2\7"+
    "\13\0\3\7\5\0\2\7\2\0\13\7\2\0\3\7"+
    "\1\120\13\0\3\7\5\0\2\7\2\0\3\7\1\121"+
    "\7\7\2\0\4\7\13\0\3\7\5\0\2\7\2\0"+
    "\11\7\1\122\1\7\2\0\4\7\13\0\3\7\5\0"+
    "\2\7\2\0\2\7\1\123\10\7\2\0\4\7\13\0"+
    "\3\7\5\0\2\7\2\0\13\7\2\0\2\7\1\124"+
    "\1\7\13\0\3\7\5\0\2\7\2\0\3\7\1\125"+
    "\7\7\2\0\4\7\13\0\3\7\5\0\2\7\2\0"+
    "\12\7\1\126\2\0\1\7\1\127\2\7\13\0\3\7"+
    "\5\0\2\7\2\0\12\7\1\130\2\0\4\7\13\0"+
    "\3\7\5\0\2\7\2\0\7\7\1\75\3\7\2\0"+
    "\4\7\13\0\3\7\5\0\2\7\2\0\13\7\2\0"+
    "\1\7\1\131\2\7\13\0\3\7\5\0\2\7\2\0"+
    "\1\132\12\7\2\0\4\7\13\0\3\7\5\0\2\7"+
    "\2\0\6\7\1\133\4\7\2\0\4\7\13\0\3\7"+
    "\5\0\2\7\2\0\3\7\1\134\7\7\2\0\4\7"+
    "\13\0\3\7\5\0\2\7\2\0\1\7\1\115\11\7"+
    "\2\0\4\7\13\0\3\7\5\0\2\7\2\0\1\135"+
    "\12\7\2\0\4\7\13\0\3\7\5\0\2\7\2\0"+
    "\6\7\1\136\4\7\2\0\4\7\13\0\3\7\5\0"+
    "\2\7\2\0\5\7\1\137\5\7\2\0\4\7\13\0"+
    "\3\7\5\0\2\7\2\0\11\7\1\140\1\7\2\0"+
    "\4\7\13\0\3\7\5\0\2\7\2\0\6\7\1\141"+
    "\4\7\2\0\4\7\13\0\3\7\5\0\2\7\2\0"+
    "\1\7\1\142\11\7\2\0\4\7\13\0\3\7\5\0"+
    "\2\7\2\0\13\7\2\0\1\7\1\143\2\7\13\0"+
    "\3\7\5\0\2\7\2\0\5\7\1\144\5\7\2\0"+
    "\4\7\13\0\3\7\5\0\2\7\2\0\4\7\1\145"+
    "\6\7\2\0\4\7\13\0\3\7\5\0\2\7\2\0"+
    "\1\146\12\7\2\0\4\7\13\0\3\7\5\0\2\7"+
    "\2\0\11\7\1\147\1\7\2\0\4\7\13\0\3\7"+
    "\5\0\2\7\2\0\12\7\1\150\2\0\4\7\13\0"+
    "\3\7\5\0\2\7\2\0\3\7\1\151\7\7\2\0"+
    "\4\7\13\0\3\7\5\0\2\7\2\0\3\7\1\152"+
    "\7\7\2\0\4\7\13\0\3\7\5\0\2\7\2\0"+
    "\2\7\1\153\10\7\2\0\4\7\13\0\3\7\5\0"+
    "\2\7\2\0\3\7\1\154\7\7\2\0\4\7\13\0"+
    "\3\7\5\0\2\7\2\0\11\7\1\155\1\7\2\0"+
    "\4\7\13\0\3\7\5\0\2\7\2\0\4\7\1\156"+
    "\6\7\2\0\4\7\13\0\3\7\5\0\2\7\2\0"+
    "\7\7\1\157\3\7\2\0\4\7\13\0\3\7\5\0"+
    "\2\7\2\0\13\7\2\0\1\7\1\160\2\7\13\0"+
    "\3\7\5\0\2\7\2\0\13\7\2\0\4\7\13\0"+
    "\2\7\1\115\5\0\2\7\2\0\10\7\1\161\2\7"+
    "\2\0\4\7\13\0\3\7\5\0\2\7\2\0\6\7"+
    "\1\162\4\7\2\0\4\7\13\0\3\7\5\0\2\7"+
    "\2\0\5\7\1\163\5\7\2\0\4\7\13\0\3\7"+
    "\5\0\2\7\2\0\3\7\1\164\7\7\2\0\4\7"+
    "\13\0\3\7\5\0\2\7\2\0\13\7\2\0\3\7"+
    "\1\165\13\0\3\7\5\0\2\7\2\0\1\166\12\7"+
    "\2\0\4\7\13\0\3\7\5\0\2\7\2\0\11\7"+
    "\1\115\1\7\2\0\4\7\13\0\3\7\5\0\2\7"+
    "\2\0\11\7\1\167\1\7\2\0\4\7\13\0\3\7"+
    "\5\0\2\7\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3280];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\13\1\1\11\1\1\10\11\7\1\2\11"+
    "\1\1\2\11\14\1\2\11\7\1\2\11\73\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[119];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  public boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	String comment = "";
	String string = "";


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2456) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Error en la linea: " + (yyline + 1) + " columna " + (yycolumn+1) + " Character Not Found: " + yytext());
            }
          case 42: break;
          case 2: 
            { System.out.println("VariableName "+ yytext());
            }
          case 43: break;
          case 3: 
            { System.out.println("ArOP "+ yytext());
            }
          case 44: break;
          case 4: 
            { System.out.println("Apostrophe "+ yytext());
					string = "";
					yybegin(STRING);
            }
          case 45: break;
          case 5: 
            { 
            }
          case 46: break;
          case 6: 
            { System.out.println("Endline " + yytext());
            }
          case 47: break;
          case 7: 
            { System.out.println("leftBrack "+ yytext());
            }
          case 48: break;
          case 8: 
            { System.out.println("rightBrack "+ yytext());
            }
          case 49: break;
          case 9: 
            { System.out.println("leftKkey "+ yytext());
            }
          case 50: break;
          case 10: 
            { System.out.println("rightKey "+ yytext());
            }
          case 51: break;
          case 11: 
            { System.out.println("leftPar "+ yytext());
            }
          case 52: break;
          case 12: 
            { System.out.println("rightPar "+ yytext());
            }
          case 53: break;
          case 13: 
            { System.out.println("Delimeter "+ yytext());
            }
          case 54: break;
          case 14: 
            { System.out.println("RelOP "+ yytext());
            }
          case 55: break;
          case 15: 
            { System.out.println("Number " + yytext());
            }
          case 56: break;
          case 16: 
            { System.out.print(yytext());
            }
          case 57: break;
          case 17: 
            { comment+=yytext();
            }
          case 58: break;
          case 18: 
            { string+=yytext();
            }
          case 59: break;
          case 19: 
            { System.out.println("String: " + string);
					System.out.println("Apostrophe: " + yytext());
					yybegin(YYINITIAL);
            }
          case 60: break;
          case 20: 
            { System.out.println("Inicio de Comentario: " + yytext());
				yybegin(COMMENT);
            }
          case 61: break;
          case 21: 
            { System.out.println("AsOP "+ yytext());
            }
          case 62: break;
          case 22: 
            { System.out.println("If "+ yytext());
            }
          case 63: break;
          case 23: 
            { System.out.println("Comentario: " + comment);
				System.out.println("Fin de comentario: " + yytext());
				comment = "";
				yybegin(YYINITIAL);
            }
          case 64: break;
          case 24: 
            { System.out.println("For "+ yytext());
            }
          case 65: break;
          case 25: 
            { System.out.println("Type "+ yytext());
            }
          case 66: break;
          case 26: 
            { System.out.println("Boolean: " + yytext());
            }
          case 67: break;
          case 27: 
            { System.out.println("Then: " + yytext());
            }
          case 68: break;
          case 28: 
            { System.out.println("Read: " + yytext());
            }
          case 69: break;
          case 29: 
            { System.out.println("Else "+ yytext());
            }
          case 70: break;
          case 30: 
            { System.out.println("Call: " + yytext());
            }
          case 71: break;
          case 31: 
            { System.out.println("Case "+ yytext());
            }
          case 72: break;
          case 32: 
            { System.out.println("Main "+ yytext());
            }
          case 73: break;
          case 33: 
            { System.out.println("EndIf "+ yytext());
            }
          case 74: break;
          case 34: 
            { System.out.println("Write: " + yytext());
            }
          case 75: break;
          case 35: 
            { System.out.println("While " + yytext());
            }
          case 76: break;
          case 36: 
            { System.out.println("Return "+ yytext());
            }
          case 77: break;
          case 37: 
            { System.out.println("ElseIf "+ yytext());
            }
          case 78: break;
          case 38: 
            { System.out.println("Switch "+ yytext());
            }
          case 79: break;
          case 39: 
            { System.out.println("Endcase: " + yytext());
            }
          case 80: break;
          case 40: 
            { System.out.println("Default: " + yytext());
            }
          case 81: break;
          case 41: 
            { System.out.println("Function: " + yytext());
            }
          case 82: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
