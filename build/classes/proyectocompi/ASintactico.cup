package proyectocompi;	
import java.util.ArrayList;
import java_cup.runtime.*;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

parser code{:
	MyTree tree = new MyTree();
	Symbol next;
	TreeNode node = new TreeNode("Errores",null);
	boolean errorFound = false;
	ArrayList<TreeNode> functions = new ArrayList();
	ArrayList<TreeNode> operations = new ArrayList();
	ArrayList<TreeNode> body = new ArrayList();
	ArrayList<TreeNode> arrayElements = new ArrayList();
	ArrayList<TreeNode> params = new ArrayList();
	ArrayList<TreeNode> params2 = new ArrayList();
	ArrayList<TreeNode> cases = new ArrayList();
	ArrayList<TreeNode> comparisons = new ArrayList();
	ArrayList<TreeNode> ifs = new ArrayList();
	ArrayList<TreeNode> assignments = new ArrayList();

	public void report_error(String errorBody, Object info) {
		errorFound = true;
		next = (Symbol)info;
	}

	public void report_fatal_error(String errorBody, Object info) {
		next = (Symbol)info;
		System.out.println("Unexpected Token");
	}

	public int error_sync_size(){
		return 1;
	}

	public void unrecovered_syntax_error(Symbol s){
		System.out.println("Unexpected token: " + next.value + " in line: " + next.left + "; column: " + next.right);
	}

	public void callError(int line, int column){
		if(next.sym == sym.leftParenthesis){
			printError(line,next.right - 1,"Missing function name");
		}else if(next.sym == sym.VariableName || next.sym == sym.Number || 
			next.sym == sym.STRING || next.sym == sym.BooleanValue){
			printError(line,next.right-1,"Missing '(' or ','");
		}else if(next.sym == sym.Delimeter || next.sym == sym.rightParenthesis){
			printError(line,column,"Syntax error in function parameter");
		}else if(next.sym == sym.EOL){
			printError(line,column,"Missing ')'");
		}
	}

	public void assignmentError(int line, int column){
		printError(line,column,"Syntax error in assigment");
	}

	public void missingCallOrTypeError(int line, int column){
		if(next.sym == sym.VariableName){
			printError(line,next.right - 1,"Syntax error in call or in variable type");		
		}else if(next.sym == sym.Assign ||next.sym == sym.MinusEqual ||next.sym == sym.PlusEqual ||
				next.sym == sym.DivEqual ||next.sym == sym.MultEqual){
			printError(line,next.right-1,"Syntax error in variable name");
		}else if(next.sym == sym.leftParenthesis){
			printError(line,column,"Missing for or call");
		}else if(next.sym == sym.Call || next.sym == sym.Type || next.sym == sym.ArrayType || 
				next.sym == sym.If ||next.sym == sym.For || next.sym == sym.While || next.sym == sym.Switch ||
				next.sym == sym.RightKey || next.sym == sym.Read || next.sym == sym.Write){
			printError(line,column,"Missing  '(' or '{' or ';'");
		}else if(next.sym == sym.rightParenthesis){
			printError(line,column,"Missing parameters in function");
		}else if(next.sym == sym.EOL){
			printError(line,column,"Missing ')'");
		}
	}

	public void structureError(int line, int column){
		if(next.sym == sym.leftParenthesis){
			printError(line,column,"Missing if/elseif or while or switch");	
		}else if(next.sym == sym.VariableName || next.sym == sym.Number || next.sym == sym.BooleanValue||
			next.sym == sym.STRING){
			printError(line,next.right-1,"Syntax error in comparison for structure or in function name");
		}else if(next.sym == sym.Equal || next.sym == sym.GreaterThan|| next.sym == sym.GreaterEqual||
			     next.sym == sym.LessThan || next.sym == sym.LessEqual ||next.sym == sym.NotEqual){
			printError(line,next.right-1,"Missing left value in comparison");
		}else if(next.sym == sym.And || next.sym == sym.Or || next.sym == sym.rightParenthesis){
			printError(line,next.right-1,"Missing right value in comparison");
		}else if(next.sym == sym.LeftKey){
			printError(line,column,"Missing ')' or else");
		}else if(next.sym == sym.Elseif || next.sym == sym.Else){
			printError(next.left+1,next.right,"Missing '}'");
		}
	}

	public void returnError(int line, int column){
		 if(sym.RightKey == next.sym){
			printError(next.left,column,"Syntax error in return");
		}else{
			printError(next.left-1,next.right,"Missing '}'");
		}
	}

	public void switchError(int line, int column){
		if(next.sym == sym.VariableName){
			printError(line,column,"Missing '('");
		}else if(next.sym == sym.rightParenthesis){
			printError(line,column,"Missing variable for switch");
		}else if(next.sym == sym.LeftKey){
			printError(line,column,"Missing ')'");
		}else if(next.sym == sym.Case){
			printError(line,column,"Missing '{'");
		}
	}

	public void caseHeaderError(int line, int column){
		if(next.sym == sym.Number || next.sym == sym.STRING || next.sym == sym.Default){
			printError(next.left+1,next.right-1,"Syntax error in case");
		}else if(next.sym == sym.TwoPoints){
			printError(next.left+1,next.right-1,"Missing case value");
		}else{
			printError(next.left+1,next.right-1,"Syntax error in case");
		}
	}

	public void caseEndingError(int line, int column){
		if(next.sym == sym.EOL){
			printError(line,next.right,"Syntax error in endcase");
		}else if(next.sym == sym.Case || next.sym == sym.RightKey){
			printError(line,next.right,"Syntax error in endcase");
		}
	}

	public void functionError(int line, int column, String word){
		if(word.equals("Function")){
			printError(line,next.right,"Syntax error in function name");	
		}else if(word.equals("BeforeType")){
			if(next.sym == sym.Type){
				printError(line,column,"Missing '(' or ',' or ':'");
			}else if(next.sym == sym.VariableName){
				printError(line,column,"Syntax error parameter types");
			}else if(next.sym == sym.Delimeter || next.sym == sym.rightParenthesis){
				printError(line,column,"Syntax error in parameters");
			}else if (next.sym == sym.TwoPoints) {
				printError(line,column,"Missing ')'");
			}		
		}else if(word.equals("Type")){
			printError(line,column,"Syntax error in return type");
		}
	}

	public void addMultipleNodes(TreeNode node, ArrayList<TreeNode> list,boolean reverse){
		try{
			if(reverse){
				for(int i = list.size()-1; i >=0; i--){
					addNodeToTree(node,list.get(i));
				}
			}else{
				for(int i = 0; i < list.size(); i++){
					addNodeToTree(node,list.get(i));
				}
			}
		}catch(Exception e){
			System.out.println("Error");
		}
	}

	public boolean verifyBody(int size){
		if(size>body.size()){
			return false;
		}
		return true;
	}

	public void addNodeToTree(TreeNode parent, TreeNode node){
		node.setParent(parent);
		parent.addSon(node);
	}

	public void printError(int line, int column, String message){
		TreeNode error = new TreeNode("Syntax error in line: " + line + " Column: " + column + 
					"; "  + message,null);
		addNodeToTree(node,error);
		System.out.println("Syntax error in line: " + line + " Column: " + column + 
					"; "  + message);
	}

	public TreeNode verifyAssignmentOperator(TreeNode param){
			TreeNode node = new TreeNode();

			if(param.value.toString().equals(":=")){
				node = new TreeNode("Assignment",null);
			}else if(param.value.toString().equals("+=")){
				node = new TreeNode("SumAssignment",null);
			}else if(param.value.toString().equals("-=")){
				node = new TreeNode("SubAssignment",null);
			}else if(param.value.toString().equals("*=")){
				node = new TreeNode("MultAssignment",null);
			}else if(param.value.toString().equals("/=")){
				node = new TreeNode("DivAssignment",null);
			}
			return node;
	}

	public TreeNode verifyComparisonOperator(TreeNode param){
			TreeNode node = new TreeNode();

			if(param.value.toString().equals("==")){
				node = new TreeNode("Equal",null);
			}else if(param.value.toString().equals(">=")){
				node = new TreeNode("GreaterEqual",null);
			}else if(param.value.toString().equals("<=")){
				node = new TreeNode("LessEqual",null);
			}else if(param.value.toString().equals("!=")){
				node = new TreeNode("Different",null);
			}else if(param.value.toString().equals("<")){
				node = new TreeNode("LessThan",null);
			}else if(param.value.toString().equals(">")){
				node = new TreeNode("GreaterThan",null);
			}
			return node;
	}	

:};

terminal Number;
terminal VariableName; 
terminal BooleanValue; 
terminal Type; 
terminal STRING;  
terminal MultOP; 
terminal DivOP; 
terminal AddOP; 
terminal SubOP; 
terminal Assign; 
terminal PlusEqual;
terminal MinusEqual;
terminal MultEqual;
terminal DivEqual; 
terminal And; 
terminal Or; 
terminal Equal; 
terminal NotEqual; 
terminal GreaterThan; 
terminal LessThan;
terminal GreaterEqual; 
terminal LessEqual; 
terminal If; 
terminal Elseif; 
terminal Else; 
terminal Case; 
terminal Endcase;
terminal Default; 
terminal Switch;
terminal Function; 
terminal Call;
terminal Return; 
terminal EOL;
terminal Delimeter; 
terminal leftParenthesis; 
terminal rightParenthesis; 
terminal ThreePoints; 
terminal LeftKey; 
terminal RightKey; 
terminal TwoPoints;
terminal Main;
terminal For;
terminal While;
terminal LeftBracket; 
terminal RightBracket;
terminal ArrayType;
terminal Write;
terminal Read;
terminal beginComment;
terminal endComment;
terminal Comment;
terminal ModOP;

non terminal leftValue; 
non terminal Assignment; 
non terminal SingleAssignment; 
non terminal Declaration; 
non terminal AssignmentOperator;   
non terminal AddSub; 
non terminal MultDiv; 
non terminal MultipleAddSub; 
non terminal MultipleMultDiv; 
non terminal ArithmeticOperation; 
non terminal Comparison; 
non terminal AndOr; 
non terminal RelationalOperator;
non terminal ComparisonInParenthesis;
non terminal MultipleComparison;
non terminal IF;
non terminal ELSEIF;
non terminal SWITCH;
non terminal CASE;
non terminal CaseHeader;
non terminal CaseEnding; 
non terminal CaseValues;
non terminal ComparisonSwitch;
non terminal FUNCTION;
non terminal Params;
non terminal ParamsOrEmpty; 
non terminal RETURN;
non terminal FunctionHeader;
non terminal FunctionBody;  
non terminal CALL;
non terminal CallParams; 
non terminal CallParamsOrEmpty;
non terminal CallHeader; 
non terminal BODY; 
non terminal MAIN; 
non terminal PROGRAM;
non terminal FOR;
non terminal WHILE;
non terminal WhileForBody; 
non terminal ERROR;
non terminal ArrayAssignment;
non terminal Element;
non terminal VariableType; 
non terminal paramsFor; 
non terminal declarationFor;
non terminal rangeFor;
non terminal COMMENT;
non terminal CompleteComment; 
non terminal WRITE;
non terminal READ;

/*Gramatica del programa*/
PROGRAM ::= MAIN:m FUNCTION{:
					if(!parser.errorFound){
						parser.tree = new MyTree(new TreeNode("Program", null));
						parser.addNodeToTree(parser.tree.root, (TreeNode)m);
						TreeNode node = new TreeNode("Functions", null);
						parser.addMultipleNodes(node,parser.functions,true);
						parser.addNodeToTree(parser.tree.root,node);
						RESULT = parser.tree;
					}else{
						parser.tree = new MyTree(parser.node);
						RESULT = parser.tree;
					}
			:};

/*Gramatica para WRITE and READ*/
WRITE ::= Write leftParenthesis CallParams rightParenthesis EOL{:
				if(!parser.errorFound){
					TreeNode node = new TreeNode("Write", null);
					parser.addMultipleNodes(node,parser.params,false);
					parser.params = new ArrayList();
					RESULT = node;
				}
	      :};
READ ::= Read leftParenthesis VariableName:name rightParenthesis EOL{:
				if(!parser.errorFound){
					TreeNode node = new TreeNode("Read", null);
					TreeNode node1 = new TreeNode(name.toString(), null);
					parser.addNodeToTree(node,node1);
					RESULT = node;
				}
		:};
/*Gramatica para main*/
MAIN ::= Main leftParenthesis rightParenthesis FunctionBody:body{:
				if(!parser.errorFound){
					TreeNode node = new TreeNode("Main",null);
					parser.addNodeToTree(node,(TreeNode)body);
					RESULT = node;
				}
		 :}|
		 error:e{:
		 		parser.printError(0,0,"Missing Main()");
		 :} FunctionBody;
COMMENT ::= beginComment CompleteComment endComment;
CompleteComment ::= CompleteComment Comment|;
/*Gramatica para el body del programa*/
BODY ::=  BODY ERROR|
		  BODY COMMENT|
		  BODY:B READ:R {:
		  		if(!parser.errorFound){
		  			ArrayList<TreeNode> nodes = new ArrayList();
		  			if(B == null){
		  				nodes = new ArrayList();
		  			}else{
		  				nodes = ((ArrayList<TreeNode>)B);
		  			}
		  			nodes.add((TreeNode)R);
		  			RESULT = nodes;
		  		}
		  :}|
		  BODY:B WRITE:W {:
		  		if(!parser.errorFound){
		  			ArrayList<TreeNode> nodes = new ArrayList();
		  			if(B == null){
		  				nodes = new ArrayList();
		  			}else{
		  				nodes = ((ArrayList<TreeNode>)B);
		  			}
		  			nodes.add((TreeNode)W);
		  			RESULT = nodes;
		  		}
		  :}|
		  BODY:B Declaration:D {:
		  		if(!parser.errorFound){
		  			ArrayList<TreeNode> nodes = new ArrayList();
		  			if(B == null){
		  				nodes = new ArrayList();
		  			}else{
		  				nodes = ((ArrayList<TreeNode>)B);
		  			}
		  			nodes.add((TreeNode)D);
		  			RESULT = nodes;
		  		}
		  :}| 
		  BODY:B CALL:C EOL{:
		  		if(!parser.errorFound){
		  			ArrayList<TreeNode> nodes = new ArrayList();
		  			if(B == null){
		  				nodes = new ArrayList();
		  			}else{
		  				nodes = ((ArrayList<TreeNode>)B);
		  			}
		  			nodes.add((TreeNode)C);
		  			RESULT = nodes;
		  		}
		  :}|  
		  BODY:B IF:I {:
		  		if(!parser.errorFound){
		  			ArrayList<TreeNode> nodes = new ArrayList();
		  			if(B == null){
		  				nodes = new ArrayList();
		  			}else{
		  				nodes = ((ArrayList<TreeNode>)B);
		  			}
		  			nodes.add((TreeNode)I);
		  			RESULT = nodes;
		  		}
		  :}  | 
		  BODY:B SWITCH:S {:
		  		if(!parser.errorFound){
		  			ArrayList<TreeNode> nodes = new ArrayList();
		  			if(B == null){
		  				nodes = new ArrayList();
		  			}else{
		  				nodes = ((ArrayList<TreeNode>)B);
		  			}
		  			nodes.add((TreeNode)S);
		  			RESULT = nodes;
		  		}
		  :} | 
		  BODY:B SingleAssignment:SA {:
		  		if(!parser.errorFound){
		  			ArrayList<TreeNode> nodes = new ArrayList();
		  			if(B == null){
		  				nodes = new ArrayList();
		  			}else{
		  				nodes = ((ArrayList<TreeNode>)B);
		  			}
		  			nodes.add((TreeNode)SA);
		  			RESULT = nodes;
		  		}
		  :}|
		  BODY:B FOR:F {:
		  		if(!parser.errorFound){
		  			ArrayList<TreeNode> nodes = new ArrayList();
		  			if(B == null){
		  				nodes = new ArrayList();
		  			}else{
		  				nodes = ((ArrayList<TreeNode>)B);
		  			}
		  			nodes.add((TreeNode)F);
		  			RESULT = nodes;
		  		}
		  :}|
		  BODY:B WHILE:W{:
		  		if(!parser.errorFound){
		  			ArrayList<TreeNode> nodes = new ArrayList();
		  			if(B == null){
		  				nodes = new ArrayList();
		  			}else{
		  				nodes = ((ArrayList<TreeNode>)B);
		  			}
		  			nodes.add((TreeNode)W);
		  			RESULT = nodes;
		  		}
		  :}|;

ERROR ::= Call error:e{:
				parser.callError(eleft + 1, eright + 1);
		  :} EOL| 
		  VariableType error:e{:
		  		parser.assignmentError(eleft + 1, eright + 1);
		  :} EOL|error:e{:
		  		parser.missingCallOrTypeError(eleft + 1, eright +1);
		  :} EOL|
		  error:e{:
		  		parser.structureError(eleft+1, eright+1);
		  :} WhileForBody;

/*Gramatica para llamados a funciones*/
CALL ::= Call VariableName:name CallHeader{:
				if(!parser.errorFound){
		 			TreeNode node = new TreeNode("Call",null);
		 			TreeNode node3 = new TreeNode("FunctionParams",null);
		 			TreeNode nameNode = new TreeNode(name.toString(),null);
		 			parser.addNodeToTree(node,nameNode);

		 			if(parser.params.size() > 0){
		 				parser.addNodeToTree(node,node3);
		 				parser.addMultipleNodes(node3,parser.params,false);
		 			}
		 			RESULT = node;
		 			parser.params = new ArrayList();
		 		}
		 :};
CallHeader ::= leftParenthesis CallParamsOrEmpty rightParenthesis;
CallParams ::= leftValue:LV {:parser.params.add((TreeNode)LV);:} | 
			   CallParams Delimeter leftValue:LV {:parser.params.add((TreeNode)LV);:};
CallParamsOrEmpty ::= CallParams|;

/*Gramatica para funciones*/
FUNCTION ::= Function VariableName:functionName FunctionHeader:FH  FunctionBody:body FUNCTION{:
					if(!parser.errorFound){
						TreeNode node = new TreeNode("function", null);
						TreeNode params2 = new TreeNode("Parameters", null);
						TreeNode nameNode = new TreeNode(functionName.toString(), null);
						parser.addNodeToTree(node,nameNode);
						parser.addNodeToTree(node,((TreeNode)((ArrayList)FH).get(0)));
						parser.addNodeToTree(node,params2);
						parser.addNodeToTree(node,(TreeNode)body);
						parser.addMultipleNodes(params2,((ArrayList<TreeNode>)((ArrayList)FH).get(1)),false);
						parser.functions.add(node);
						parser.params2 = new ArrayList();
					}
			 :}|
			 error:e{:
			 	parser.functionError(eleft+1,eright+1,"Function");
			 :} FunctionBody FUNCTION|;
FunctionHeader ::= leftParenthesis ParamsOrEmpty:P rightParenthesis TwoPoints VariableType:type{:
							ArrayList arr = new ArrayList();
							arr.add(type);
							arr.add(P);
							RESULT = arr;
				   :}|
				   error:e{:
			 			parser.functionError(eleft+1,eright+1,"BeforeType");
				   	:} VariableType|
				   	leftParenthesis ParamsOrEmpty rightParenthesis error:e{:
			 			parser.functionError(eleft+1,eright+1,"Type");
				   	:};
FunctionBody ::= LeftKey BODY:body RETURN:R RightKey{:
						if(!parser.errorFound){
							TreeNode bodyNode = new TreeNode("Body",null);
							parser.body = (ArrayList<TreeNode>)body;
							parser.addMultipleNodes(bodyNode,parser.body,false);
							parser.addNodeToTree(bodyNode,(TreeNode)R);
							RESULT = bodyNode;
						}						
				:}|
				 LeftKey BODY error:e{:
				 		parser.returnError(eleft+1,eright+1);
				 :}|
				 error:e{:
				 	System.out.println("Fixing");
				 :} BODY RETURN RightKey;
Params ::= VariableType:type VariableName:name {:
				if(!parser.errorFound){
					TreeNode node = new TreeNode("Parameter", null);
					TreeNode node1 = new TreeNode(type.toString(), null);
					TreeNode node2 = new TreeNode(name.toString(), null);
					parser.addNodeToTree(node,node1);
					parser.addNodeToTree(node,node2);
					ArrayList<TreeNode> arr = new ArrayList();
					arr.add(node);
					RESULT = arr;
				}
	       :}| 
		   Params:P Delimeter VariableType:type VariableName:name{:
		   		if(!parser.errorFound){
		   			TreeNode node = new TreeNode("Parameter", null);
					TreeNode node1 = new TreeNode(type.toString(), null);
					TreeNode node2 = new TreeNode(name.toString(), null);
					parser.addNodeToTree(node,node1);
					parser.addNodeToTree(node,node2);
					ArrayList<TreeNode> arr = new ArrayList();
					if(P != null){
						arr = (ArrayList<TreeNode>)P;
					}
					arr.add(node);
					RESULT = arr;
				}
		   :};
ParamsOrEmpty ::= Params:P{:RESULT = P;:}|;
RETURN ::= Return leftValue:LV EOL{:
				if(!parser.errorFound){
					TreeNode node = new TreeNode("Return", null);
					parser.addNodeToTree(node,(TreeNode)LV);
					RESULT = node;
				}
	       :};

/*Gramatica para declaraciones y asignaciones*/
Declaration ::= VariableType:VType Assignment EOL {:
					if(!parser.errorFound){
						TreeNode declaration = new TreeNode("Declaration",null);
						TreeNode type = new TreeNode("Type",null);
						TreeNode typeNode = new TreeNode(VType.toString(),null);
						parser.addNodeToTree(declaration,type);
						parser.addMultipleNodes(declaration,parser.assignments,false);
						parser.addNodeToTree(type,typeNode);
						parser.assignments = new ArrayList();
						RESULT = declaration;
					}
				:};
Assignment ::= VariableName:name AssignmentOperator:operator leftValue:leftVal {:
					if(!parser.errorFound){
						TreeNode assignment = parser.verifyAssignmentOperator((TreeNode)operator);
						TreeNode nameNode = new TreeNode(name.toString(),null);
						parser.addNodeToTree(assignment,nameNode);
						parser.addNodeToTree(assignment,(TreeNode)leftVal);
						parser.assignments.add(assignment);
					}
			   :}| 
               Assignment Delimeter VariableName:name AssignmentOperator:operator leftValue:leftVal {:
					if(!parser.errorFound){
						TreeNode assignment = new TreeNode("Assignment",null);
						TreeNode nameNode = new TreeNode(name.toString(),null);
						parser.addNodeToTree(assignment,nameNode);
						parser.addNodeToTree(assignment,(TreeNode)leftVal);
						parser.assignments.add(assignment);
					}
			   :}|
			   VariableName:name{:
			   		if(!parser.errorFound){
			   			TreeNode nameNode = new TreeNode(name.toString(), null);
			   			parser.assignments.add(nameNode);
			   		}
			   	:}| 
			   Assignment Delimeter VariableName:name{:
			   		if(!parser.errorFound){
			   			TreeNode nameNode = new TreeNode(name.toString(), null);
			   			parser.assignments.add(nameNode);
			   		}
			   	:}; 
leftValue ::= CALL:C{:
              	RESULT = C;
              	:}|AddSub:AS{:
					RESULT = AS;
			  :}|
              BooleanValue:Boolean{:
              		if(!parser.errorFound){
              			TreeNode node = new TreeNode("boolean", null);
              			TreeNode value = new TreeNode(Boolean.toString(),null);
              			parser.addNodeToTree(node, value);
              			RESULT = node;
              		}
              :}|
              STRING:word{:
              		if(!parser.errorFound){
              			TreeNode node = new TreeNode("string", null);
              			TreeNode value = new TreeNode(word.toString(),null);
              			parser.addNodeToTree(node,value);
              			RESULT = node;
              		}
              :}|
              ArrayAssignment:AA {:
              	RESULT = AA;
              	:};
AssignmentOperator ::= Assign {:RESULT = new TreeNode(":=",null);:} | 
                       PlusEqual {:RESULT = new TreeNode("+=",null);:}| 
                       MinusEqual {:RESULT = new TreeNode("-=",null);:}| 
                       MultEqual {:RESULT = new TreeNode("*=",null);:}| 
                       DivEqual{:RESULT = new TreeNode("/=",null);:};
VariableType ::= Type:t {:RESULT = new TreeNode(t.toString(),null);:} | 
                 ArrayType:t {:RESULT = new TreeNode(t.toString(),null);:}; 
ArrayAssignment ::= Type:type LeftBracket AddSub:size RightBracket{:
						if(!parser.errorFound){
							TreeNode node = new TreeNode("ArrayAssignment",null);
							TreeNode node1 = new TreeNode(type.toString(),null);
							TreeNode node2 = (TreeNode)size;
							parser.addNodeToTree(node,node1);
							parser.addNodeToTree(node,node2);
							RESULT = node;
						}
					:} | 
                    LeftBracket Element RightBracket{:
                    	if(!parser.errorFound){
                    		TreeNode node = new TreeNode("ArrayAssignment",null);
                    		TreeNode node2 = new TreeNode("Elements",null);
                    		parser.addNodeToTree(node,node2);
                    		parser.addMultipleNodes(node2,parser.arrayElements,false);
                    		RESULT = node;
                    		parser.arrayElements = new ArrayList();
                    	}
                    :};
Element ::= leftValue:LV {:
				parser.arrayElements.add((TreeNode)LV);
			:} | 
            Element Delimeter leftValue:LV {:
            	parser.arrayElements.add((TreeNode)LV);
            :};
SingleAssignment ::= VariableName:name AssignmentOperator:operator leftValue:LV EOL {:
					 		if(!parser.errorFound){
					 			TreeNode node = new TreeNode("Assignment",null);
					 			TreeNode nameNode = new TreeNode(name.toString(), null);
					 			parser.addNodeToTree(node,nameNode);
					 			parser.addNodeToTree(node,(TreeNode)LV);
					 			RESULT = node;
					 		}
					 :}|VariableName:name LeftBracket AddSub:size RightBracket AssignmentOperator:operator leftValue:LV EOL{:
					 			if(!parser.errorFound){
					 			TreeNode node = new TreeNode("ArrayAssignment",null);
					 			TreeNode nameNode = new TreeNode(name.toString(), null);
					 			parser.addNodeToTree(node,nameNode);
					 			parser.addNodeToTree(node,(TreeNode)size);
					 			parser.addNodeToTree(node,(TreeNode)LV);
					 			RESULT = node;
					 		}
					 	:};

/*Gramatica para switch*/
SWITCH ::= Switch  ComparisonSwitch:variable LeftKey  CASE:C RightKey{:
				if(!parser.errorFound){
					TreeNode node = new TreeNode("Switch",null);
					parser.addNodeToTree(node, (TreeNode)variable);
					parser.addMultipleNodes(node,(ArrayList<TreeNode>)C,false);
					RESULT = node;
					parser.cases = new ArrayList();
				}
			:}|
			Switch error:e{:
				parser.switchError(eleft + 1, eright + 1);
			:} CASE RightKey;
ComparisonSwitch ::= leftParenthesis VariableName:name rightParenthesis {:
							if(!parser.errorFound){
								TreeNode nameNode = new TreeNode(name.toString(),null);
								RESULT = nameNode;
							}
					 :};
CaseHeader ::=	Case CaseValues:value TwoPoints{:
					if(!parser.errorFound){
						RESULT = ((TreeNode)value);
					}
				:};
CaseEnding ::= BODY:B Endcase EOL{:
					if(!parser.errorFound){
						TreeNode body = new TreeNode("Body", null);
						parser.addMultipleNodes(body,(ArrayList<TreeNode>)B,false);
						RESULT = body;
						parser.body = new ArrayList();
					}
				:}|
				BODY error:e{:
					parser.caseEndingError(eleft+1, eright+1);
				:}; 
CASE ::= CASE:C CaseHeader:header CaseEnding:ending{:
				if(!parser.errorFound){
					ArrayList<TreeNode> arr = new ArrayList();
					if(C != null){
							arr = (ArrayList<TreeNode>)C;
					}
					TreeNode caseNode = new TreeNode("Case", null);
					parser.addNodeToTree(caseNode,(TreeNode)header);
					parser.addNodeToTree(caseNode,(TreeNode)ending);
					arr.add(caseNode);
					RESULT = arr;
				}
		 :}|
				error:e{:
					parser.caseHeaderError(eleft+1, eright+1);
				:} CaseEnding|;
CaseValues ::= Number:number {:RESULT = new TreeNode(number.toString(), null);:}|
               STRING:string{:RESULT = new TreeNode(string.toString(), null);:}|
               Default:def{:RESULT = new TreeNode(def.toString(), null);:};

/*Gramatica para if*/
IF ::= If ComparisonInParenthesis:CP WhileForBody:body ELSEIF{:
			if(!parser.errorFound){
				TreeNode ifNode = new TreeNode("If", null);
				parser.addNodeToTree(ifNode,(TreeNode)CP);
				parser.addNodeToTree(ifNode,(TreeNode)body);
				parser.addMultipleNodes(ifNode,parser.ifs,true);
				parser.ifs = new ArrayList();
				RESULT =ifNode;
			}
	   :};
ELSEIF ::= Elseif ComparisonInParenthesis:CP WhileForBody:body ELSEIF{:
				if(!parser.errorFound){
					TreeNode elseif = new TreeNode("ElseIf", null);
					parser.addNodeToTree(elseif,(TreeNode)CP);
					parser.addNodeToTree(elseif,(TreeNode)body);
           			parser.ifs.add(elseif);
           		}
	       :}|
           Else WhileForBody:body{:
           		if(!parser.errorFound){
           			TreeNode elseNode = new TreeNode("Else",null);
           			parser.addNodeToTree(elseNode,(TreeNode)body);
           			parser.ifs.add(elseNode);
           		}
           :}|;

/*Gramatica para operaciones matematicas*/
AddSub ::= MultDiv:MD MultipleAddSub:MAS {:
		   		if(!parser.errorFound){
		   			parser.operations.add((TreeNode)MD);
						TreeNode AddSub = new TreeNode("int", null);
						parser.addMultipleNodes(AddSub,parser.operations,true);
						RESULT = AddSub;
						parser.operations = new ArrayList();
					}
		   :};
MultipleAddSub ::= AddOP MultDiv:MD MultipleAddSub:MAS {:
                   		parser.operations.add((TreeNode)MD);
                   		parser.operations.add(new TreeNode("+",null));
                   :}| 
                   SubOP MultDiv:MD MultipleAddSub {:
                   		parser.operations.add((TreeNode)MD);
                   		parser.operations.add(new TreeNode("-",null));
                   :}|;
MultDiv ::= ArithmeticOperation:AOP MultipleMultDiv {:
				if(!parser.errorFound){
					parser.operations.add((TreeNode)AOP);
					TreeNode multDiv = new TreeNode("int2", null);
					parser.addMultipleNodes(multDiv,parser.operations,true);
					RESULT = multDiv;
					parser.operations = new ArrayList();
				}
			:};
MultipleMultDiv ::= MultOP ArithmeticOperation:AOP MultipleMultDiv {:
						parser.operations.add((TreeNode)AOP);
						parser.operations.add(new TreeNode("*",null));
					:}| 
                    DivOP ArithmeticOperation:AOP MultipleMultDiv{:
						parser.operations.add((TreeNode)AOP);
						parser.operations.add(new TreeNode("/",null));
					:}|ModOP ArithmeticOperation:AOP MultipleMultDiv {:
						parser.operations.add((TreeNode)AOP);
						parser.operations.add(new TreeNode("mod",null));
					:}|;
ArithmeticOperation ::= VariableName:name {:
							if(!parser.errorFound){
								TreeNode nameNode = new TreeNode(name.toString(),null);  
								RESULT = nameNode;
							}
						:}| 
                        Number:number {:
                        	if(!parser.errorFound){
								TreeNode nameNode = new TreeNode(number.toString(),null);
                        		RESULT = nameNode;
                        	}
						:}|
                        leftParenthesis AddSub:AS rightParenthesis{:
                        	if(!parser.errorFound){
                        		TreeNode parenthesis = new TreeNode("Parenthesis", null);
                        		parser.addNodeToTree(parenthesis,(TreeNode)AS);
                        		RESULT = parenthesis;
                        	}
                        :};  

/*Gramatica para comparaciones*/
ComparisonInParenthesis ::= leftParenthesis Comparison rightParenthesis{:
									if(!parser.errorFound){
										TreeNode condition = new TreeNode("Conditions", null);
										int contador = -1;
										if(parser.params.size()>0){
											contador = 0;
										}
										for(int i = parser.comparisons.size()-1; i >= 0; i--){
											parser.addNodeToTree(condition,parser.comparisons.get(i));
											if(contador>-1 && contador<parser.params.size()){
												parser.addNodeToTree(condition,parser.params.get(contador));
												contador++;
											}
										}
										parser.params = new ArrayList();
										parser.comparisons = new ArrayList();
										RESULT = condition;
									}
							:};
Comparison ::= leftValue:LV RelationalOperator:operator leftValue:RV MultipleComparison{:
						if(!parser.errorFound){
							TreeNode comparison = parser.verifyComparisonOperator((TreeNode)operator);
							parser.addNodeToTree(comparison,(TreeNode)LV);
							parser.addNodeToTree(comparison,(TreeNode)RV);
							parser.comparisons.add(comparison);
						}
				:};
MultipleComparison ::= AndOr:AO Comparison{:
							RESULT = AO;
					   :}|;
AndOr ::= And{:RESULT = parser.params.add(new TreeNode("AND", null));:}|
          Or{:RESULT = parser.params.add(new TreeNode("OR", null));:};
RelationalOperator ::=Equal {:RESULT = new TreeNode("==",null);:}| 
                      NotEqual {:RESULT = new TreeNode("!=",null);:}| 
                      GreaterThan {:RESULT = new TreeNode(">",null);:}| 
                      LessThan {:RESULT = new TreeNode("<",null);:}| 
                      GreaterEqual {:RESULT = new TreeNode(">=",null);:}| 
                      LessEqual{:RESULT = new TreeNode("<=",null);:};

/*Gramatica para for*/
FOR ::= For paramsFor:cond WhileForBody:body{:
			if(!parser.errorFound){
				TreeNode For = new TreeNode("For", null);
				parser.addNodeToTree(For,(TreeNode)cond);
				parser.addNodeToTree(For,(TreeNode)body);
				RESULT = For;
			}
	    :};
paramsFor ::= leftParenthesis  declarationFor:V Delimeter rangeFor:R EOL AddSub:A rightParenthesis{:
					if(!parser.errorFound){
						TreeNode node = new TreeNode("Condition", null);
						TreeNode step = new TreeNode("stepValue", null);
						parser.addNodeToTree(node,(TreeNode)V);
						parser.addNodeToTree(node,(TreeNode)R);
						parser.addNodeToTree(node,step);
						parser.addNodeToTree(step,(TreeNode)A);
						RESULT = node;
					}
	          :};
declarationFor ::= Type:type VariableName:name {:
						if(!parser.errorFound){
							TreeNode var = new TreeNode("Variable", null);
							TreeNode typeNode = new TreeNode(type.toString(), null);
							TreeNode nameNode = new TreeNode(name.toString(), null);
							parser.addNodeToTree(var,typeNode);
							parser.addNodeToTree(var,nameNode);
							RESULT = var;
						}

				   :}; 
rangeFor ::= AddSub:a1 ThreePoints AddSub:a2 {:
				 if(!parser.errorFound){
				 	TreeNode range = new TreeNode("Range", null);
				 	parser.addNodeToTree(range,(TreeNode)a1);
				 	parser.addNodeToTree(range,(TreeNode)a2);
					 RESULT = range;
				}
	         :};

/*Gramatica para while*/
WHILE ::= While ComparisonInParenthesis:CP WhileForBody:body{:
				if(!parser.errorFound){
					TreeNode whileNode = new TreeNode("While", null);
					parser.addNodeToTree(whileNode,(TreeNode)CP);
					parser.addNodeToTree(whileNode,(TreeNode)body);
					RESULT = whileNode;
				}
		  :};
WhileForBody ::= LeftKey BODY:body RightKey{:
						if(!parser.errorFound){
							TreeNode bodyNode = new TreeNode("Body",null);
							parser.body = (ArrayList<TreeNode>)body;
							parser.addMultipleNodes(bodyNode,parser.body,false);
							RESULT = bodyNode;
						}
				  :}|
				  LeftKey BODY error:e{:
				  		parser.printError(eleft+1, eright+1, "Missing '}'");
				  :};