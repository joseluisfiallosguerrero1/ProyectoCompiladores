package proyectocompi;
import java_cup.runtime.*;

parser code{:
	public void report_error(String errorBody, Object info) {
		
	}

:};

terminal Number;
terminal String VariableName, BooleanValue, Type, STRING, // Tokens para declaraciones y asignaciones 
				MultOP, DivOP, AddOP, SubOP, //Tokens de operadores aritmeticos
				Assign, PlusEqual,MinusEqual,MultEqual,DivEqual, //Tokens de asignacion
				And, Or, Equal, NotEqual, GreaterThan, LessThan,GreaterEqual, LessEqual, // Tokens relacionales
                If, Elseif, Endif, Else, Then, //Tokens para if
                Case, Endcase,Default, Switch, //Tokens para Switch
                Function, Call,Return, //Tokens para funciones
                EOL, Delimeter, leftParenthesis, rightParenthesis, ThreePoints, LeftKey, RightKey, TwoPoints,//Simbolos
                Main,For,While;//Main

non terminal String leftValue, Assignment, SingleAssignment, MultipleAssignment, Declaration, AssignmentOperator, //Producciones Asignacion  
					AddSub, MultDiv, ArithmeticOperation, //Producciones aritmeticas
					Comparison, MultipleComparison, AndOr, RelationalOperator, //Producciones de comparacion
					IF, ELSEIF, //Producciones de if
					SWITCH,CASE, CaseValues, //Producciones de Switch
					FUNCTION,Params, MultipleParams, ParamsOrEmpty, RETURN, //Producciones de funciones 
					CALL, CallParams, CallMultipleParams, CallParamsOrEmpty, //Producciones de llamados a funciones
					BODY, MAIN, PROGRAM,FOR,WHILE; //Producciones generales


/*Gramatica del programa*/
PROGRAM ::= MAIN FUNCTION;

/*Gramatica para main*/
MAIN ::= Main leftParenthesis rightParenthesis LeftKey BODY RightKey | 
		 error:e{:
		 		System.out.println("Error sintactico en la linea " + (eleft+1) + "; columna " + (eright+1) + ". Token Main ausente");
		 	:} leftParenthesis rightParenthesis LeftKey BODY RightKey|
		 	 Main error:e{:
		 		System.out.println("Error sintactico en la linea " + (eleft+1) + "; columna " + (eright+1) + ". Token ( ausente");
		 	:} rightParenthesis LeftKey BODY RightKey|
		 	Main leftParenthesis error:e{:
		 		System.out.println("Error sintactico en la linea " + (eleft+1) + "; columna " + (eright+1) + ". Token ) ausente");
		 	:} LeftKey BODY RightKey|
		 	Main leftParenthesis rightParenthesis error:e{:
		 		System.out.println("Error sintactico en la linea " + (eleft+1) + "; columna " + (eright+1) + ". Token { ausente");
		 	:} BODY RightKey|
		 	Main leftParenthesis rightParenthesis LeftKey BODY error:e{:
		 		System.out.println("Error sintactico en la linea " + (eleft+1) + "; columna " + (eright+1) + ". Token } ausente");
		 	:};


/*Gramatica para el body del programa*/
BODY ::=  Declaration EOL BODY | CALL EOL BODY | IF BODY | SWITCH BODY |SingleAssignment EOL BODY|FOR BODY|WHILE BODY|; 

/*Gramatica para llamados a funciones*/
CALL ::= Call VariableName leftParenthesis CallParamsOrEmpty rightParenthesis;
CallParams ::= leftValue CallMultipleParams;
CallMultipleParams ::= Delimeter CallParams|;
CallParamsOrEmpty ::= CallParams|;

/*Gramatica para funciones*/
FUNCTION ::= Function VariableName leftParenthesis ParamsOrEmpty rightParenthesis TwoPoints Type LeftKey BODY RETURN RightKey FUNCTION|;
Params ::= Type VariableName MultipleParams;
MultipleParams ::= Delimeter Params|;
ParamsOrEmpty ::= Params|;
RETURN ::= Return leftValue EOL | ;

/*Gramatica para declaraciones y asignaciones*/
Declaration ::= Type Assignment;
Assignment ::= VariableName AssignmentOperator leftValue MultipleAssignment|VariableName MultipleAssignment;
SingleAssignment ::= VariableName AssignmentOperator leftValue;
MultipleAssignment ::= Delimeter Assignment|;
leftValue ::= AddSub|BooleanValue|STRING|CALL;
AssignmentOperator ::= Assign | PlusEqual | MinusEqual | MultEqual | DivEqual;


/*Gramatica para switch*/
SWITCH ::= Switch leftParenthesis VariableName rightParenthesis LeftKey CASE Case Default TwoPoints BODY Endcase EOL RightKey;
CASE ::= CASE Case CaseValues TwoPoints BODY Endcase EOL|;
CaseValues ::= AddSub|BooleanValue|STRING;

/*Gramatica para if*/
IF ::= If leftParenthesis Comparison rightParenthesis Then BODY ELSEIF Endif;
ELSEIF ::= Elseif leftParenthesis Comparison rightParenthesis Then BODY  ELSEIF | Else BODY |;

/*Gramatica para operaciones matematicas*/
AddSub ::= AddSub AddOP MultDiv | AddSub SubOP MultDiv | MultDiv;
MultDiv ::= MultDiv MultOP ArithmeticOperation | MultDiv DivOP ArithmeticOperation | ArithmeticOperation;  
ArithmeticOperation ::= VariableName | Number | leftParenthesis AddSub rightParenthesis;

/*Gramatica para comparaciones*/
Comparison ::= leftValue RelationalOperator leftValue MultipleComparison;
MultipleComparison ::= AndOr Comparison|;
AndOr ::= And|Or;
RelationalOperator ::= Equal | NotEqual | GreaterThan | LessThan | GreaterEqual | LessEqual;

/*Gramatica para for*/
FOR ::= For leftParenthesis Type VariableName Delimeter AddSub ThreePoints AddSub Delimeter AddSub rightParenthesis LeftKey BODY RightKey;
 
/*Gramatica para while*/
WHILE ::= While leftParenthesis Comparison rightParenthesis LeftKey BODY RightKey;